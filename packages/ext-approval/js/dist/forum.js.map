{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,+BCLvD,MAAM,EAA+BC,OAAOC,KAAKC,OAAe,OCA1D,EAA+BF,OAAOC,KAAKC,OAAY,I,aCA7D,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,qB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,e,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,oB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,mB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,0B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,qB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,sB,aCWxDC,IAAAA,aAAAA,IAAqB,mBAAmB,WACtCC,IAAAA,UAAAA,WAAkCA,IAAAA,UAAqB,eAEvDC,EAAAA,EAAAA,QAAOD,IAAAA,UAAsB,UAAU,SAASE,GACzCC,KAAKC,cAAiBF,EAAMG,IAAI,WACnCH,EAAMI,IAAI,mBAAoB,EAAC,IAAD,CAAOC,KAAK,mBAAmBC,KAAK,eAAeC,MAAOV,IAAAA,WAAAA,MAAqB,+DAIjHW,IAAAA,UAAAA,WAA4BA,IAAAA,UAAe,cAC3CA,IAAAA,UAAAA,WAA4BA,IAAAA,UAAe,eAE3CT,EAAAA,EAAAA,QAAOU,IAAAA,UAA8B,gBAAgB,SAASC,GACvDT,KAAKS,MAAMC,WAAWT,eACzBQ,EAAME,WAAa,uCAIvBb,EAAAA,EAAAA,QAAOc,IAAAA,UAAyB,gBAAgB,SAASH,GAClDT,KAAKS,MAAMI,KAAKZ,eACnBQ,EAAME,WAAa,yBAIvBb,EAAAA,EAAAA,QAAOgB,IAAAA,UAAuB,eAAe,SAASf,GAC/CC,KAAKS,MAAMI,KAAKZ,cAAiBD,KAAKS,MAAMI,KAAKE,YACpDhB,EAAMI,IAAI,aAAcP,IAAAA,WAAAA,MAAqB,0DAIjDoB,EAAAA,EAAAA,UAASJ,IAAAA,UAAyB,cAAc,SAASK,EAAUC,GACjE,MAAoB,aAAhBA,EAAKd,OACAR,IAAAA,WAAAA,MAAqB,qDAGvBqB,EAASC,OAGlBpB,EAAAA,EAAAA,QAAOqB,IAAc,uBAAuB,SAASpB,EAAOc,IACrDA,EAAKZ,cAAgBY,EAAKO,cAC7BrB,EAAMI,IAAI,UACR,EAAC,IAAD,CAAQE,KAAK,eAAegB,QAASF,IAAAA,cAAAA,KAAgCN,IAClEjB,IAAAA,WAAAA,MAAqB,uDAExB,OAKNuB,IAAAA,cAA6B,WAC3BnB,KAAKsB,KAAK,CAACrB,YAAY,IAED,IAAlBD,KAAKuB,UACPvB,KAAKU,aAAac,eAAe,CAACvB,YAAY,QAGhD,K","sources":["webpack://@flarum/approval/webpack/bootstrap","webpack://@flarum/approval/webpack/runtime/compat get default export","webpack://@flarum/approval/webpack/runtime/define property getters","webpack://@flarum/approval/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/approval/webpack/runtime/make namespace object","webpack://@flarum/approval/external root \"flarum.core.compat['extend']\"","webpack://@flarum/approval/external root \"flarum.core.compat['app']\"","webpack://@flarum/approval/external root \"flarum.core.compat['models/Discussion']\"","webpack://@flarum/approval/external root \"flarum.core.compat['models/Post']\"","webpack://@flarum/approval/external root \"flarum.core.compat['components/Badge']\"","webpack://@flarum/approval/external root \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@flarum/approval/external root \"flarum.core.compat['components/Post']\"","webpack://@flarum/approval/external root \"flarum.core.compat['components/CommentPost']\"","webpack://@flarum/approval/external root \"flarum.core.compat['components/Button']\"","webpack://@flarum/approval/external root \"flarum.core.compat['utils/PostControls']\"","webpack://@flarum/approval/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['models/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Badge'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['utils/PostControls'];","import { extend, override } from 'flarum/extend';\nimport app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Post from 'flarum/models/Post';\nimport Badge from 'flarum/components/Badge';\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\nimport PostComponent from 'flarum/components/Post';\nimport CommentPost from 'flarum/components/CommentPost';\nimport Button from 'flarum/components/Button';\nimport PostControls from 'flarum/utils/PostControls';\n\napp.initializers.add('flarum-approval', () => {\n  Discussion.prototype.isApproved = Discussion.attribute('isApproved');\n\n  extend(Discussion.prototype, 'badges', function(items) {\n    if (!this.isApproved() && !items.has('hidden')) {\n      items.add('awaitingApproval', <Badge type=\"awaitingApproval\" icon=\"fas fa-gavel\" label={app.translator.trans('flarum-approval.forum.badge.awaiting_approval_tooltip')}/>);\n    }\n  });\n\n  Post.prototype.isApproved = Post.attribute('isApproved');\n  Post.prototype.canApprove = Post.attribute('canApprove');\n\n  extend(DiscussionListItem.prototype, 'elementAttrs', function(attrs) {\n    if (!this.attrs.discussion.isApproved()) {\n      attrs.className += ' DiscussionListItem--unapproved';\n    }\n  });\n\n  extend(PostComponent.prototype, 'elementAttrs', function(attrs) {\n    if (!this.attrs.post.isApproved()) {\n      attrs.className += ' Post--unapproved';\n    }\n  });\n\n  extend(CommentPost.prototype, 'headerItems', function(items) {\n    if (!this.attrs.post.isApproved() && !this.attrs.post.isHidden()) {\n      items.add('unapproved', app.translator.trans('flarum-approval.forum.post.awaiting_approval_text'));\n    }\n  });\n\n  override(PostComponent.prototype, 'flagReason', function(original, flag) {\n    if (flag.type() === 'approval') {\n      return app.translator.trans('flarum-approval.forum.post.awaiting_approval_text');\n    }\n\n    return original(flag);\n  });\n\n  extend(PostControls, 'destructiveControls', function(items, post) {\n    if (!post.isApproved() && post.canApprove()) {\n      items.add('approve',\n        <Button icon=\"fas fa-check\" onclick={PostControls.approveAction.bind(post)}>\n          {app.translator.trans('flarum-approval.forum.post_controls.approve_button')}\n        </Button>,\n        10\n      );\n    }\n  });\n\n  PostControls.approveAction = function() {\n    this.save({isApproved: true});\n\n    if (this.number() === 1) {\n      this.discussion().pushAttributes({isApproved: true});\n    }\n  };\n}, -10); // set initializer priority to run after reports\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","Discussion","extend","items","this","isApproved","has","add","type","icon","label","Post","DiscussionListItem","attrs","discussion","className","PostComponent","post","CommentPost","isHidden","override","original","flag","PostControls","canApprove","onclick","save","number","pushAttributes"],"sourceRoot":""}