{"version":3,"sources":["webpack://@flarum/lock/webpack/bootstrap","webpack://@flarum/lock/external \"flarum.core.compat['app']\"","webpack://@flarum/lock/external \"flarum.core.compat['extend']\"","webpack://@flarum/lock/external \"flarum.core.compat['models/Discussion']\"","webpack://@flarum/lock/external \"flarum.core.compat['Model']\"","webpack://@flarum/lock/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@flarum/lock/external \"flarum.core.compat['components/NotificationGrid']\"","webpack://@flarum/lock/external \"flarum.core.compat['components/EventPost']\"","webpack://@flarum/lock/external \"flarum.core.compat['components/Notification']\"","webpack://@flarum/lock/external \"flarum.core.compat['components/Badge']\"","webpack://@flarum/lock/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@flarum/lock/external \"flarum.core.compat['components/Button']\"","webpack://@flarum/lock/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flarum/lock/./src/forum/components/DiscussionLockedPost.js","webpack://@flarum/lock/./src/forum/components/DiscussionLockedNotification.js","webpack://@flarum/lock/./src/forum/index.js","webpack://@flarum/lock/./src/forum/addLockBadge.js","webpack://@flarum/lock/./src/forum/addLockControl.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","DiscussionLockedPost","icon","this","attrs","post","content","locked","descriptionKey","EventPost","DiscussionLockedNotification","href","notification","app","route","discussion","subject","postNumber","translator","trans","user","fromUser","Notification","initializers","add","postComponents","discussionLocked","notificationComponents","Discussion","isLocked","Model","attribute","canLock","extend","badges","Badge","component","type","label","DiscussionControls","items","Button","onclick","lockAction","save","then","current","matches","DiscussionPage","update","redraw","NotificationGrid"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,I,gBClFrDhC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAY,K,cCAzCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAe,Q,cCA5CnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,sB,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAc,O,cCA3CnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,6B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,gC,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,yB,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,4B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,qB,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,8B,cCApCnC,EAAOD,QAAUkC,OAAOC,KAAKC,OAAO,sB,+GCArB,SAASC,EAAeC,EAAUC,GAC/CD,EAASR,UAAYlB,OAAOY,OAAOe,EAAWT,WAC9CQ,EAASR,UAAUU,YAAcF,EACjCA,EAASG,UAAYF,E,WCDFG,E,gGACnBC,K,WACE,OAAOC,KAAKC,MAAMC,KAAKC,UAAUC,OAC7B,cACA,iB,EAGNC,e,WACE,OAAOL,KAAKC,MAAMC,KAAKC,UAAUC,OAC7B,uDACA,0D,UAV0CE,G,OCA7BC,E,gGACnBR,K,WACE,MAAO,e,EAGTS,K,WACE,IAAMC,EAAeT,KAAKC,MAAMQ,aAEhC,OAAOC,IAAIC,MAAMC,WAAWH,EAAaI,UAAWJ,EAAaN,UAAUW,a,EAG7EX,Q,WACE,OAAOO,IAAIK,WAAWC,MAAM,yDAA0D,CAACC,KAAMjB,KAAKC,MAAMQ,aAAaS,c,UAZ/DC,G,qECS1DT,IAAIU,aAAaC,IAAI,eAAe,WAClCX,IAAIY,eAAeC,iBAAmBzB,EACtCY,IAAIc,uBAAuBD,iBAAmBhB,EAE9CkB,IAAWvC,UAAUwC,SAAWC,IAAMC,UAAU,YAChDH,IAAWvC,UAAU2C,QAAUF,IAAMC,UAAU,WCX/CE,iBAAOL,IAAWvC,UAAW,UAAU,SAAS6C,GAC1C/B,KAAK0B,YACPK,EAAOV,IAAI,SAAUW,IAAMC,UAAU,CACnCC,KAAM,SACNC,MAAOzB,IAAIK,WAAWC,MAAM,0CAC5BjB,KAAM,oBCJZ+B,iBAAOM,IAAoB,sBAAsB,SAASC,EAAOzB,GAC3DA,EAAWiB,WACbQ,EAAMhB,IAAI,OAAQiB,IAAOL,UAAU,CACjClC,KAAM,cACNwC,QAASvC,KAAKwC,WAAW1D,KAAK8B,IAC7BF,IAAIK,WAAWC,MAAMJ,EAAWc,WAAa,sDAAwD,0DAI5GU,IAAmBI,WAAa,WAC9BxC,KAAKyC,KAAK,CAACf,UAAW1B,KAAK0B,aAAagB,MAAK,WACvChC,IAAIiC,QAAQC,QAAQC,MACtBnC,IAAIiC,QAAQxE,IAAI,UAAU2E,SAG5BpF,EAAEqF,aFANjB,iBAAOkB,IAAiB9D,UAAW,qBAAqB,SAAUmD,GAChEA,EAAMhB,IAAI,mBAAoB,CAC5BxD,KAAM,mBACNkC,KAAM,cACNoC,MAAOzB,IAAIK,WAAWC,MAAM","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/NotificationGrid'];","module.exports = flarum.core.compat['components/EventPost'];","module.exports = flarum.core.compat['components/Notification'];","module.exports = flarum.core.compat['components/Badge'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Button'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","import EventPost from 'flarum/components/EventPost';\n\nexport default class DiscussionLockedPost extends EventPost {\n  icon() {\n    return this.attrs.post.content().locked\n      ? 'fas fa-lock'\n      : 'fas fa-unlock';\n  }\n\n  descriptionKey() {\n    return this.attrs.post.content().locked\n      ? 'flarum-lock.forum.post_stream.discussion_locked_text'\n      : 'flarum-lock.forum.post_stream.discussion_unlocked_text';\n  }\n}\n","import Notification from 'flarum/components/Notification';\n\nexport default class DiscussionLockedNotification extends Notification {\n  icon() {\n    return 'fas fa-lock';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n\n    return app.route.discussion(notification.subject(), notification.content().postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-lock.forum.notifications.discussion_locked_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n","import { extend } from 'flarum/extend';\nimport app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Discussion from 'flarum/models/Discussion';\nimport NotificationGrid from 'flarum/components/NotificationGrid';\n\nimport DiscussionLockedPost from './components/DiscussionLockedPost';\nimport DiscussionLockedNotification from './components/DiscussionLockedNotification';\nimport addLockBadge from './addLockBadge';\nimport addLockControl from './addLockControl';\n\napp.initializers.add('flarum-lock', () => {\n  app.postComponents.discussionLocked = DiscussionLockedPost;\n  app.notificationComponents.discussionLocked = DiscussionLockedNotification;\n\n  Discussion.prototype.isLocked = Model.attribute('isLocked');\n  Discussion.prototype.canLock = Model.attribute('canLock');\n\n  addLockBadge();\n  addLockControl();\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('discussionLocked', {\n      name: 'discussionLocked',\n      icon: 'fas fa-lock',\n      label: app.translator.trans('flarum-lock.forum.settings.notify_discussion_locked_label')\n    });\n  });\n});\n","import { extend } from 'flarum/extend';\nimport Discussion from 'flarum/models/Discussion';\nimport Badge from 'flarum/components/Badge';\n\nexport default function addLockBadge() {\n  extend(Discussion.prototype, 'badges', function(badges) {\n    if (this.isLocked()) {\n      badges.add('locked', Badge.component({\n        type: 'locked',\n        label: app.translator.trans('flarum-lock.forum.badge.locked_tooltip'),\n        icon: 'fas fa-lock'\n      }));\n    }\n  });\n}\n","import { extend } from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport Button from 'flarum/components/Button';\n\nexport default function addLockControl() {\n  extend(DiscussionControls, 'moderationControls', function(items, discussion) {\n    if (discussion.canLock()) {\n      items.add('lock', Button.component({\n        icon: 'fas fa-lock',\n        onclick: this.lockAction.bind(discussion)\n      }, app.translator.trans(discussion.isLocked() ? 'flarum-lock.forum.discussion_controls.unlock_button' : 'flarum-lock.forum.discussion_controls.lock_button')));\n    }\n  });\n\n  DiscussionControls.lockAction = function() {\n    this.save({isLocked: !this.isLocked()}).then(() => {\n      if (app.current.matches(DiscussionPage)) {\n        app.current.get('stream').update();\n      }\n\n      m.redraw();\n    });\n  };\n}\n"],"sourceRoot":""}