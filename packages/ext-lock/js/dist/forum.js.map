{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flarum/lock/webpack/bootstrap","webpack://@flarum/lock/webpack/runtime/compat get default export","webpack://@flarum/lock/webpack/runtime/define property getters","webpack://@flarum/lock/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/lock/webpack/runtime/make namespace object","webpack://@flarum/lock/external root \"flarum.core.compat['extend']\"","webpack://@flarum/lock/external root \"flarum.core.compat['app']\"","webpack://@flarum/lock/external root \"flarum.core.compat['Model']\"","webpack://@flarum/lock/external root \"flarum.core.compat['models/Discussion']\"","webpack://@flarum/lock/external root \"flarum.core.compat['components/NotificationGrid']\"","webpack://@flarum/lock/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flarum/lock/external root \"flarum.core.compat['components/EventPost']\"","webpack://@flarum/lock/./src/forum/components/DiscussionLockedPost.js","webpack://@flarum/lock/external root \"flarum.core.compat['components/Notification']\"","webpack://@flarum/lock/./src/forum/components/DiscussionLockedNotification.js","webpack://@flarum/lock/external root \"flarum.core.compat['components/Badge']\"","webpack://@flarum/lock/external root \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@flarum/lock/external root \"flarum.core.compat['components/DiscussionPage']\"","webpack://@flarum/lock/external root \"flarum.core.compat['components/Button']\"","webpack://@flarum/lock/./src/forum/index.js","webpack://@flarum/lock/./src/forum/addLockBadge.js","webpack://@flarum/lock/./src/forum/addLockControl.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/NotificationGrid'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/EventPost'];","import EventPost from 'flarum/components/EventPost';\n\nexport default class DiscussionLockedPost extends EventPost {\n  icon() {\n    return this.attrs.post.content().locked\n      ? 'fas fa-lock'\n      : 'fas fa-unlock';\n  }\n\n  descriptionKey() {\n    return this.attrs.post.content().locked\n      ? 'flarum-lock.forum.post_stream.discussion_locked_text'\n      : 'flarum-lock.forum.post_stream.discussion_unlocked_text';\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Notification'];","import Notification from 'flarum/components/Notification';\n\nexport default class DiscussionLockedNotification extends Notification {\n  icon() {\n    return 'fas fa-lock';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n\n    return app.route.discussion(notification.subject(), notification.content().postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-lock.forum.notifications.discussion_locked_text', {user: this.attrs.notification.fromUser()});\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Badge'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Button'];","import { extend } from 'flarum/extend';\nimport app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport Discussion from 'flarum/models/Discussion';\nimport NotificationGrid from 'flarum/components/NotificationGrid';\n\nimport DiscussionLockedPost from './components/DiscussionLockedPost';\nimport DiscussionLockedNotification from './components/DiscussionLockedNotification';\nimport addLockBadge from './addLockBadge';\nimport addLockControl from './addLockControl';\n\napp.initializers.add('flarum-lock', () => {\n  app.postComponents.discussionLocked = DiscussionLockedPost;\n  app.notificationComponents.discussionLocked = DiscussionLockedNotification;\n\n  Discussion.prototype.isLocked = Model.attribute('isLocked');\n  Discussion.prototype.canLock = Model.attribute('canLock');\n\n  addLockBadge();\n  addLockControl();\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('discussionLocked', {\n      name: 'discussionLocked',\n      icon: 'fas fa-lock',\n      label: app.translator.trans('flarum-lock.forum.settings.notify_discussion_locked_label')\n    });\n  });\n});\n","import { extend } from 'flarum/extend';\nimport Discussion from 'flarum/models/Discussion';\nimport Badge from 'flarum/components/Badge';\n\nexport default function addLockBadge() {\n  extend(Discussion.prototype, 'badges', function(badges) {\n    if (this.isLocked()) {\n      badges.add('locked', Badge.component({\n        type: 'locked',\n        label: app.translator.trans('flarum-lock.forum.badge.locked_tooltip'),\n        icon: 'fas fa-lock'\n      }));\n    }\n  });\n}\n","import { extend } from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport Button from 'flarum/components/Button';\n\nexport default function addLockControl() {\n  extend(DiscussionControls, 'moderationControls', function(items, discussion) {\n    if (discussion.canLock()) {\n      items.add('lock', Button.component({\n        icon: 'fas fa-lock',\n        onclick: this.lockAction.bind(discussion)\n      }, app.translator.trans(discussion.isLocked() ? 'flarum-lock.forum.discussion_controls.unlock_button' : 'flarum-lock.forum.discussion_controls.lock_button')));\n    }\n  });\n\n  DiscussionControls.lockAction = function() {\n    this.save({isLocked: !this.isLocked()}).then(() => {\n      if (app.current.matches(DiscussionPage)) {\n        app.current.get('stream').update();\n      }\n\n      m.redraw();\n    });\n  };\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_inheritsLoose","subClass","superClass","create","constructor","__proto__","DiscussionLockedPost","icon","this","attrs","post","content","locked","descriptionKey","EventPost","DiscussionLockedNotification","href","notification","app","route","discussion","subject","postNumber","translator","trans","user","fromUser","Notification","Discussion","Model","extend","badges","isLocked","add","Badge","type","label","DiscussionControls","items","canLock","Button","onclick","lockAction","bind","save","then","current","matches","DiscussionPage","update","m","redraw","NotificationGrid","name"],"sourceRoot":""}