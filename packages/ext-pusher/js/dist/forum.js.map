{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flarum/pusher/webpack/bootstrap","webpack://@flarum/pusher/webpack/runtime/compat get default export","webpack://@flarum/pusher/webpack/runtime/define property getters","webpack://@flarum/pusher/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/pusher/webpack/runtime/make namespace object","webpack://@flarum/pusher/external root \"flarum.core.compat['extend']\"","webpack://@flarum/pusher/external root \"flarum.core.compat['app']\"","webpack://@flarum/pusher/external root \"flarum.core.compat['components/DiscussionList']\"","webpack://@flarum/pusher/external root \"flarum.core.compat['components/DiscussionPage']\"","webpack://@flarum/pusher/external root \"flarum.core.compat['components/IndexPage']\"","webpack://@flarum/pusher/external root \"flarum.core.compat['components/Button']\"","webpack://@flarum/pusher/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/DiscussionList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/IndexPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Button'];","/*global Pusher*/\n\nimport { extend } from 'flarum/extend';\nimport app from 'flarum/app';\nimport DiscussionList from 'flarum/components/DiscussionList';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport IndexPage from 'flarum/components/IndexPage';\nimport Button from 'flarum/components/Button';\n\napp.initializers.add('flarum-pusher', () => {\n  const loadPusher = new Promise((resolve) => {\n    $.getScript('//cdn.jsdelivr.net/npm/pusher-js@7.0.3/dist/web/pusher.min.js', () => {\n      const socket = new Pusher(app.forum.attribute('pusherKey'), {\n        authEndpoint: app.forum.attribute('apiUrl') + '/pusher/auth',\n        cluster: app.forum.attribute('pusherCluster'),\n        auth: {\n          headers: {\n            'X-CSRF-Token': app.session.csrfToken\n          }\n        }\n      });\n\n      return resolve({\n        channels: {\n          main: socket.subscribe('public'),\n          user: app.session.user ? socket.subscribe('private-user' + app.session.user.id()) : null\n        },\n        pusher: socket\n      });\n    });\n  });\n\n  app.pusher = loadPusher;\n  app.pushedUpdates = [];\n\n  extend(DiscussionList.prototype, 'oncreate', function() {\n    app.pusher.then(binding => {\n      const pusher = binding.pusher;\n\n      pusher.bind('newPost', data => {\n        const params = app.discussions.getParams();\n\n        if (!params.q && !params.sort && !params.filter) {\n          if (params.tags) {\n            const tag = app.store.getBy('tags', 'slug', params.tags);\n\n            if (data.tagIds.indexOf(tag.id()) === -1) return;\n          }\n\n          const id = String(data.discussionId);\n\n          if ((!app.current.get('discussion') || id !== app.current.get('discussion').id()) && app.pushedUpdates.indexOf(id) === -1) {\n            app.pushedUpdates.push(id);\n\n            if (app.current.matches(IndexPage)) {\n              app.setTitleCount(app.pushedUpdates.length);\n            }\n\n            m.redraw();\n          }\n        }\n      });\n    });\n  });\n\n  extend(DiscussionList.prototype, 'onremove', function () {\n    app.pusher.then(binding => {\n      binding.pusher.unbind('newPost');\n    });\n  });\n\n  extend(DiscussionList.prototype, 'view', function(vdom) {\n    if (app.pushedUpdates) {\n      const count = app.pushedUpdates.length;\n\n      if (count) {\n        vdom.children.unshift(\n          Button.component({\n            className: 'Button Button--block DiscussionList-update',\n            onclick: () => {\n              this.attrs.state.refresh(false).then(() => {\n                this.loadingUpdated = false;\n                app.pushedUpdates = [];\n                app.setTitleCount(0);\n                m.redraw();\n              });\n              this.loadingUpdated = true;\n            },\n            loading: this.loadingUpdated\n          }, app.translator.trans('flarum-pusher.forum.discussion_list.show_updates_text', { count }))\n        );\n      }\n    }\n  });\n\n  // Prevent any newly-created discussions from triggering the discussion list\n  // update button showing.\n  // TODO: Might be better pause the response to the push updates while the\n  // composer is loading? idk\n  extend(DiscussionList.prototype, 'addDiscussion', function(returned, discussion) {\n    const index = app.pushedUpdates.indexOf(discussion.id());\n\n    if (index !== -1) {\n      app.pushedUpdates.splice(index, 1);\n    }\n\n    if (app.current.matches(IndexPage)) {\n      app.setTitleCount(app.pushedUpdates.length);\n    }\n\n    m.redraw();\n  });\n\n  extend(DiscussionPage.prototype, 'oncreate', function() {\n    app.pusher.then(binding => {\n      const pusher = binding.pusher;\n\n      pusher.bind('newPost', data => {\n        const id = String(data.discussionId);\n\n        if (this.discussion && this.discussion.id() === id && this.stream) {\n          const oldCount = this.discussion.commentCount();\n\n          app.store.find('discussions', this.discussion.id()).then(() => {\n            this.stream.update().then(m.redraw);\n\n            if (!document.hasFocus()) {\n              app.setTitleCount(Math.max(0, this.discussion.commentCount() - oldCount));\n\n              $(window).one('focus', () => app.setTitleCount(0));\n            }\n          });\n        }\n      });\n    });\n  });\n\n  extend(DiscussionPage.prototype, 'onremove', function () {\n    app.pusher.then(binding => {\n      binding.pusher.unbind('newPost');\n    });\n  });\n\n  extend(IndexPage.prototype, 'actionItems', items => {\n    items.remove('refresh');\n  });\n\n  app.pusher.then(binding => {\n    const channels = binding.channels;\n\n    if (channels.user) {\n      channels.user.bind('notification', () => {\n        app.session.user.pushAttributes({\n          unreadNotificationCount: app.session.user.unreadNotificationCount() + 1,\n          newNotificationCount: app.session.user.newNotificationCount() + 1\n        });\n        app.notifications.clear();\n        m.redraw();\n      });\n    }\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","loadPusher","Promise","resolve","$","getScript","socket","Pusher","authEndpoint","cluster","auth","headers","channels","main","subscribe","user","pusher","extend","DiscussionList","binding","bind","data","params","q","sort","filter","tags","tag","tagIds","indexOf","id","String","discussionId","IndexPage","m","redraw","unbind","vdom","count","children","unshift","Button","className","onclick","attrs","state","refresh","then","loadingUpdated","loading","this","returned","discussion","index","DiscussionPage","stream","oldCount","commentCount","update","document","hasFocus","Math","max","window","one","items","remove","unreadNotificationCount","newNotificationCount"],"sourceRoot":""}