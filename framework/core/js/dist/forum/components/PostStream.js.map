{"version":3,"file":"forum/components/PostStream.js","mappings":"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","sources":["webpack://@flarum/core/./src/forum/components/LoadingPost.js","webpack://@flarum/core/./src/forum/components/ReplyPlaceholder.js","webpack://@flarum/core/./src/forum/components/PostStream.js"],"sourcesContent":["import Component from '../../common/Component';\nimport Avatar from '../../common/components/Avatar';\n\n/**\n * The `LoadingPost` component shows a placeholder that looks like a post,\n * indicating that the post is loading.\n */\nexport default class LoadingPost extends Component {\n  view() {\n    return m(\"div\", {\n      className: \"Post CommentPost LoadingPost\"\n    }, m(\"header\", {\n      className: \"Post-header\"\n    }, m(Avatar, {\n      user: null,\n      className: \"PostUser-avatar\"\n    }), m(\"div\", {\n      className: \"fakeText\"\n    })), m(\"div\", {\n      className: \"Post-body\"\n    }, m(\"div\", {\n      className: \"fakeText\"\n    }), m(\"div\", {\n      className: \"fakeText\"\n    }), m(\"div\", {\n      className: \"fakeText\"\n    })));\n  }\n}\nflarum.reg.add('core', 'forum/components/LoadingPost', LoadingPost);","import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport username from '../../common/helpers/username';\nimport DiscussionControls from '../utils/DiscussionControls';\nimport ComposerPostPreview from './ComposerPostPreview';\nimport listItems from '../../common/helpers/listItems';\nimport Avatar from '../../common/components/Avatar';\n\n/**\n * The `ReplyPlaceholder` component displays a placeholder for a reply, which,\n * when clicked, opens the reply composer.\n *\n * ### Attrs\n *\n * - `discussion`\n */\nexport default class ReplyPlaceholder extends Component {\n  view() {\n    if (app.composer.composingReplyTo(this.attrs.discussion)) {\n      return m(\"article\", {\n        className: \"Post CommentPost editing\",\n        \"aria-busy\": \"true\"\n      }, m(\"div\", {\n        className: \"Post-container\"\n      }, m(\"div\", {\n        className: \"Post-side\"\n      }, m(Avatar, {\n        user: app.session.user,\n        className: \"Post-avatar\"\n      })), m(\"div\", {\n        className: \"Post-main\"\n      }, m(\"header\", {\n        className: \"Post-header\"\n      }, m(\"div\", {\n        className: \"PostUser\"\n      }, m(\"h3\", {\n        className: \"PostUser-name\"\n      }, username(app.session.user)), m(\"ul\", {\n        className: \"PostUser-badges badges badges--packed\"\n      }, listItems(app.session.user.badges().toArray())))), m(\"div\", {\n        className: \"Post-body\"\n      }, m(ComposerPostPreview, {\n        className: \"Post-body\",\n        composer: app.composer,\n        surround: this.anchorPreview.bind(this)\n      })))));\n    }\n    const reply = () => {\n      DiscussionControls.replyAction.call(this.attrs.discussion, true).catch(() => {});\n    };\n    return m(\"button\", {\n      className: \"Post ReplyPlaceholder\",\n      onclick: reply\n    }, m(\"div\", {\n      className: \"Post-container\"\n    }, m(\"div\", {\n      className: \"Post-side\"\n    }, m(Avatar, {\n      user: app.session.user,\n      className: \"Post-avatar\"\n    })), m(\"div\", {\n      className: \"Post-main\"\n    }, m(\"span\", {\n      className: \"Post-header\"\n    }, app.translator.trans('core.forum.post_stream.reply_placeholder')))));\n  }\n  anchorPreview(preview) {\n    const anchorToBottom = $(window).scrollTop() + $(window).height() >= $(document).height();\n    preview();\n    if (anchorToBottom) {\n      $(window).scrollTop($(document).height());\n    }\n  }\n}\nflarum.reg.add('core', 'forum/components/ReplyPlaceholder', ReplyPlaceholder);","import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport ScrollListener from '../../common/utils/ScrollListener';\nimport LoadingPost from './LoadingPost';\nimport ReplyPlaceholder from './ReplyPlaceholder';\nimport Button from '../../common/components/Button';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `PostStream` component displays an infinitely-scrollable wall of posts in\n * a discussion. Posts that have not loaded will be displayed as placeholders.\n *\n * ### Attrs\n *\n * - `discussion`\n * - `stream`\n * - `targetPost`\n * - `onPositionChange`\n */\nexport default class PostStream extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.discussion = this.attrs.discussion;\n    this.stream = this.attrs.stream;\n    this.scrollListener = new ScrollListener(this.onscroll.bind(this));\n  }\n  view() {\n    let lastTime;\n    const viewingEnd = this.stream.viewingEnd();\n    const posts = this.stream.posts();\n    const postIds = this.discussion.postIds();\n    const postFadeIn = vnode => {\n      $(vnode.dom).addClass('fadeIn');\n      // 500 is the duration of the fadeIn CSS animation + 100ms,\n      // so the animation has time to complete\n      setTimeout(() => $(vnode.dom).removeClass('fadeIn'), 500);\n    };\n    const items = posts.map((post, i) => {\n      let content;\n      const attrs = {\n        'data-index': this.stream.visibleStart + i\n      };\n      if (post) {\n        const time = post.createdAt();\n        const PostComponent = app.postComponents[post.contentType()];\n        content = !!PostComponent && m(PostComponent, {\n          post: post\n        });\n        attrs.key = 'post' + post.id();\n        attrs.oncreate = postFadeIn;\n        attrs['data-time'] = time.toISOString();\n        attrs['data-number'] = post.number();\n        attrs['data-id'] = post.id();\n        attrs['data-type'] = post.contentType();\n\n        // If the post before this one was more than 4 days ago, we will\n        // display a 'time gap' indicating how long it has been in between\n        // the posts.\n        const dt = time - lastTime;\n        if (dt > 1000 * 60 * 60 * 24 * 4) {\n          content = [m(\"div\", {\n            className: \"PostStream-timeGap\"\n          }, m(\"span\", null, app.translator.trans('core.forum.post_stream.time_lapsed_text', {\n            period: dayjs().add(dt, 'ms').fromNow(true)\n          }))), content];\n        }\n        lastTime = time;\n      } else {\n        attrs.key = 'post' + postIds[this.stream.visibleStart + i];\n        content = m(LoadingPost, null);\n      }\n      return m(\"div\", Object.assign({\n        className: \"PostStream-item\"\n      }, attrs), content);\n    });\n    if (!viewingEnd && posts[this.stream.visibleEnd - this.stream.visibleStart - 1]) {\n      items.push(m(\"div\", {\n        className: \"PostStream-loadMore\",\n        key: \"loadMore\"\n      }, m(Button, {\n        className: \"Button\",\n        onclick: this.stream.loadNext.bind(this.stream)\n      }, app.translator.trans('core.forum.post_stream.load_more_button'))));\n    }\n\n    // Allow extensions to add items to the end of the post stream.\n    if (viewingEnd) {\n      items.push(...this.endItems().toArray());\n    }\n\n    // If we're viewing the end of the discussion, the user can reply, and\n    // is not already doing so, then show a 'write a reply' placeholder.\n    if (viewingEnd && (!app.session.user || this.discussion.canReply())) {\n      items.push(m(\"div\", {\n        className: \"PostStream-item\",\n        key: \"reply\",\n        \"data-index\": this.stream.count(),\n        oncreate: postFadeIn\n      }, m(ReplyPlaceholder, {\n        discussion: this.discussion\n      })));\n    }\n    return m(\"div\", {\n      className: \"PostStream\",\n      role: \"feed\",\n      \"aria-live\": \"off\",\n      \"aria-busy\": this.stream.pagesLoading ? 'true' : 'false'\n    }, items);\n  }\n\n  /**\n   * @returns {ItemList<import('mithril').Children>}\n   */\n  endItems() {\n    const items = new ItemList();\n    return items;\n  }\n  onupdate(vnode) {\n    super.onupdate(vnode);\n    this.triggerScroll();\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.triggerScroll();\n\n    // This is wrapped in setTimeout due to the following Mithril issue:\n    // https://github.com/lhorie/mithril.js/issues/637\n    setTimeout(() => this.scrollListener.start());\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    this.scrollListener.stop();\n    clearTimeout(this.calculatePositionTimeout);\n  }\n\n  /**\n   * Start scrolling, if appropriate, to a newly-targeted post.\n   */\n  triggerScroll() {\n    if (!this.stream.needsScroll) return;\n    const target = this.stream.targetPost;\n    this.stream.needsScroll = false;\n    if ('number' in target) {\n      this.scrollToNumber(target.number, this.stream.animateScroll);\n    } else if ('index' in target) {\n      this.scrollToIndex(target.index, this.stream.animateScroll, target.reply);\n    }\n  }\n\n  /**\n   *\n   * @param {number} top\n   */\n  onscroll(top) {\n    if (top === void 0) {\n      top = window.pageYOffset;\n    }\n    if (this.stream.paused || this.stream.pagesLoading) return;\n    this.updateScrubber(top);\n    this.loadPostsIfNeeded(top);\n\n    // Throttle calculation of our position (start/end numbers of posts in the\n    // viewport) to 100ms.\n    clearTimeout(this.calculatePositionTimeout);\n    this.calculatePositionTimeout = setTimeout(this.calculatePosition.bind(this, top), 100);\n  }\n\n  /**\n   * Check if either extreme of the post stream is in the viewport,\n   * and if so, trigger loading the next/previous page.\n   *\n   * @param {number} top\n   */\n  loadPostsIfNeeded(top) {\n    if (top === void 0) {\n      top = window.pageYOffset;\n    }\n    const marginTop = this.getMarginTop();\n    const viewportHeight = $(window).height() - marginTop;\n    const viewportTop = top + marginTop;\n    const loadAheadDistance = 300;\n    if (this.stream.visibleStart > 0) {\n      const $item = this.$('.PostStream-item[data-index=' + this.stream.visibleStart + ']');\n      if ($item.length && $item.offset().top > viewportTop - loadAheadDistance) {\n        this.stream.loadPrevious();\n      }\n    }\n    if (this.stream.visibleEnd < this.stream.count()) {\n      const $item = this.$('.PostStream-item[data-index=' + (this.stream.visibleEnd - 1) + ']');\n      if ($item.length && $item.offset().top + $item.outerHeight(true) < viewportTop + viewportHeight + loadAheadDistance) {\n        this.stream.loadNext();\n      }\n    }\n  }\n  updateScrubber(top) {\n    if (top === void 0) {\n      top = window.pageYOffset;\n    }\n    const marginTop = this.getMarginTop();\n    const viewportHeight = $(window).height() - marginTop;\n    const viewportTop = top + marginTop;\n\n    // Before looping through all of the posts, we reset the scrollbar\n    // properties to a 'default' state. These values reflect what would be\n    // seen if the browser were scrolled right up to the top of the page,\n    // and the viewport had a height of 0.\n    const $items = this.$('.PostStream-item[data-index]');\n    let visible = 0;\n    let period = '';\n    let indexFromViewPort = null;\n\n    // Now loop through each of the items in the discussion. An 'item' is\n    // either a single post or a 'gap' of one or more posts that haven't\n    // been loaded yet.\n    $items.each(function () {\n      const $this = $(this);\n      const top = $this.offset().top;\n      const height = $this.outerHeight(true);\n\n      // If this item is above the top of the viewport, skip to the next\n      // one. If it's below the bottom of the viewport, break out of the\n      // loop.\n      if (top + height < viewportTop) {\n        return true;\n      }\n      if (top > viewportTop + viewportHeight) {\n        return false;\n      }\n\n      // Work out how many pixels of this item are visible inside the viewport.\n      // Then add the proportion of this item's total height to the index.\n      const visibleTop = Math.max(0, viewportTop - top);\n      const visibleBottom = Math.min(height, viewportTop + viewportHeight - top);\n      const visiblePost = visibleBottom - visibleTop;\n\n      // We take the index of the first item that passed the previous checks.\n      // It is the item that is first visible in the viewport.\n      if (indexFromViewPort === null) {\n        indexFromViewPort = parseFloat($this.data('index')) + visibleTop / height;\n      }\n      if (visiblePost > 0) {\n        visible += visiblePost / height;\n      }\n\n      // If this item has a time associated with it, then set the\n      // scrollbar's current period to a formatted version of this time.\n      const time = $this.data('time');\n      if (time) period = time;\n    });\n\n    // If indexFromViewPort is null, it means no posts are visible in the\n    // viewport. This can happen, when drafting a long reply post. In that case\n    // set the index to the last post.\n    this.stream.index = indexFromViewPort !== null ? indexFromViewPort + 1 : this.stream.count();\n    this.stream.visible = visible;\n    if (period) this.stream.description = dayjs(period).format('MMMM YYYY');\n  }\n\n  /**\n   * Work out which posts (by number) are currently visible in the viewport, and\n   * fire an event with the information.\n   */\n  calculatePosition(top) {\n    if (top === void 0) {\n      top = window.pageYOffset;\n    }\n    const marginTop = this.getMarginTop();\n    const $window = $(window);\n    const viewportHeight = $window.height() - marginTop;\n    const scrollTop = $window.scrollTop() + marginTop;\n    const viewportTop = top + marginTop;\n    let startNumber;\n    let endNumber;\n    this.$('.PostStream-item').each(function () {\n      const $item = $(this);\n      const top = $item.offset().top;\n      const height = $item.outerHeight(true);\n      const visibleTop = Math.max(0, viewportTop - top);\n      const threeQuartersVisible = visibleTop / height < 0.75;\n      const coversQuarterOfViewport = (height - visibleTop) / viewportHeight > 0.25;\n      if (startNumber === undefined && (threeQuartersVisible || coversQuarterOfViewport)) {\n        startNumber = $item.data('number');\n      }\n      if (top + height > scrollTop) {\n        if (top + height < scrollTop + viewportHeight) {\n          if ($item.data('number')) {\n            endNumber = $item.data('number');\n          }\n        } else return false;\n      }\n    });\n    if (startNumber) {\n      this.attrs.onPositionChange(startNumber || 1, endNumber, startNumber);\n    }\n  }\n\n  /**\n   * Get the distance from the top of the viewport to the point at which we\n   * would consider a post to be the first one visible.\n   *\n   * @return {number}\n   */\n  getMarginTop() {\n    const headerId = app.screen() === 'phone' ? '#app-navigation' : '#header';\n    return this.$() && $(headerId).outerHeight() + parseInt(this.$().css('margin-top'), 10);\n  }\n\n  /**\n   * Scroll down to a certain post by number and 'flash' it.\n   *\n   * @param {number} number\n   * @param {boolean} animate\n   * @return {JQueryDeferred}\n   */\n  scrollToNumber(number, animate) {\n    const $item = this.$(\".PostStream-item[data-number=\".concat(number, \"]\"));\n    return this.scrollToItem($item, animate).then(this.flashItem.bind(this, $item));\n  }\n\n  /**\n   * Scroll down to a certain post by index.\n   *\n   * @param {number} index\n   * @param {boolean} animate\n   * @param {boolean} reply Whether or not to scroll to the reply placeholder.\n   * @return {JQueryDeferred}\n   */\n  scrollToIndex(index, animate, reply) {\n    const $item = reply ? $('.PostStream-item:last-child') : this.$(\".PostStream-item[data-index=\".concat(index, \"]\"));\n    this.scrollToItem($item, animate, true, reply);\n    if (reply) {\n      this.flashItem($item);\n    }\n  }\n\n  /**\n   * Scroll down to the given post.\n   *\n   * @param {JQuery} $item\n   * @param {boolean} animate\n   * @param {boolean} force Whether or not to force scrolling to the item, even\n   *     if it is already in the viewport.\n   * @param {boolean} reply Whether or not to scroll to the reply placeholder.\n   * @return {JQueryDeferred}\n   */\n  scrollToItem($item, animate, force, reply) {\n    const $container = $('html, body').stop(true);\n    const index = $item.data('index');\n    if ($item.length) {\n      const itemTop = $item.offset().top - this.getMarginTop();\n      const itemBottom = $item.offset().top + $item.height();\n      const scrollTop = $(document).scrollTop();\n      const scrollBottom = scrollTop + $(window).height();\n\n      // If the item is already in the viewport, we may not need to scroll.\n      // If we're scrolling to the reply placeholder, we'll make sure its\n      // bottom will line up with the top of the composer.\n      if (force || itemTop < scrollTop || itemBottom > scrollBottom) {\n        const top = reply ? itemBottom - $(window).height() + app.composer.computedHeight() : $item.is(':first-child') ? 0 : itemTop;\n        if (!animate) {\n          $container.scrollTop(top);\n        } else if (top !== scrollTop) {\n          $container.animate({\n            scrollTop: top\n          }, 'fast');\n        }\n      }\n    }\n    const updateScrubberHeight = () => {\n      // We manually set the index because we want to display the index of the\n      // exact post we've scrolled to, not just that of the first post within viewport.\n      this.updateScrubber();\n      if (index !== undefined) this.stream.index = index + 1;\n    };\n\n    // If we don't update this before the scroll, the scrubber will start\n    // at the top, and animate down, which can be confusing\n    updateScrubberHeight();\n    this.stream.forceUpdateScrubber = true;\n    return Promise.all([$container.promise(), this.stream.loadPromise]).then(() => {\n      m.redraw.sync();\n\n      // Rendering post contents will probably throw off our position.\n      // To counter this, we'll scroll either:\n      //   - To the reply placeholder (aligned with composer top)\n      //   - To the top of the page if we're on the first post\n      //   - To the top of a post (if that post exists)\n      // If the post does not currently exist, it's probably\n      // outside of the range we loaded in, so we won't adjust anything,\n      // as it will soon be rendered by the \"load more\" system.\n      let itemOffset;\n      if (reply) {\n        const $placeholder = $('.PostStream-item:last-child');\n        $(window).scrollTop($placeholder.offset().top + $placeholder.height() - $(window).height() + app.composer.computedHeight());\n      } else if (index === 0) {\n        $(window).scrollTop(0);\n      } else if (itemOffset = $(\".PostStream-item[data-index=\".concat(index, \"]\")).offset()) {\n        $(window).scrollTop(itemOffset.top - this.getMarginTop());\n      }\n\n      // We want to adjust this again after posts have been loaded in\n      // and position adjusted so that the scrubber's height is accurate.\n      updateScrubberHeight();\n      this.calculatePosition();\n      this.stream.paused = false;\n      // Check if we need to load more posts after scrolling.\n      this.loadPostsIfNeeded();\n    });\n  }\n\n  /**\n   * 'Flash' the given post, drawing the user's attention to it.\n   *\n   * @param {JQuery} $item\n   */\n  flashItem($item) {\n    // This might execute before the fadeIn class has been removed in PostStreamItem's\n    // oncreate, so we remove it just to be safe and avoid a double animation.\n    $item.removeClass('fadeIn');\n    $item.addClass('flash').on('animationend webkitAnimationEnd', e => {\n      $item.removeClass('flash');\n    });\n  }\n}\nflarum.reg.add('core', 'forum/components/PostStream', PostStream);"],"names":["LoadingPost","Component","view","m","className","Avatar","user","flarum","reg","add","ReplyPlaceholder","app","this","attrs","discussion","username","listItems","toArray","ComposerPostPreview","composer","surround","anchorPreview","bind","onclick","DiscussionControls","catch","preview","anchorToBottom","$","window","scrollTop","height","document","PostStream","oninit","vnode","super","stream","scrollListener","ScrollListener","onscroll","lastTime","viewingEnd","posts","postIds","postFadeIn","dom","addClass","setTimeout","removeClass","items","map","post","i","content","visibleStart","time","createdAt","PostComponent","contentType","key","id","oncreate","toISOString","number","dt","period","dayjs","fromNow","Object","assign","visibleEnd","push","Button","loadNext","endItems","canReply","count","role","pagesLoading","ItemList","onupdate","triggerScroll","start","onremove","stop","clearTimeout","calculatePositionTimeout","needsScroll","target","targetPost","scrollToNumber","animateScroll","scrollToIndex","index","reply","top","pageYOffset","paused","updateScrubber","loadPostsIfNeeded","calculatePosition","marginTop","getMarginTop","viewportHeight","viewportTop","$item","length","offset","loadPrevious","outerHeight","$items","visible","indexFromViewPort","each","$this","visibleTop","Math","max","visiblePost","min","parseFloat","data","description","format","$window","startNumber","endNumber","undefined","onPositionChange","headerId","parseInt","css","animate","concat","scrollToItem","then","flashItem","force","$container","itemTop","itemBottom","scrollBottom","is","updateScrubberHeight","forceUpdateScrubber","Promise","all","promise","loadPromise","itemOffset","redraw","sync","$placeholder","on","e"],"sourceRoot":""}