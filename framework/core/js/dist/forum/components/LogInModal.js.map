{"version":3,"file":"forum/components/LogInModal.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwE;AACtC;AACwB;AACN;AACV;AACe;AACN;AACJ;AAChC,yBAAyB,oEAAS;AACjD;AACA;AACA;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,0BAA0B,gEAAM;AAChC,oBAAoB,gEAAM;AAC1B,oBAAoB,gEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,WAAW,mEAAoB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,cAAc,qDAAY;AAC1B;AACA,KAAK;AACL;AACA;AACA,sBAAsB,8DAAQ;AAC9B,gCAAgC,qEAAW,CAAC,mEAAoB;AAChE,0BAA0B,qEAAW,CAAC,mEAAoB;AAC1D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK,GAAG,mEAAoB;AAC5B;AACA;AACA,KAAK,IAAI,iEAAM;AACf;AACA;AACA;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK,EAAE,mEAAoB,8CAA8C,kEAAmB;AAC5F;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI,6DAAc,OAAO,uPAAwH;AACjJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6DAAc,OAAO,uNAAwG;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gEAAiB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mEAAoB;AAChD;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;;;;;;;;;;;;;;;;AC7J+C;AACI;;AAEnD;AACA;AACA;AACe,2BAA2B,yDAAS;AACnD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe,8DAAQ;AACvB;AACA;AACA","sources":["webpack://@flarum/core/./src/forum/components/LogInModal.tsx","webpack://@flarum/core/./src/forum/components/LogInButtons.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport LogInButtons from './LogInButtons';\nimport extractText from '../../common/utils/extractText';\nimport ItemList from '../../common/utils/ItemList';\nimport Stream from '../../common/utils/Stream';\nexport default class LogInModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    /**\n     * The value of the identification input.\n     */\n    _defineProperty(this, \"identification\", void 0);\n    /**\n     * The value of the password input.\n     */\n    _defineProperty(this, \"password\", void 0);\n    /**\n     * The value of the remember me input.\n     */\n    _defineProperty(this, \"remember\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.identification = Stream(this.attrs.identification || '');\n    this.password = Stream(this.attrs.password || '');\n    this.remember = Stream(!!this.attrs.remember);\n  }\n  className() {\n    return 'LogInModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.log_in.title');\n  }\n  content() {\n    return [m(\"div\", {\n      className: \"Modal-body\"\n    }, this.body()), m(\"div\", {\n      className: \"Modal-footer\"\n    }, this.footer())];\n  }\n  body() {\n    return [m(LogInButtons, null), m(\"div\", {\n      className: \"Form Form--centered\"\n    }, this.fields().toArray())];\n  }\n  fields() {\n    const items = new ItemList();\n    const identificationLabel = extractText(app.translator.trans('core.forum.log_in.username_or_email_placeholder'));\n    const passwordLabel = extractText(app.translator.trans('core.forum.log_in.password_placeholder'));\n    items.add('identification', m(\"div\", {\n      className: \"Form-group\"\n    }, m(\"input\", {\n      className: \"FormControl\",\n      name: \"identification\",\n      type: \"text\",\n      placeholder: identificationLabel,\n      \"aria-label\": identificationLabel,\n      bidi: this.identification,\n      disabled: this.loading\n    })), 30);\n    items.add('password', m(\"div\", {\n      className: \"Form-group\"\n    }, m(\"input\", {\n      className: \"FormControl\",\n      name: \"password\",\n      type: \"password\",\n      autocomplete: \"current-password\",\n      placeholder: passwordLabel,\n      \"aria-label\": passwordLabel,\n      bidi: this.password,\n      disabled: this.loading\n    })), 20);\n    items.add('remember', m(\"div\", {\n      className: \"Form-group\"\n    }, m(\"div\", null, m(\"label\", {\n      className: \"checkbox\"\n    }, m(\"input\", {\n      type: \"checkbox\",\n      bidi: this.remember,\n      disabled: this.loading\n    }), app.translator.trans('core.forum.log_in.remember_me_label')))), 10);\n    items.add('submit', m(\"div\", {\n      className: \"Form-group\"\n    }, m(Button, {\n      className: \"Button Button--primary Button--block\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.forum.log_in.submit_button'))), -10);\n    return items;\n  }\n  footer() {\n    return m('[', null, m(\"p\", {\n      className: \"LogInModal-forgotPassword\"\n    }, m(\"a\", {\n      onclick: this.forgotPassword.bind(this)\n    }, app.translator.trans('core.forum.log_in.forgot_password_link'))), app.forum.attribute('allowSignUp') && m(\"p\", {\n      className: \"LogInModal-signUp\"\n    }, app.translator.trans('core.forum.log_in.sign_up_text', {\n      a: m(\"a\", {\n        onclick: this.signUp.bind(this)\n      })\n    })));\n  }\n\n  /**\n   * Open the forgot password modal, prefilling it with an email if the user has\n   * entered one.\n   */\n  forgotPassword() {\n    const email = this.identification();\n    const attrs = email.includes('@') ? {\n      email\n    } : undefined;\n    app.modal.show(() => import(/* webpackChunkName: 'forum/components/ForgotPasswordModal', webpackMode: 'lazy-once' */ './ForgotPasswordModal'), attrs);\n  }\n\n  /**\n   * Open the sign up modal, prefilling it with an email/username/password if\n   * the user has entered one.\n   */\n  signUp() {\n    const identification = this.identification();\n    const attrs = {\n      [identification.includes('@') ? 'email' : 'username']: identification\n    };\n    app.modal.show(() => import(/* webpackChunkName: 'forum/components/SignUpModal', webpackMode: 'lazy-once' */ './SignUpModal'), attrs);\n  }\n  onready() {\n    this.$('[name=' + (this.identification() ? 'password' : 'identification') + ']').trigger('select');\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    app.session.login(this.loginParams(), {\n      errorHandler: this.onerror.bind(this)\n    }).then(() => window.location.reload(), this.loaded.bind(this));\n  }\n  loginParams() {\n    const data = {\n      identification: this.identification(),\n      password: this.password(),\n      remember: this.remember()\n    };\n    return data;\n  }\n  onerror(error) {\n    if (error.status === 401 && error.alert) {\n      error.alert.content = app.translator.trans('core.forum.log_in.invalid_login_message');\n      this.password('');\n    }\n    super.onerror(error);\n  }\n}\nflarum.reg.add('core', 'forum/components/LogInModal', LogInModal);flarum.reg.addChunkModule('forum/components/ForgotPasswordModal', './src/forum/components/ForgotPasswordModal.tsx', 'core', 'forum/components/ForgotPasswordModal');\nflarum.reg.addChunkModule('forum/components/SignUpModal', './src/forum/components/SignUpModal.tsx', 'core', 'forum/components/SignUpModal');","import Component from '../../common/Component';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `LogInButtons` component displays a collection of social login buttons.\n */\nexport default class LogInButtons extends Component {\n  view() {\n    return m(\"div\", {\n      className: \"LogInButtons\"\n    }, this.items().toArray());\n  }\n\n  /**\n   * Build a list of LogInButton components.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  items() {\n    return new ItemList();\n  }\n}\nflarum.reg.add('core', 'forum/components/LogInButtons', LogInButtons);"],"names":[],"sourceRoot":""}