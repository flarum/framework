{"version":3,"file":"forum/components/EditPostComposer.js","mappings":"0JAYe,MAAMA,UAA8BC,EAAA,EACjD,OAAAC,GACE,OAAOC,KAAKC,MAAMC,aAAUC,CAC9B,CACA,QAAAC,CAASC,GACPC,MAAMF,SAASC,GACfL,KAAKO,aAAeP,KAAKD,QAAQS,KAAKR,MACtCS,EAAEC,QAAQC,GAAG,eAAgBX,KAAKO,aACpC,CACA,QAAAK,CAASP,GACPC,MAAMM,SAASP,GACfI,EAAEC,QAAQG,IAAI,eAAgBb,KAAKO,aACrC,CACA,IAAAO,CAAKT,GACH,OAAOU,EAAE,IAAK,KAAMV,EAAMW,SAC5B,EAEFC,OAAOC,IAAIC,IAAI,OAAQ,0CAA2CtB,G,sDCfnD,MAAMuB,UAAqBtB,EAAA,EACxC,WAAAuB,GACEf,SAASgB,YACT,OAAgBtB,KAAM,WAAW,IACjC,OAAgBA,KAAM,gBAAY,IAClC,OAAgBA,KAAM,qBAAiB,EACzC,CACA,MAAAuB,CAAOlB,GACLC,MAAMiB,OAAOlB,GACbL,KAAKwB,SAAWxB,KAAKC,MAAMuB,SAKvBxB,KAAKC,MAAMwB,aACbzB,KAAKwB,SAASE,oBAAmB,IAAM1B,KAAK2B,cAAc3B,KAAKC,MAAMwB,aAEvEzB,KAAKwB,SAASI,OAAOC,QAAQ7B,KAAKC,MAAM6B,iBAAmB,GAC7D,CACA,IAAAhB,GACE,OAAOC,EAAElB,EAAuB,CAC9BK,KAAMF,KAAK2B,WAAWnB,KAAKR,OAC1Be,EAAE,MAAO,CACVgB,WAAW,EAAAC,EAAA,GAAU,eAAgBhC,KAAKC,MAAM8B,YAC/ChB,EAAEkB,EAAAC,EAAQ,CACXC,KAAMnC,KAAKC,MAAMkC,KACjBJ,UAAW,wBACThB,EAAE,MAAO,CACXgB,UAAW,wBACVhB,EAAE,KAAM,CACTgB,UAAW,wBACV,EAAAK,EAAA,GAAUpC,KAAKqC,cAAcC,YAAavB,EAAE,MAAO,CACpDgB,UAAW,uBACVhB,EAAEwB,EAAA,EAAY,CACfC,YAAaxC,KAAKC,MAAMuC,YACxBC,YAAazC,KAAKC,MAAMwC,YACxBC,SAAU1C,KAAK2C,SAAW3C,KAAKC,MAAMyC,SACrClB,SAAUxB,KAAKwB,SACfoB,QAAS5C,KAAK6C,eAAerC,KAAKR,MAClC8C,SAAU9C,KAAKwB,SAASI,OAAOC,QAC/BkB,SAAU/C,KAAK+C,SAASvC,KAAKR,MAC7BgD,MAAOhD,KAAKwB,SAASI,OAAOC,cACxBd,EAAEkC,EAAA,EAAkB,CACxBC,QAAS,QACTC,oBAAoB,EAAAnB,EAAA,GAAU,uBAAwBhC,KAAK2C,SAAW,UACtES,KAAM,WAEV,CAKA,UAAAzB,GACE,MAAME,EAAU7B,KAAKwB,SAASI,OAAOC,UACrC,OAAOwB,QAAQxB,IAAYA,IAAY7B,KAAKC,MAAM6B,eACpD,CAKA,WAAAO,GACE,OAAO,IAAIiB,EAAA,CACb,CASA,MAAAC,GACEvD,KAAK2C,SAAU,EACf5B,EAAEyC,QACJ,GAEF,OAAgBpC,EAAc,kBAAmB,MACjDH,OAAOC,IAAIC,IAAI,OAAQ,gCAAiCC,E,qGCtFxD,SAASqC,EAA6BC,GAChC,IAAIlC,SAASmC,iBACf,IAAInC,SAASoC,WACbF,EAAEG,kBAEN,CAYe,MAAMC,UAAyB,IAC5C,gBAAOC,CAAU9D,GACfK,MAAMyD,UAAU9D,GAChBA,EAAMuC,YAAcvC,EAAMuC,aAAe,IAAIwB,WAAWC,MAAM,0CAC9DhE,EAAMwB,YAAcxB,EAAMwB,aAAe,IAAIuC,WAAWC,MAAM,iDAC9DhE,EAAM6B,gBAAkB7B,EAAM6B,iBAAmB7B,EAAMiE,KAAKrC,UAC5D5B,EAAMkC,KAAOlC,EAAMkC,MAAQlC,EAAMiE,KAAK/B,OACtClC,EAAMiE,KAAKC,cAAgBlE,EAAM6B,eACnC,CACA,WAAAO,GACE,MAAM+B,EAAQ9D,MAAM+B,cACd6B,EAAOlE,KAAKC,MAAMiE,KAUxB,OATAE,EAAMjD,IAAI,QAASJ,EAAE,KAAM,KAAMA,EAAE,IAAM,CACvCsD,KAAM,sBACJ,IAAKtD,EAAE,IAAM,CACfuD,KAAM,IAAIC,MAAMC,WAAWN,EAAKM,aAAcN,EAAKO,UACnDC,QAASjB,GACR,IAAIO,WAAWC,MAAM,qCAAsC,CAC5DQ,OAAQP,EAAKO,SACbD,WAAYN,EAAKM,aAAaG,aAEzBP,CACT,CAKA,aAAAvB,CAAca,GACZD,EAA6BC,GAC7B3C,EAAEwD,MAAMK,IAAI,IAAIL,MAAML,KAAKlE,KAAKC,MAAMiE,MACxC,CAOA,IAAAW,GACE,MAAO,CACLhD,QAAS7B,KAAKwB,SAASI,OAAOC,UAElC,CACA,QAAAkB,GACE,MAAMyB,EAAaxE,KAAKC,MAAMiE,KAAKM,aACnCxE,KAAK2C,SAAU,EACf,MAAMkC,EAAO7E,KAAK6E,OAClB7E,KAAKC,MAAMiE,KAAKY,KAAKD,GAAME,MAAKb,IAG9B,GAAI,IAAIc,kBAAkBR,GACxB,IAAIS,QAAQC,IAAI,UAAUC,WAAWjB,EAAKO,cACrC,CAIL,MAAMW,EAAQ,IAAIC,OAAOC,KAAK,CAC5BC,KAAM,UACNC,SAAU,CAACzE,EAAE,IAAQ,CACnBgB,UAAW,sBACX2C,QAAS,KACP3D,EAAEwD,MAAMK,IAAI,IAAIL,MAAML,KAAKA,IAC3B,IAAImB,OAAOI,QAAQL,EAAM,GAE1B,IAAIpB,WAAWC,MAAM,2CACvB,IAAID,WAAWC,MAAM,2CAC1B,CACAjE,KAAKwB,SAASkE,MAAM,GACnB1F,KAAKuD,OAAO/C,KAAKR,MACtB,EAEFiB,OAAOC,IAAIC,IAAI,OAAQ,oCAAqC2C,E","sources":["webpack://@flarum/core/./src/common/components/ConfirmDocumentUnload.js","webpack://@flarum/core/./src/forum/components/ComposerBody.tsx","webpack://@flarum/core/./src/forum/components/EditPostComposer.js"],"sourcesContent":["import Component from '../Component';\n\n/**\n * The `ConfirmDocumentUnload` component can be used to register a global\n * event handler that prevents closing the browser window/tab based on the\n * return value of a given callback prop.\n *\n * ### Attrs\n *\n * - `when` - a callback returning true when the browser should prompt for\n *            confirmation before closing the window/tab\n */\nexport default class ConfirmDocumentUnload extends Component {\n  handler() {\n    return this.attrs.when() || undefined;\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.boundHandler = this.handler.bind(this);\n    $(window).on('beforeunload', this.boundHandler);\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    $(window).off('beforeunload', this.boundHandler);\n  }\n  view(vnode) {\n    return m('[', null, vnode.children);\n  }\n}\nflarum.reg.add('core', 'common/components/ConfirmDocumentUnload', ConfirmDocumentUnload);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Component from '../../common/Component';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport ConfirmDocumentUnload from '../../common/components/ConfirmDocumentUnload';\nimport TextEditor from '../../common/components/TextEditor';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Avatar from '../../common/components/Avatar';\n/**\n * The `ComposerBody` component handles the body, or the content, of the\n * composer. Subclasses should implement the `onsubmit` method and override\n * `headerTimes`.\n */\nexport default class ComposerBody extends Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"loading\", false);\n    _defineProperty(this, \"composer\", void 0);\n    _defineProperty(this, \"jumpToPreview\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer = this.attrs.composer;\n\n    // Let the composer state know to ask for confirmation under certain\n    // circumstances, if the body supports / requires it and has a corresponding\n    // confirmation question to ask.\n    if (this.attrs.confirmExit) {\n      this.composer.preventClosingWhen(() => this.hasChanges(), this.attrs.confirmExit);\n    }\n    this.composer.fields.content(this.attrs.originalContent || '');\n  }\n  view() {\n    return m(ConfirmDocumentUnload, {\n      when: this.hasChanges.bind(this)\n    }, m(\"div\", {\n      className: classList('ComposerBody', this.attrs.className)\n    }, m(Avatar, {\n      user: this.attrs.user,\n      className: \"ComposerBody-avatar\"\n    }), m(\"div\", {\n      className: \"ComposerBody-content\"\n    }, m(\"ul\", {\n      className: \"ComposerBody-header\"\n    }, listItems(this.headerItems().toArray())), m(\"div\", {\n      className: \"ComposerBody-editor\"\n    }, m(TextEditor, {\n      submitLabel: this.attrs.submitLabel,\n      placeholder: this.attrs.placeholder,\n      disabled: this.loading || this.attrs.disabled,\n      composer: this.composer,\n      preview: this.jumpToPreview?.bind(this),\n      onchange: this.composer.fields.content,\n      onsubmit: this.onsubmit.bind(this),\n      value: this.composer.fields.content()\n    }))), m(LoadingIndicator, {\n      display: \"unset\",\n      containerClassName: classList('ComposerBody-loading', this.loading && 'active'),\n      size: \"large\"\n    })));\n  }\n\n  /**\n   * Check if there is any unsaved data.\n   */\n  hasChanges() {\n    const content = this.composer.fields.content();\n    return Boolean(content) && content !== this.attrs.originalContent;\n  }\n\n  /**\n   * Build an item list for the composer's header.\n   */\n  headerItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle the submit event of the text editor.\n   */\n\n  /**\n   * Stop loading.\n   */\n  loaded() {\n    this.loading = false;\n    m.redraw();\n  }\n}\n_defineProperty(ComposerBody, \"focusOnSelector\", null);\nflarum.reg.add('core', 'forum/components/ComposerBody', ComposerBody);","import app from '../../forum/app';\nimport ComposerBody from './ComposerBody';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport Icon from '../../common/components/Icon';\nfunction minimizeComposerIfFullScreen(e) {\n  if (app.composer.isFullScreen()) {\n    app.composer.minimize();\n    e.stopPropagation();\n  }\n}\n\n/**\n * The `EditPostComposer` component displays the composer content for editing a\n * post. It sets the initial content to the content of the post that is being\n * edited, and adds a header control to indicate which post is being edited.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `post`\n */\nexport default class EditPostComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_edit.submit_button');\n    attrs.confirmExit = attrs.confirmExit || app.translator.trans('core.forum.composer_edit.discard_confirmation');\n    attrs.originalContent = attrs.originalContent || attrs.post.content();\n    attrs.user = attrs.user || attrs.post.user();\n    attrs.post.editedContent = attrs.originalContent;\n  }\n  headerItems() {\n    const items = super.headerItems();\n    const post = this.attrs.post;\n    items.add('title', m(\"h3\", null, m(Icon, {\n      name: 'fas fa-pencil-alt'\n    }), ' ', m(Link, {\n      href: app.route.discussion(post.discussion(), post.number()),\n      onclick: minimizeComposerIfFullScreen\n    }, app.translator.trans('core.forum.composer_edit.post_link', {\n      number: post.number(),\n      discussion: post.discussion().title()\n    }))));\n    return items;\n  }\n\n  /**\n   * Jump to the preview when triggered by the text editor.\n   */\n  jumpToPreview(e) {\n    minimizeComposerIfFullScreen(e);\n    m.route.set(app.route.post(this.attrs.post));\n  }\n\n  /**\n   * Get the data to submit to the server when the post is saved.\n   *\n   * @return {Record<string, unknown>}\n   */\n  data() {\n    return {\n      content: this.composer.fields.content()\n    };\n  }\n  onsubmit() {\n    const discussion = this.attrs.post.discussion();\n    this.loading = true;\n    const data = this.data();\n    this.attrs.post.save(data).then(post => {\n      // If we're currently viewing the discussion which this edit was made\n      // in, then we can scroll to the post.\n      if (app.viewingDiscussion(discussion)) {\n        app.current.get('stream').goToNumber(post.number());\n      } else {\n        // Otherwise, we'll create an alert message to inform the user that\n        // their edit has been made, containing a button which will\n        // transition to their edited post when clicked.\n        const alert = app.alerts.show({\n          type: 'success',\n          controls: [m(Button, {\n            className: \"Button Button--link\",\n            onclick: () => {\n              m.route.set(app.route.post(post));\n              app.alerts.dismiss(alert);\n            }\n          }, app.translator.trans('core.forum.composer_edit.view_button'))]\n        }, app.translator.trans('core.forum.composer_edit.edited_message'));\n      }\n      this.composer.hide();\n    }, this.loaded.bind(this));\n  }\n}\nflarum.reg.add('core', 'forum/components/EditPostComposer', EditPostComposer);"],"names":["ConfirmDocumentUnload","Component","handler","this","attrs","when","undefined","oncreate","vnode","super","boundHandler","bind","$","window","on","onremove","off","view","m","children","flarum","reg","add","ComposerBody","constructor","arguments","oninit","composer","confirmExit","preventClosingWhen","hasChanges","fields","content","originalContent","className","classList","Avatar","A","user","listItems","headerItems","toArray","TextEditor","submitLabel","placeholder","disabled","loading","preview","jumpToPreview","onchange","onsubmit","value","LoadingIndicator","display","containerClassName","size","Boolean","ItemList","loaded","redraw","minimizeComposerIfFullScreen","e","isFullScreen","minimize","stopPropagation","EditPostComposer","initAttrs","translator","trans","post","editedContent","items","name","href","route","discussion","number","onclick","title","set","data","save","then","viewingDiscussion","current","get","goToNumber","alert","alerts","show","type","controls","dismiss","hide"],"sourceRoot":""}