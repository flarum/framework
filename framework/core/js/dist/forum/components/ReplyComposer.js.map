{"version":3,"file":"forum/components/ReplyComposer.js","mappings":"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","sources":["webpack://@flarum/core/./src/common/components/ConfirmDocumentUnload.js","webpack://@flarum/core/./src/forum/components/ComposerBody.js","webpack://@flarum/core/./src/forum/components/ReplyComposer.js"],"sourcesContent":["import Component from '../Component';\n\n/**\n * The `ConfirmDocumentUnload` component can be used to register a global\n * event handler that prevents closing the browser window/tab based on the\n * return value of a given callback prop.\n *\n * ### Attrs\n *\n * - `when` - a callback returning true when the browser should prompt for\n *            confirmation before closing the window/tab\n */\nexport default class ConfirmDocumentUnload extends Component {\n  handler() {\n    return this.attrs.when() || undefined;\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.boundHandler = this.handler.bind(this);\n    $(window).on('beforeunload', this.boundHandler);\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    $(window).off('beforeunload', this.boundHandler);\n  }\n  view(vnode) {\n    return m('[', null, vnode.children);\n  }\n}\nflarum.reg.add('core', 'common/components/ConfirmDocumentUnload', ConfirmDocumentUnload);","import Component from '../../common/Component';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport ConfirmDocumentUnload from '../../common/components/ConfirmDocumentUnload';\nimport TextEditor from '../../common/components/TextEditor';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Avatar from '../../common/components/Avatar';\n\n/**\n * The `ComposerBody` component handles the body, or the content, of the\n * composer. Subclasses should implement the `onsubmit` method and override\n * `headerTimes`.\n *\n * ### Attrs\n *\n * - `composer`\n * - `originalContent`\n * - `submitLabel`\n * - `placeholder`\n * - `user`\n * - `confirmExit`\n * - `disabled`\n *\n * @abstract\n */\nexport default class ComposerBody extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer = this.attrs.composer;\n\n    /**\n     * Whether or not the component is loading.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    // Let the composer state know to ask for confirmation under certain\n    // circumstances, if the body supports / requires it and has a corresponding\n    // confirmation question to ask.\n    if (this.attrs.confirmExit) {\n      this.composer.preventClosingWhen(() => this.hasChanges(), this.attrs.confirmExit);\n    }\n    this.composer.fields.content(this.attrs.originalContent || '');\n  }\n  view() {\n    var _this$jumpToPreview;\n    return m(ConfirmDocumentUnload, {\n      when: this.hasChanges.bind(this)\n    }, m(\"div\", {\n      className: classList('ComposerBody', this.attrs.className)\n    }, m(Avatar, {\n      user: this.attrs.user,\n      className: \"ComposerBody-avatar\"\n    }), m(\"div\", {\n      className: \"ComposerBody-content\"\n    }, m(\"ul\", {\n      className: \"ComposerBody-header\"\n    }, listItems(this.headerItems().toArray())), m(\"div\", {\n      className: \"ComposerBody-editor\"\n    }, m(TextEditor, {\n      submitLabel: this.attrs.submitLabel,\n      placeholder: this.attrs.placeholder,\n      disabled: this.loading || this.attrs.disabled,\n      composer: this.composer,\n      preview: (_this$jumpToPreview = this.jumpToPreview) == null ? void 0 : _this$jumpToPreview.bind(this),\n      onchange: this.composer.fields.content,\n      onsubmit: this.onsubmit.bind(this),\n      value: this.composer.fields.content()\n    }))), m(LoadingIndicator, {\n      display: \"unset\",\n      containerClassName: classList('ComposerBody-loading', this.loading && 'active'),\n      size: \"large\"\n    })));\n  }\n\n  /**\n   * Check if there is any unsaved data.\n   *\n   * @return {boolean}\n   */\n  hasChanges() {\n    const content = this.composer.fields.content();\n    return content && content !== this.attrs.originalContent;\n  }\n\n  /**\n   * Build an item list for the composer's header.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  headerItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle the submit event of the text editor.\n   *\n   * @abstract\n   */\n  onsubmit() {}\n\n  /**\n   * Stop loading.\n   */\n  loaded() {\n    this.loading = false;\n    m.redraw();\n  }\n}\nflarum.reg.add('core', 'forum/components/ComposerBody', ComposerBody);","import app from '../../forum/app';\nimport ComposerBody from './ComposerBody';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport extractText from '../../common/utils/extractText';\nimport Icon from '../../common/components/Icon';\nfunction minimizeComposerIfFullScreen(e) {\n  if (app.composer.isFullScreen()) {\n    app.composer.minimize();\n    e.stopPropagation();\n  }\n}\n\n/**\n * The `ReplyComposer` component displays the composer content for replying to a\n * discussion.\n *\n * ### Attrs\n *\n * - All of the attrs of ComposerBody\n * - `discussion`\n */\nexport default class ReplyComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.placeholder = attrs.placeholder || extractText(app.translator.trans('core.forum.composer_reply.body_placeholder'));\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_reply.submit_button');\n    attrs.confirmExit = attrs.confirmExit || extractText(app.translator.trans('core.forum.composer_reply.discard_confirmation'));\n  }\n  headerItems() {\n    const items = super.headerItems();\n    const discussion = this.attrs.discussion;\n    items.add('title', m(\"h3\", null, m(Icon, {\n      name: 'fas fa-reply'\n    }), ' ', m(Link, {\n      href: app.route.discussion(discussion),\n      onclick: minimizeComposerIfFullScreen\n    }, discussion.title())));\n    return items;\n  }\n\n  /**\n   * Jump to the preview when triggered by the text editor.\n   */\n  jumpToPreview(e) {\n    minimizeComposerIfFullScreen(e);\n    m.route.set(app.route.discussion(this.attrs.discussion, 'reply'));\n  }\n\n  /**\n   * Get the data to submit to the server when the reply is saved.\n   *\n   * @return {Record<string, unknown>}\n   */\n  data() {\n    return {\n      content: this.composer.fields.content(),\n      relationships: {\n        discussion: this.attrs.discussion\n      }\n    };\n  }\n  onsubmit() {\n    const discussion = this.attrs.discussion;\n    this.loading = true;\n    m.redraw();\n    const data = this.data();\n    app.store.createRecord('posts').save(data).then(post => {\n      // If we're currently viewing the discussion which this reply was made\n      // in, then we can update the post stream and scroll to the post.\n      if (app.viewingDiscussion(discussion)) {\n        const stream = app.current.get('stream');\n        stream.update().then(() => stream.goToNumber(post.number()));\n      } else {\n        // Otherwise, we'll create an alert message to inform the user that\n        // their reply has been posted, containing a button which will\n        // transition to their new post when clicked.\n        let alert;\n        const viewButton = m(Button, {\n          className: \"Button Button--link\",\n          onclick: () => {\n            m.route.set(app.route.post(post));\n            app.alerts.dismiss(alert);\n          }\n        }, app.translator.trans('core.forum.composer_reply.view_button'));\n        alert = app.alerts.show({\n          type: 'success',\n          controls: [viewButton]\n        }, app.translator.trans('core.forum.composer_reply.posted_message'));\n      }\n      this.composer.hide();\n    }, this.loaded.bind(this));\n  }\n}\nflarum.reg.add('core', 'forum/components/ReplyComposer', ReplyComposer);"],"names":["ConfirmDocumentUnload","Component","handler","this","attrs","when","undefined","oncreate","vnode","super","boundHandler","bind","$","window","on","onremove","off","view","m","children","flarum","reg","add","ComposerBody","oninit","composer","loading","confirmExit","preventClosingWhen","hasChanges","fields","content","originalContent","_this$jumpToPreview","className","classList","Avatar","user","listItems","headerItems","toArray","TextEditor","submitLabel","placeholder","disabled","preview","jumpToPreview","onchange","onsubmit","value","LoadingIndicator","display","containerClassName","size","ItemList","loaded","redraw","minimizeComposerIfFullScreen","e","stopPropagation","ReplyComposer","static","initAttrs","items","discussion","name","href","onclick","title","route","set","data","relationships","save","then","post","stream","update","goToNumber","number","alert","viewButton","type","controls","hide"],"sourceRoot":""}