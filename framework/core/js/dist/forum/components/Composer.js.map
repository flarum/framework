{"version":3,"file":"forum/components/Composer.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAkC;AACa;AACI;AACL;AACS;AACF;AACD;;AAEpD;AACA;AACA;AACA;AACA;AACe,uBAAuB,yDAAS;AAC/C;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6EAA6B;AACnE,yCAAyC,gFAAgC;AACzE,0CAA0C,iFAAiC;AAC3E;AACA;AACA;;AAEA;AACA,oDAAoD,gFAAgC;AACpF;AACA;AACA,+BAA+B,mEAAS;AACxC,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK,EAAE,qEAAS;AAChB;AACA;AACA,KAAK,kDAAkD;AACvD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6EAA6B,4BAA4B,gFAAgC,IAAI,yDAAU;AACnJ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iFAAiC,4BAA4B,6EAA6B;AACxH;AACA;AACA;AACA;AACA,WAAW,6EAA6B;AACxC;AACA,WAAW,gFAAgC;AAC3C;AACA,WAAW,iFAAiC;AAC5C;AACA,WAAW,6EAA6B;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6EAA6B;AAC3D;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAU;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,sBAAsB,8DAAQ;AAC9B,gCAAgC,iFAAiC;AACjE,oCAAoC,uDAAc;AAClD;AACA,eAAe,mEAAoB;AACnC;AACA,OAAO;AACP,MAAM;AACN,kCAAkC,gFAAgC;AAClE,gCAAgC,uDAAc;AAC9C,gBAAgB,mEAAS;AACzB,wBAAwB,yDAAU;AAClC,wBAAwB,yDAAU;AAClC,WAAW;AACX,iBAAiB,mEAAoB;AACrC;AACA;AACA,SAAS;AACT,kCAAkC,uDAAc;AAChD;AACA,iBAAiB,mEAAoB;AACrC;AACA,SAAS;AACT;AACA,2BAA2B,uDAAc;AACzC;AACA,eAAe,mEAAoB;AACnC;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7WoD;;AAEpD;AACA;AACA;AACA;AACe,6BAA6B,iEAAM;AAClD;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@flarum/core/./src/forum/components/Composer.js","webpack://@flarum/core/./src/forum/components/ComposerButton.js"],"sourcesContent":["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport ItemList from '../../common/utils/ItemList';\nimport ComposerButton from './ComposerButton';\nimport listItems from '../../common/helpers/listItems';\nimport classList from '../../common/utils/classList';\nimport ComposerState from '../states/ComposerState';\n\n/**\n * The `Composer` component displays the composer. It can be loaded with a\n * content component with `load` and then its position/state can be altered with\n * `show`, `hide`, `close`, `minimize`, `fullScreen`, and `exitFullScreen`.\n */\nexport default class Composer extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * The composer's \"state\".\n     *\n     * @type {ComposerState}\n     */\n    this.state = this.attrs.state;\n\n    /**\n     * Whether or not the composer currently has focus.\n     *\n     * @type {Boolean}\n     */\n    this.active = false;\n\n    // Store the initial position so that we can trigger animations correctly.\n    this.prevPosition = this.state.position;\n  }\n  view() {\n    const body = this.state.body;\n    const classes = {\n      normal: this.state.position === ComposerState.Position.NORMAL,\n      minimized: this.state.position === ComposerState.Position.MINIMIZED,\n      fullScreen: this.state.position === ComposerState.Position.FULLSCREEN,\n      active: this.active,\n      visible: this.state.isVisible()\n    };\n\n    // Set up a handler so that clicks on the content will show the composer.\n    const showIfMinimized = this.state.position === ComposerState.Position.MINIMIZED ? this.state.show.bind(this.state) : undefined;\n    const ComposerBody = body.componentClass;\n    return m(\"div\", {\n      className: 'Composer ' + classList(classes)\n    }, m(\"div\", {\n      className: \"Composer-handle\",\n      oncreate: this.configHandle.bind(this)\n    }), m(\"ul\", {\n      className: \"Composer-controls\"\n    }, listItems(this.controlItems().toArray())), m(\"div\", {\n      className: \"Composer-content\",\n      onclick: showIfMinimized\n    }, ComposerBody && m(ComposerBody, Object.assign({}, body.attrs, {\n      composer: this.state,\n      disabled: classes.minimized\n    }))));\n  }\n  onupdate(vnode) {\n    super.onupdate(vnode);\n    if (this.state.position === this.prevPosition) {\n      // Set the height of the Composer element and its contents on each redraw,\n      // so that they do not lose it if their DOM elements are recreated.\n      this.updateHeight();\n    } else {\n      this.animatePositionChange();\n      this.prevPosition = this.state.position;\n    }\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.initializeHeight();\n    this.$().hide().css('bottom', -this.state.computedHeight());\n\n    // Whenever any of the inputs inside the composer are have focus, we want to\n    // add a class to the composer to draw attention to it.\n    this.$().on('focus blur', ':input,.TextEditor-editorContainer', e => {\n      this.active = e.type === 'focusin';\n      m.redraw();\n    });\n\n    // When the escape key is pressed on any inputs, close the composer.\n    this.$().on('keydown', ':input,.TextEditor-editorContainer', 'esc', () => this.state.close());\n    this.handlers = {};\n    $(window).on('resize', this.handlers.onresize = this.updateHeight.bind(this)).resize();\n    $(document).on('mousemove', this.handlers.onmousemove = this.onmousemove.bind(this)).on('mouseup', this.handlers.onmouseup = this.onmouseup.bind(this));\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    $(window).off('resize', this.handlers.onresize);\n    $(document).off('mousemove', this.handlers.onmousemove).off('mouseup', this.handlers.onmouseup);\n  }\n\n  /**\n   * Add the necessary event handlers to the composer's handle so that it can\n   * be used to resize the composer.\n   */\n  configHandle(vnode) {\n    const composer = this;\n    $(vnode.dom).css('cursor', 'row-resize').bind('dragstart mousedown', e => e.preventDefault()).mousedown(function (e) {\n      composer.mouseStart = e.clientY;\n      composer.heightStart = composer.$().height();\n      composer.handle = $(this);\n      $('body').css('cursor', 'row-resize');\n    });\n  }\n\n  /**\n   * Resize the composer according to mouse movement.\n   *\n   * @param {MouseEvent} e\n   */\n  onmousemove(e) {\n    if (!this.handle) return;\n\n    // Work out how much the mouse has been moved, and set the height\n    // relative to the old one based on that. Then update the content's\n    // height so that it fills the height of the composer, and update the\n    // body's padding.\n    const deltaPixels = this.mouseStart - e.clientY;\n    this.changeHeight(this.heightStart + deltaPixels);\n\n    // Update the body's padding-bottom so that no content on the page will ever\n    // get permanently hidden behind the composer. If the user is already\n    // scrolled to the bottom of the page, then we will keep them scrolled to\n    // the bottom after the padding has been updated.\n    const scrollTop = $(window).scrollTop();\n    const anchorToBottom = scrollTop > 0 && scrollTop + $(window).height() >= $(document).height();\n    this.updateBodyPadding(anchorToBottom);\n  }\n\n  /**\n   * Finish resizing the composer when the mouse is released.\n   */\n  onmouseup() {\n    if (!this.handle) return;\n    this.handle = null;\n    $('body').css('cursor', '');\n  }\n\n  /**\n   * Draw focus to the first focusable content element (the text editor).\n   */\n  focus() {\n    this.$('.Composer-content :input:enabled:visible, .TextEditor-editor').first().focus();\n  }\n\n  /**\n   * Update the DOM to reflect the composer's current height. This involves\n   * setting the height of the composer's root element, and adjusting the height\n   * of any flexible elements inside the composer's body.\n   */\n  updateHeight() {\n    const height = this.state.computedHeight();\n    const $flexible = this.$('.Composer-flexible');\n    this.$().height(height);\n    if ($flexible.length) {\n      const headerHeight = $flexible.offset().top - this.$().offset().top;\n      const paddingBottom = parseInt($flexible.css('padding-bottom'), 10);\n      const footerHeight = this.$('.Composer-footer').outerHeight(true);\n      $flexible.height(this.$().outerHeight() - headerHeight - paddingBottom - footerHeight);\n    }\n  }\n\n  /**\n   * Update the amount of padding-bottom on the body so that the page's\n   * content will still be visible above the composer when the page is\n   * scrolled right to the bottom.\n   */\n  updateBodyPadding() {\n    const visible = this.state.position !== ComposerState.Position.HIDDEN && this.state.position !== ComposerState.Position.MINIMIZED && app.screen() !== 'phone';\n    const paddingBottom = visible ? this.state.computedHeight() - parseInt($('#app').css('padding-bottom'), 10) : 0;\n    $('#content').css({\n      paddingBottom\n    });\n  }\n\n  /**\n   * Trigger the right animation depending on the desired new position.\n   */\n  animatePositionChange() {\n    // When exiting full-screen mode: focus content\n    if (this.prevPosition === ComposerState.Position.FULLSCREEN && this.state.position === ComposerState.Position.NORMAL) {\n      this.focus();\n      return;\n    }\n    switch (this.state.position) {\n      case ComposerState.Position.HIDDEN:\n        return this.hide();\n      case ComposerState.Position.MINIMIZED:\n        return this.minimize();\n      case ComposerState.Position.FULLSCREEN:\n        return this.focus();\n      case ComposerState.Position.NORMAL:\n        return this.show();\n    }\n  }\n\n  /**\n   * Animate the Composer into the new position by changing the height.\n   */\n  animateHeightChange() {\n    const $composer = this.$().stop(true);\n    const oldHeight = $composer.outerHeight();\n    const scrollTop = $(window).scrollTop();\n    $composer.show();\n    this.updateHeight();\n    const newHeight = $composer.outerHeight();\n    if (this.prevPosition === ComposerState.Position.HIDDEN) {\n      $composer.css({\n        bottom: -newHeight,\n        height: newHeight\n      });\n    } else {\n      $composer.css({\n        height: oldHeight\n      });\n    }\n    const animation = $composer.animate({\n      bottom: 0,\n      height: newHeight\n    }, 'fast').promise();\n    this.updateBodyPadding();\n    $(window).scrollTop(scrollTop);\n    return animation;\n  }\n\n  /**\n   * Show the Composer backdrop.\n   */\n  showBackdrop() {\n    this.$backdrop = $('<div/>').addClass('composer-backdrop').appendTo('body');\n  }\n\n  /**\n   * Hide the Composer backdrop.\n   */\n  hideBackdrop() {\n    if (this.$backdrop) this.$backdrop.remove();\n  }\n\n  /**\n   * Animate the composer sliding up from the bottom to take its normal height.\n   *\n   * @private\n   */\n  show() {\n    this.animateHeightChange().then(() => this.focus());\n    if (app.screen() === 'phone') {\n      // On safari fixed position doesn't properly work on mobile,\n      // So we use absolute and set the top value.\n      // https://github.com/flarum/core/issues/2652\n\n      // Due to another safari bug, `scrollTop` is unreliable when\n      // at the very bottom of the page AND opening the composer.\n      // So we fallback to a calculated version of scrollTop.\n      // https://github.com/flarum/core/issues/2683\n      const scrollElement = document.documentElement;\n      const topOfViewport = Math.min(scrollElement.scrollTop, scrollElement.scrollHeight - scrollElement.clientHeight);\n      this.$().css('top', $('.App').is('.mobile-safari') ? topOfViewport : 0);\n      this.showBackdrop();\n    }\n  }\n\n  /**\n   * Animate closing the composer.\n   *\n   * @private\n   */\n  hide() {\n    const $composer = this.$();\n\n    // Animate the composer sliding down off the bottom edge of the viewport.\n    // Only when the animation is completed, update other elements on the page.\n    $composer.stop(true).animate({\n      bottom: -$composer.height()\n    }, 'fast', () => {\n      $composer.hide();\n      this.hideBackdrop();\n      this.updateBodyPadding();\n    });\n  }\n\n  /**\n   * Shrink the composer until only its title is visible.\n   *\n   * @private\n   */\n  minimize() {\n    this.animateHeightChange();\n    this.$().css('top', 'auto');\n    this.hideBackdrop();\n  }\n\n  /**\n   * Build an item list for the composer's controls.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  controlItems() {\n    const items = new ItemList();\n    if (this.state.position === ComposerState.Position.FULLSCREEN) {\n      items.add('exitFullScreen', m(ComposerButton, {\n        icon: \"fas fa-compress\",\n        title: app.translator.trans('core.forum.composer.exit_full_screen_tooltip'),\n        onclick: this.state.exitFullScreen.bind(this.state)\n      }));\n    } else {\n      if (this.state.position !== ComposerState.Position.MINIMIZED) {\n        items.add('minimize', m(ComposerButton, {\n          icon: classList('fas minimize', {\n            'fa-minus': app.screen() !== 'phone',\n            'fa-times': app.screen() === 'phone'\n          }),\n          title: app.translator.trans('core.forum.composer.minimize_tooltip'),\n          onclick: this.state.minimize.bind(this.state),\n          itemClassName: \"App-backControl\"\n        }));\n        items.add('fullScreen', m(ComposerButton, {\n          icon: \"fas fa-expand\",\n          title: app.translator.trans('core.forum.composer.full_screen_tooltip'),\n          onclick: this.state.fullScreen.bind(this.state)\n        }));\n      }\n      items.add('close', m(ComposerButton, {\n        icon: \"fas fa-times\",\n        title: app.translator.trans('core.forum.composer.close_tooltip'),\n        onclick: this.state.close.bind(this.state)\n      }));\n    }\n    return items;\n  }\n\n  /**\n   * Initialize default Composer height.\n   */\n  initializeHeight() {\n    this.state.height = localStorage.getItem('composerHeight');\n    if (!this.state.height) {\n      this.state.height = this.defaultHeight();\n    }\n  }\n\n  /**\n   * Default height of the Composer in case none is saved.\n   * @returns {number}\n   */\n  defaultHeight() {\n    return this.$().height();\n  }\n\n  /**\n   * Save a new Composer height and update the DOM.\n   * @param {number} height\n   */\n  changeHeight(height) {\n    this.state.height = height;\n    this.updateHeight();\n    localStorage.setItem('composerHeight', this.state.height);\n  }\n}\nflarum.reg.add('core', 'forum/components/Composer', Composer);","import Button from '../../common/components/Button';\n\n/**\n * The `ComposerButton` component displays a button suitable for the composer\n * controls.\n */\nexport default class ComposerButton extends Button {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.className = attrs.className || 'Button Button--icon Button--link';\n  }\n}\nflarum.reg.add('core', 'forum/components/ComposerButton', ComposerButton);"],"names":[],"sourceRoot":""}