{"version":3,"file":"forum/components/SignUpModal.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwE;AACtC;AACwB;AACN;AACV;AACe;AACN;AACJ;AAChC,0BAA0B,oEAAS;AAClD;AACA;AACA;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,oBAAoB,gEAAM;AAC1B,iBAAiB,gEAAM;AACvB,oBAAoB,gEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,WAAW,mEAAoB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qDAAY;AAC/C;AACA,KAAK;AACL;AACA;AACA,sBAAsB,8DAAQ;AAC9B,0BAA0B,qEAAW,CAAC,mEAAoB;AAC1D,uBAAuB,qEAAW,CAAC,mEAAoB;AACvD,0BAA0B,qEAAW,CAAC,mEAAoB;AAC1D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK,IAAI,iEAAM;AACf;AACA;AACA;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6DAAc,OAAO,mNAAsG;AAC/H;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAW;AACf,WAAW,kEAAmB;AAC9B;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;;;;;;;;;;;;;;;;AC9JrB;AACI;;AAEnD;AACA;AACA;AACe,2BAA2B,yDAAS;AACnD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe,8DAAQ;AACvB;AACA;AACA","sources":["webpack://@flarum/core/./src/forum/components/SignUpModal.tsx","webpack://@flarum/core/./src/forum/components/LogInButtons.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport LogInButtons from './LogInButtons';\nimport extractText from '../../common/utils/extractText';\nimport ItemList from '../../common/utils/ItemList';\nimport Stream from '../../common/utils/Stream';\nexport default class SignUpModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    /**\n     * The value of the username input.\n     */\n    _defineProperty(this, \"username\", void 0);\n    /**\n     * The value of the email input.\n     */\n    _defineProperty(this, \"email\", void 0);\n    /**\n     * The value of the password input.\n     */\n    _defineProperty(this, \"password\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.username = Stream(this.attrs.username || '');\n    this.email = Stream(this.attrs.email || '');\n    this.password = Stream(this.attrs.password || '');\n  }\n  className() {\n    return 'Modal--small SignUpModal';\n  }\n  title() {\n    return app.translator.trans('core.forum.sign_up.title');\n  }\n  content() {\n    return [m(\"div\", {\n      className: \"Modal-body\"\n    }, this.body()), m(\"div\", {\n      className: \"Modal-footer\"\n    }, this.footer())];\n  }\n  isProvided(field) {\n    var _this$attrs$provided$, _this$attrs$provided;\n    return (_this$attrs$provided$ = (_this$attrs$provided = this.attrs.provided) == null ? void 0 : _this$attrs$provided.includes(field)) != null ? _this$attrs$provided$ : false;\n  }\n  body() {\n    return [!this.attrs.token && m(LogInButtons, null), m(\"div\", {\n      className: \"Form Form--centered\"\n    }, this.fields().toArray())];\n  }\n  fields() {\n    const items = new ItemList();\n    const usernameLabel = extractText(app.translator.trans('core.forum.sign_up.username_placeholder'));\n    const emailLabel = extractText(app.translator.trans('core.forum.sign_up.email_placeholder'));\n    const passwordLabel = extractText(app.translator.trans('core.forum.sign_up.password_placeholder'));\n    items.add('username', m(\"div\", {\n      className: \"Form-group\"\n    }, m(\"input\", {\n      className: \"FormControl\",\n      name: \"username\",\n      type: \"text\",\n      placeholder: usernameLabel,\n      \"aria-label\": usernameLabel,\n      bidi: this.username,\n      disabled: this.loading || this.isProvided('username')\n    })), 30);\n    items.add('email', m(\"div\", {\n      className: \"Form-group\"\n    }, m(\"input\", {\n      className: \"FormControl\",\n      name: \"email\",\n      type: \"email\",\n      placeholder: emailLabel,\n      \"aria-label\": emailLabel,\n      bidi: this.email,\n      disabled: this.loading || this.isProvided('email')\n    })), 20);\n    if (!this.attrs.token) {\n      items.add('password', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        className: \"FormControl\",\n        name: \"password\",\n        type: \"password\",\n        autocomplete: \"new-password\",\n        placeholder: passwordLabel,\n        \"aria-label\": passwordLabel,\n        bidi: this.password,\n        disabled: this.loading\n      })), 10);\n    }\n    items.add('submit', m(\"div\", {\n      className: \"Form-group\"\n    }, m(Button, {\n      className: \"Button Button--primary Button--block\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.forum.sign_up.submit_button'))), -10);\n    return items;\n  }\n  footer() {\n    return [m(\"p\", {\n      className: \"SignUpModal-logIn\"\n    }, app.translator.trans('core.forum.sign_up.log_in_text', {\n      a: m(\"a\", {\n        onclick: this.logIn.bind(this)\n      })\n    }))];\n  }\n\n  /**\n   * Open the log in modal, prefilling it with an email/username/password if\n   * the user has entered one.\n   */\n  logIn() {\n    const attrs = {\n      identification: this.email() || this.username()\n    };\n    app.modal.show(() => import(/* webpackChunkName: 'forum/components/LogInModal', webpackMode: 'lazy-once' */ './LogInModal'), attrs);\n  }\n  onready() {\n    if (this.attrs.username && !this.attrs.email) {\n      this.$('[name=email]').select();\n    } else {\n      this.$('[name=username]').select();\n    }\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    const body = this.submitData();\n    app.request({\n      url: app.forum.attribute('baseUrl') + '/register',\n      method: 'POST',\n      body,\n      errorHandler: this.onerror.bind(this)\n    }).then(() => window.location.reload(), this.loaded.bind(this));\n  }\n\n  /**\n   * Get the data that should be submitted in the sign-up request.\n   */\n  submitData() {\n    const authData = this.attrs.token ? {\n      token: this.attrs.token\n    } : {\n      password: this.password()\n    };\n    const data = {\n      username: this.username(),\n      email: this.email(),\n      ...authData\n    };\n    return data;\n  }\n}\nflarum.reg.add('core', 'forum/components/SignUpModal', SignUpModal);flarum.reg.addChunkModule('forum/components/LogInModal', './src/forum/components/LogInModal.tsx', 'core', 'forum/components/LogInModal');","import Component from '../../common/Component';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `LogInButtons` component displays a collection of social login buttons.\n */\nexport default class LogInButtons extends Component {\n  view() {\n    return m(\"div\", {\n      className: \"LogInButtons\"\n    }, this.items().toArray());\n  }\n\n  /**\n   * Build a list of LogInButton components.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  items() {\n    return new ItemList();\n  }\n}\nflarum.reg.add('core', 'forum/components/LogInButtons', LogInButtons);"],"names":[],"sourceRoot":""}