{"version":3,"file":"forum/components/SettingsPage.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAwE;AACtC;AACwB;AACN;AACL;AACI;AACH;;AAEhD;AACA;AACA;AACA;AACe,+BAA+B,oEAAS;AACvD;AACA;AACA;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,iBAAiB,gEAAM,CAAC,qEAAsB;AAC9C,oBAAoB,gEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,WAAW,mEAAoB;AAC/B;AACA;AACA;AACA;AACA,KAAK,IAAI,+DAAI;AACb;AACA,KAAK;AACL;AACA;AACA,sBAAsB,8DAAQ;AAC9B;AACA;AACA;AACA,OAAO,EAAE,mEAAoB;AAC7B;AACA,OAAO;AACP;AACA;AACA,OAAO,IAAI,iEAAM;AACjB;AACA;AACA,OAAO,EAAE,mEAAoB;AAC7B,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,qBAAqB,qEAAsB;AAC3C;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,qBAAqB,mEAAoB;AACzC;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO,IAAI,iEAAM;AACjB;AACA;AACA;AACA,OAAO,EAAE,mEAAoB;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,qEAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA,IAAI,oEAAqB;AACzB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK,gBAAgB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mEAAoB;AAChD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5HkC;AACwB;AACN;AACD;AACH;;AAEhD;AACA;AACA;AACA;AACe,kCAAkC,oEAAS;AAC1D;AACA;AACA;AACA;AACA,WAAW,mEAAoB;AAC/B;AACA;AACA;AACA;AACA,KAAK,IAAI,+DAAI;AACb;AACA,KAAK;AACL;AACA;AACA,uBAAuB,8DAAQ;AAC/B;AACA;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA,KAAK,IAAI,iEAAM;AACf;AACA;AACA;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAW;AACf;AACA,WAAW,kEAAmB;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,qEAAsB;AACnC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDwE;AACtC;AACA;AACiB;AACC;AACA;AACI;AACN;AACM;AACN;AACK;AACE;AACJ;;AAErD;AACA;AACA;AACA;AACe,2BAA2B,iDAAQ;AAClD;AACA;AACA,IAAI,qFAAe;AACnB;AACA;AACA;AACA,cAAc,+DAAgB;AAC9B,IAAI,2DAAY,CAAC,sEAAW,CAAC,mEAAoB;AACjD;AACA;AACA;AACA;AACA,KAAK,gBAAgB,sEAAS;AAC9B;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,8DAAQ;AAC9B;AACA;AACA,2BAA2B,mEAAQ;AACnC,mBAAmB,oEAAS;AAC5B;AACA,SAAS;AACT,eAAe,mEAAoB;AACnC,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,8DAAQ;AAC9B,kCAAkC,iEAAM;AACxC;AACA,qBAAqB,6DAAc,CAAC,4DAAmB;AACvD,KAAK,EAAE,mEAAoB;AAC3B,+BAA+B,iEAAM;AACrC;AACA,qBAAqB,6DAAc,CAAC,yDAAgB;AACpD,KAAK,EAAE,mEAAoB;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,8DAAQ;AAC9B,oCAAoC,yDAAgB;AACpD;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAQ;AAC9B,kCAAkC,iEAAM;AACxC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,KAAK,EAAE,mEAAoB;AAC3B;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpGkC;AACa;AACS;AACL;AACH;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,+BAA+B,yDAAS;AACvD;AACA;;AAEA;AACA;AACA;AACA,cAAc,GAAG,+DAA+D;AAChF;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,cAAc,GAAG,+DAA+D;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK,IAAI,+DAAI;AACb;AACA,KAAK;AACL;AACA;AACA,KAAK,IAAI,+DAAI;AACb;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO,IAAI,mEAAQ;AACnB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO,EAAE,mEAAoB;AAC7B;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW,+DAA+D;AACxF;AACA;AACA,sBAAsB,8DAAQ;AAC9B;AACA;AACA;AACA,aAAa,mEAAoB;AACjC,KAAK;AACL;AACA;AACA;AACA,aAAa,mEAAoB;AACjC,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW,8DAA8D;AACvF;AACA;AACA,sBAAsB,8DAAQ;AAC9B;AACA;AACA;AACA,aAAa,mEAAoB;AACjC,KAAK;AACL;AACA;AACA;AACA","sources":["webpack://@flarum/core/./src/forum/components/ChangeEmailModal.tsx","webpack://@flarum/core/./src/forum/components/ChangePasswordModal.tsx","webpack://@flarum/core/./src/forum/components/SettingsPage.tsx","webpack://@flarum/core/./src/forum/components/NotificationGrid.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport Stream from '../../common/utils/Stream';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangeEmailModal` component shows a modal dialog which allows the user\n * to change their email address.\n */\nexport default class ChangeEmailModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    /**\n     * The value of the email input.\n     */\n    _defineProperty(this, \"email\", void 0);\n    /**\n     * The value of the password input.\n     */\n    _defineProperty(this, \"password\", void 0);\n    /**\n     * Whether or not the email has been changed successfully.\n     */\n    _defineProperty(this, \"success\", false);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.email = Stream(app.session.user.email() || '');\n    this.password = Stream('');\n  }\n  className() {\n    return 'ChangeEmailModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_email.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const items = new ItemList();\n    if (this.success) {\n      items.add('help', m(\"p\", {\n        className: \"helpText\"\n      }, app.translator.trans('core.forum.change_email.confirmation_message', {\n        email: m(\"strong\", null, this.email())\n      })));\n      items.add('dismiss', m(\"div\", {\n        className: \"Form-group\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        onclick: this.hide.bind(this)\n      }, app.translator.trans('core.forum.change_email.dismiss_button'))));\n    } else {\n      items.add('email', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        className: \"FormControl\",\n        placeholder: app.session.user.email(),\n        bidi: this.email,\n        disabled: this.loading\n      })));\n      items.add('password', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        className: \"FormControl\",\n        autocomplete: \"current-password\",\n        placeholder: app.translator.trans('core.forum.change_email.confirm_password_placeholder'),\n        bidi: this.password,\n        disabled: this.loading\n      })));\n      items.add('submit', m(\"div\", {\n        className: \"Form-group Form-controls\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        type: \"submit\",\n        loading: this.loading\n      }, app.translator.trans('core.forum.change_email.submit_button'))));\n    }\n    return items;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n\n    // If the user hasn't actually entered a different email address, we don't\n    // need to do anything. Woot!\n    if (this.email() === app.session.user.email()) {\n      this.hide();\n      return;\n    }\n    this.loading = true;\n    this.alertAttrs = null;\n    app.session.user.save(this.requestAttributes(), {\n      errorHandler: this.onerror.bind(this),\n      meta: {\n        password: this.password()\n      }\n    }).then(() => {\n      this.success = true;\n    }).catch(() => {}).then(this.loaded.bind(this));\n  }\n  requestAttributes() {\n    return {\n      email: this.email()\n    };\n  }\n  onerror(error) {\n    if (error.status === 401 && error.alert) {\n      error.alert.content = app.translator.trans('core.forum.change_email.incorrect_password_message');\n    }\n    super.onerror(error);\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangeEmailModal', ChangeEmailModal);","import app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangePasswordModal` component shows a modal dialog which allows the\n * user to send themself a password reset email.\n */\nexport default class ChangePasswordModal extends FormModal {\n  className() {\n    return 'ChangePasswordModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_password.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const fields = new ItemList();\n    fields.add('help', m(\"p\", {\n      className: \"helpText\"\n    }, app.translator.trans('core.forum.change_password.text')));\n    fields.add('submit', m(\"div\", {\n      className: \"Form-group Form-controls\"\n    }, m(Button, {\n      className: \"Button Button--primary Button--block\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.forum.change_password.send_button'))));\n    return fields;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    app.request({\n      method: 'POST',\n      url: app.forum.attribute('apiUrl') + '/forgot',\n      body: this.requestBody()\n    }).then(this.hide.bind(this), this.loaded.bind(this));\n  }\n  requestBody() {\n    return {\n      email: app.session.user.email()\n    };\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangePasswordModal', ChangePasswordModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport UserPage from './UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\nimport extractText from '../../common/utils/extractText';\nimport classList from '../../common/utils/classList';\n\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage extends UserPage {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"discloseOnlineLoading\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.show(app.session.user);\n    app.setTitle(extractText(app.translator.trans('core.forum.settings.title')));\n  }\n  content() {\n    return m(\"div\", {\n      className: \"SettingsPage\"\n    }, m(\"ul\", null, listItems(this.settingsItems().toArray())));\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   */\n  settingsItems() {\n    const items = new ItemList();\n    ['account', 'notifications', 'privacy'].forEach((section, index) => {\n      const sectionItems = \"\".concat(section, \"Items\");\n      items.add(section, m(FieldSet, {\n        className: classList(\"Settings-\".concat(section), {\n          'FieldSet--col': section === 'account'\n        }),\n        label: app.translator.trans(\"core.forum.settings.\".concat(section, \"_heading\"))\n      }, this[sectionItems]().toArray()), 100 - index * 10);\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   */\n  accountItems() {\n    const items = new ItemList();\n    items.add('changePassword', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangePasswordModal)\n    }, app.translator.trans('core.forum.settings.change_password_button')), 100);\n    items.add('changeEmail', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangeEmailModal)\n    }, app.translator.trans('core.forum.settings.change_email_button')), 90);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   */\n  notificationsItems() {\n    const items = new ItemList();\n    items.add('notificationGrid', m(NotificationGrid, {\n      user: this.user\n    }), 100);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   */\n  privacyItems() {\n    var _preferences;\n    const items = new ItemList();\n    items.add('discloseOnline', m(Switch, {\n      state: (_preferences = this.user.preferences()) == null ? void 0 : _preferences.discloseOnline,\n      onchange: value => {\n        this.discloseOnlineLoading = true;\n        this.user.savePreferences({\n          discloseOnline: value\n        }).then(() => {\n          this.discloseOnlineLoading = false;\n          m.redraw();\n        });\n      },\n      loading: this.discloseOnlineLoading\n    }, app.translator.trans('core.forum.settings.privacy_disclose_online_label')), 100);\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/SettingsPage', SettingsPage);","import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport ItemList from '../../common/utils/ItemList';\nimport Icon from '../../common/components/Icon';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Record<string, boolean>}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n  view() {\n    const preferences = this.attrs.user.preferences();\n    return m(\"table\", {\n      className: \"NotificationGrid\"\n    }, m(\"thead\", null, m(\"tr\", null, m(\"td\", null), this.methods.map(method => m(\"th\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleMethod.bind(this, method.name)\n    }, m(Icon, {\n      name: method.icon\n    }), \" \", method.label)))), m(\"tbody\", null, this.types.map(type => m(\"tr\", null, m(\"td\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleType.bind(this, type.name)\n    }, m(Icon, {\n      name: type.icon\n    }), \" \", type.label), this.methods.map(method => {\n      const key = this.preferenceKey(type.name, method.name);\n      return m(\"td\", {\n        className: \"NotificationGrid-checkbox\"\n      }, m(Checkbox, {\n        state: !!preferences[key],\n        loading: this.loading[key],\n        disabled: !(key in preferences),\n        onchange: this.toggle.bind(this, [key])\n      }, m(\"span\", {\n        className: \"sr-only\"\n      }, app.translator.trans('core.forum.settings.notification_checkbox_a11y_label_template', {\n        description: type.label,\n        method: method.label\n      }))));\n    })))));\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this).parents('table').find('td:nth-child(' + i + ')').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this).parent().find('td').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {string[]} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n    keys.forEach(key => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n    m.redraw();\n    user.save({\n      preferences\n    }).then(() => {\n      keys.forEach(key => this.loading[key] = false);\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {string} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map(type => this.preferenceKey(type.name, method)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {string} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map(method => this.preferenceKey(type, method.name)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {string} type\n   * @param {string} method\n   * @return {string}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children }>}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading')\n    });\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading')\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children}>}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label')\n    });\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/NotificationGrid', NotificationGrid);"],"names":[],"sourceRoot":""}