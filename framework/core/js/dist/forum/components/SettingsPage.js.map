{"version":3,"file":"forum/components/SettingsPage.js","mappings":"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","sources":["webpack://@flarum/core/./src/forum/components/NotificationGrid.js","webpack://@flarum/core/./src/forum/components/ChangePasswordModal.tsx","webpack://@flarum/core/./src/forum/components/ChangeEmailModal.tsx","webpack://@flarum/core/./src/forum/components/SettingsPage.tsx"],"sourcesContent":["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport icon from '../../common/helpers/icon';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Record<string, boolean>}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n  view() {\n    const preferences = this.attrs.user.preferences();\n    return m(\"table\", {\n      className: \"NotificationGrid\"\n    }, m(\"thead\", null, m(\"tr\", null, m(\"td\", null), this.methods.map(method => m(\"th\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleMethod.bind(this, method.name)\n    }, icon(method.icon), \" \", method.label)))), m(\"tbody\", null, this.types.map(type => m(\"tr\", null, m(\"td\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleType.bind(this, type.name)\n    }, icon(type.icon), \" \", type.label), this.methods.map(method => {\n      const key = this.preferenceKey(type.name, method.name);\n      return m(\"td\", {\n        className: \"NotificationGrid-checkbox\"\n      }, m(Checkbox, {\n        state: !!preferences[key],\n        loading: this.loading[key],\n        disabled: !(key in preferences),\n        onchange: this.toggle.bind(this, [key])\n      }, m(\"span\", {\n        className: \"sr-only\"\n      }, app.translator.trans('core.forum.settings.notification_checkbox_a11y_label_template', {\n        description: type.label,\n        method: method.label\n      }))));\n    })))));\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this).parents('table').find('td:nth-child(' + i + ')').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this).parent().find('td').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {string[]} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n    keys.forEach(key => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n    m.redraw();\n    user.save({\n      preferences\n    }).then(() => {\n      keys.forEach(key => this.loading[key] = false);\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {string} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map(type => this.preferenceKey(type.name, method)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {string} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map(method => this.preferenceKey(type, method.name)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {string} type\n   * @param {string} method\n   * @return {string}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children }>}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading')\n    });\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading')\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children}>}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label')\n    });\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/NotificationGrid', NotificationGrid);","import app from '../../forum/app';\nimport Modal from '../../common/components/Modal';\nimport Button from '../../common/components/Button';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `ChangePasswordModal` component shows a modal dialog which allows the\n * user to send themself a password reset email.\n */\nexport default class ChangePasswordModal extends Modal {\n  className() {\n    return 'ChangePasswordModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_password.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(\"div\", {\n      className: \"Form Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const fields = new ItemList();\n    fields.add('help', m(\"p\", {\n      className: \"helpText\"\n    }, app.translator.trans('core.forum.change_password.text')));\n    fields.add('submit', m(\"div\", {\n      className: \"Form-group\"\n    }, m(Button, {\n      className: \"Button Button--primary Button--block\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.forum.change_password.send_button'))));\n    return fields;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    app.request({\n      method: 'POST',\n      url: app.forum.attribute('apiUrl') + '/forgot',\n      body: this.requestBody()\n    }).then(this.hide.bind(this), this.loaded.bind(this));\n  }\n  requestBody() {\n    return {\n      email: app.session.user.email()\n    };\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangePasswordModal', ChangePasswordModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport Modal from '../../common/components/Modal';\nimport Button from '../../common/components/Button';\nimport Stream from '../../common/utils/Stream';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `ChangeEmailModal` component shows a modal dialog which allows the user\n * to change their email address.\n */\nexport default class ChangeEmailModal extends Modal {\n  constructor() {\n    super(...arguments);\n    /**\n     * The value of the email input.\n     */\n    _defineProperty(this, \"email\", void 0);\n    /**\n     * The value of the password input.\n     */\n    _defineProperty(this, \"password\", void 0);\n    /**\n     * Whether or not the email has been changed successfully.\n     */\n    _defineProperty(this, \"success\", false);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.email = Stream(app.session.user.email() || '');\n    this.password = Stream('');\n  }\n  className() {\n    return 'ChangeEmailModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_email.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(\"div\", {\n      className: \"Form Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const items = new ItemList();\n    if (this.success) {\n      items.add('help', m(\"p\", {\n        className: \"helpText\"\n      }, app.translator.trans('core.forum.change_email.confirmation_message', {\n        email: m(\"strong\", null, this.email())\n      })));\n      items.add('dismiss', m(\"div\", {\n        className: \"Form-group\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        onclick: this.hide.bind(this)\n      }, app.translator.trans('core.forum.change_email.dismiss_button'))));\n    } else {\n      items.add('email', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        className: \"FormControl\",\n        placeholder: app.session.user.email(),\n        bidi: this.email,\n        disabled: this.loading\n      })));\n      items.add('password', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        className: \"FormControl\",\n        autocomplete: \"current-password\",\n        placeholder: app.translator.trans('core.forum.change_email.confirm_password_placeholder'),\n        bidi: this.password,\n        disabled: this.loading\n      })));\n      items.add('submit', m(\"div\", {\n        className: \"Form-group\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        type: \"submit\",\n        loading: this.loading\n      }, app.translator.trans('core.forum.change_email.submit_button'))));\n    }\n    return items;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n\n    // If the user hasn't actually entered a different email address, we don't\n    // need to do anything. Woot!\n    if (this.email() === app.session.user.email()) {\n      this.hide();\n      return;\n    }\n    this.loading = true;\n    this.alertAttrs = null;\n    app.session.user.save(this.requestAttributes(), {\n      errorHandler: this.onerror.bind(this),\n      meta: {\n        password: this.password()\n      }\n    }).then(() => {\n      this.success = true;\n    }).catch(() => {}).then(this.loaded.bind(this));\n  }\n  requestAttributes() {\n    return {\n      email: this.email()\n    };\n  }\n  onerror(error) {\n    if (error.status === 401 && error.alert) {\n      error.alert.content = app.translator.trans('core.forum.change_email.incorrect_password_message');\n    }\n    super.onerror(error);\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangeEmailModal', ChangeEmailModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport UserPage from './UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\nimport extractText from '../../common/utils/extractText';\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage extends UserPage {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"discloseOnlineLoading\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.show(app.session.user);\n    app.setTitle(extractText(app.translator.trans('core.forum.settings.title')));\n  }\n  content() {\n    return m(\"div\", {\n      className: \"SettingsPage\"\n    }, m(\"ul\", null, listItems(this.settingsItems().toArray())));\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   */\n  settingsItems() {\n    const items = new ItemList();\n    ['account', 'notifications', 'privacy'].forEach((section, index) => {\n      const sectionItems = \"\".concat(section, \"Items\");\n      items.add(section, m(FieldSet, {\n        className: \"Settings-\".concat(section),\n        label: app.translator.trans(\"core.forum.settings.\".concat(section, \"_heading\"))\n      }, this[sectionItems]().toArray()), 100 - index * 10);\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   */\n  accountItems() {\n    const items = new ItemList();\n    items.add('changePassword', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangePasswordModal)\n    }, app.translator.trans('core.forum.settings.change_password_button')), 100);\n    items.add('changeEmail', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangeEmailModal)\n    }, app.translator.trans('core.forum.settings.change_email_button')), 90);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   */\n  notificationsItems() {\n    const items = new ItemList();\n    items.add('notificationGrid', m(NotificationGrid, {\n      user: this.user\n    }), 100);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   */\n  privacyItems() {\n    var _preferences;\n    const items = new ItemList();\n    items.add('discloseOnline', m(Switch, {\n      state: (_preferences = this.user.preferences()) == null ? void 0 : _preferences.discloseOnline,\n      onchange: value => {\n        this.discloseOnlineLoading = true;\n        this.user.savePreferences({\n          discloseOnline: value\n        }).then(() => {\n          this.discloseOnlineLoading = false;\n          m.redraw();\n        });\n      },\n      loading: this.discloseOnlineLoading\n    }, app.translator.trans('core.forum.settings.privacy_disclose_online_label')), 100);\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/SettingsPage', SettingsPage);"],"names":["NotificationGrid","Component","oninit","vnode","super","this","methods","notificationMethods","toArray","loading","types","notificationTypes","view","preferences","attrs","user","m","className","map","method","onclick","toggleMethod","bind","name","icon","label","type","toggleType","key","preferenceKey","Checkbox","state","disabled","onchange","toggle","app","description","oncreate","$","e","i","parseInt","index","parents","find","toggleClass","parent","keys","enabled","forEach","redraw","save","then","filter","items","ItemList","add","flarum","reg","ChangePasswordModal","Modal","title","content","fields","Button","onsubmit","preventDefault","url","body","requestBody","hide","loaded","email","ChangeEmailModal","constructor","arguments","Stream","password","success","placeholder","bidi","autocomplete","alertAttrs","requestAttributes","errorHandler","onerror","meta","catch","error","status","alert","SettingsPage","UserPage","show","extractText","listItems","settingsItems","section","sectionItems","concat","FieldSet","accountItems","notificationsItems","privacyItems","_preferences","Switch","discloseOnline","value","discloseOnlineLoading","savePreferences"],"sourceRoot":""}