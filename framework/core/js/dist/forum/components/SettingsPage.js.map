{"version":3,"file":"forum/components/SettingsPage.js","mappings":"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","sources":["webpack://@flarum/core/./src/forum/components/NotificationGrid.js","webpack://@flarum/core/./src/forum/components/ChangePasswordModal.tsx","webpack://@flarum/core/./src/forum/components/ChangeEmailModal.tsx","webpack://@flarum/core/./src/forum/components/SettingsPage.tsx"],"sourcesContent":["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport ItemList from '../../common/utils/ItemList';\nimport Icon from '../../common/components/Icon';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Record<string, boolean>}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n  view() {\n    const preferences = this.attrs.user.preferences();\n    return m(\"table\", {\n      className: \"NotificationGrid\"\n    }, m(\"thead\", null, m(\"tr\", null, m(\"td\", null), this.methods.map(method => m(\"th\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleMethod.bind(this, method.name)\n    }, m(Icon, {\n      name: method.icon\n    }), \" \", method.label)))), m(\"tbody\", null, this.types.map(type => m(\"tr\", null, m(\"td\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleType.bind(this, type.name)\n    }, m(Icon, {\n      name: type.icon\n    }), \" \", type.label), this.methods.map(method => {\n      const key = this.preferenceKey(type.name, method.name);\n      return m(\"td\", {\n        className: \"NotificationGrid-checkbox\"\n      }, m(Checkbox, {\n        state: !!preferences[key],\n        loading: this.loading[key],\n        disabled: !(key in preferences),\n        onchange: this.toggle.bind(this, [key])\n      }, m(\"span\", {\n        className: \"sr-only\"\n      }, app.translator.trans('core.forum.settings.notification_checkbox_a11y_label_template', {\n        description: type.label,\n        method: method.label\n      }))));\n    })))));\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this).parents('table').find('td:nth-child(' + i + ')').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this).parent().find('td').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {string[]} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n    keys.forEach(key => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n    m.redraw();\n    user.save({\n      preferences\n    }).then(() => {\n      keys.forEach(key => this.loading[key] = false);\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {string} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map(type => this.preferenceKey(type.name, method)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {string} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map(method => this.preferenceKey(type, method.name)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {string} type\n   * @param {string} method\n   * @return {string}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children }>}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading')\n    });\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading')\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children}>}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label')\n    });\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/NotificationGrid', NotificationGrid);","import app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangePasswordModal` component shows a modal dialog which allows the\n * user to send themself a password reset email.\n */\nexport default class ChangePasswordModal extends FormModal {\n  className() {\n    return 'ChangePasswordModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_password.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const fields = new ItemList();\n    fields.add('help', m(\"p\", {\n      className: \"helpText\"\n    }, app.translator.trans('core.forum.change_password.text')));\n    fields.add('submit', m(\"div\", {\n      className: \"Form-group Form-controls\"\n    }, m(Button, {\n      className: \"Button Button--primary Button--block\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.forum.change_password.send_button'))));\n    return fields;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    app.request({\n      method: 'POST',\n      url: app.forum.attribute('apiUrl') + '/forgot',\n      body: this.requestBody()\n    }).then(this.hide.bind(this), this.loaded.bind(this));\n  }\n  requestBody() {\n    return {\n      email: app.session.user.email()\n    };\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangePasswordModal', ChangePasswordModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport Stream from '../../common/utils/Stream';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangeEmailModal` component shows a modal dialog which allows the user\n * to change their email address.\n */\nexport default class ChangeEmailModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    /**\n     * The value of the email input.\n     */\n    _defineProperty(this, \"email\", void 0);\n    /**\n     * The value of the password input.\n     */\n    _defineProperty(this, \"password\", void 0);\n    /**\n     * Whether or not the email has been changed successfully.\n     */\n    _defineProperty(this, \"success\", false);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.email = Stream(app.session.user.email() || '');\n    this.password = Stream('');\n  }\n  className() {\n    return 'ChangeEmailModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_email.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const items = new ItemList();\n    if (this.success) {\n      items.add('help', m(\"p\", {\n        className: \"helpText\"\n      }, app.translator.trans('core.forum.change_email.confirmation_message', {\n        email: m(\"strong\", null, this.email())\n      })));\n      items.add('dismiss', m(\"div\", {\n        className: \"Form-group\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        onclick: this.hide.bind(this)\n      }, app.translator.trans('core.forum.change_email.dismiss_button'))));\n    } else {\n      items.add('email', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        className: \"FormControl\",\n        placeholder: app.session.user.email(),\n        bidi: this.email,\n        disabled: this.loading\n      })));\n      items.add('password', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        className: \"FormControl\",\n        autocomplete: \"current-password\",\n        placeholder: app.translator.trans('core.forum.change_email.confirm_password_placeholder'),\n        bidi: this.password,\n        disabled: this.loading\n      })));\n      items.add('submit', m(\"div\", {\n        className: \"Form-group Form-controls\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        type: \"submit\",\n        loading: this.loading\n      }, app.translator.trans('core.forum.change_email.submit_button'))));\n    }\n    return items;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n\n    // If the user hasn't actually entered a different email address, we don't\n    // need to do anything. Woot!\n    if (this.email() === app.session.user.email()) {\n      this.hide();\n      return;\n    }\n    this.loading = true;\n    this.alertAttrs = null;\n    app.session.user.save(this.requestAttributes(), {\n      errorHandler: this.onerror.bind(this),\n      meta: {\n        password: this.password()\n      }\n    }).then(() => {\n      this.success = true;\n    }).catch(() => {}).then(this.loaded.bind(this));\n  }\n  requestAttributes() {\n    return {\n      email: this.email()\n    };\n  }\n  onerror(error) {\n    if (error.status === 401 && error.alert) {\n      error.alert.content = app.translator.trans('core.forum.change_email.incorrect_password_message');\n    }\n    super.onerror(error);\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangeEmailModal', ChangeEmailModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport UserPage from './UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\nimport extractText from '../../common/utils/extractText';\nimport classList from '../../common/utils/classList';\n\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage extends UserPage {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"discloseOnlineLoading\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.show(app.session.user);\n    app.setTitle(extractText(app.translator.trans('core.forum.settings.title')));\n  }\n  content() {\n    return m(\"div\", {\n      className: \"SettingsPage\"\n    }, m(\"ul\", null, listItems(this.settingsItems().toArray())));\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   */\n  settingsItems() {\n    const items = new ItemList();\n    ['account', 'notifications', 'privacy'].forEach((section, index) => {\n      const sectionItems = \"\".concat(section, \"Items\");\n      items.add(section, m(FieldSet, {\n        className: classList(\"Settings-\".concat(section), {\n          'FieldSet--col': section === 'account'\n        }),\n        label: app.translator.trans(\"core.forum.settings.\".concat(section, \"_heading\"))\n      }, this[sectionItems]().toArray()), 100 - index * 10);\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   */\n  accountItems() {\n    const items = new ItemList();\n    items.add('changePassword', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangePasswordModal)\n    }, app.translator.trans('core.forum.settings.change_password_button')), 100);\n    items.add('changeEmail', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangeEmailModal)\n    }, app.translator.trans('core.forum.settings.change_email_button')), 90);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   */\n  notificationsItems() {\n    const items = new ItemList();\n    items.add('notificationGrid', m(NotificationGrid, {\n      user: this.user\n    }), 100);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   */\n  privacyItems() {\n    var _preferences;\n    const items = new ItemList();\n    items.add('discloseOnline', m(Switch, {\n      state: (_preferences = this.user.preferences()) == null ? void 0 : _preferences.discloseOnline,\n      onchange: value => {\n        this.discloseOnlineLoading = true;\n        this.user.savePreferences({\n          discloseOnline: value\n        }).then(() => {\n          this.discloseOnlineLoading = false;\n          m.redraw();\n        });\n      },\n      loading: this.discloseOnlineLoading\n    }, app.translator.trans('core.forum.settings.privacy_disclose_online_label')), 100);\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/SettingsPage', SettingsPage);"],"names":["NotificationGrid","Component","oninit","vnode","super","this","methods","notificationMethods","toArray","loading","types","notificationTypes","view","preferences","attrs","user","m","className","map","method","onclick","toggleMethod","bind","name","Icon","icon","label","type","toggleType","key","preferenceKey","Checkbox","state","disabled","onchange","toggle","app","description","oncreate","$","e","i","parseInt","index","parents","find","toggleClass","parent","keys","enabled","forEach","redraw","save","then","filter","items","ItemList","add","flarum","reg","ChangePasswordModal","FormModal","title","content","Form","fields","Button","onsubmit","preventDefault","url","body","requestBody","hide","loaded","email","ChangeEmailModal","constructor","arguments","Stream","password","success","placeholder","bidi","autocomplete","alertAttrs","requestAttributes","errorHandler","onerror","meta","catch","error","status","alert","SettingsPage","UserPage","show","extractText","listItems","settingsItems","section","sectionItems","concat","FieldSet","classList","accountItems","notificationsItems","privacyItems","_preferences","Switch","discloseOnline","value","discloseOnlineLoading","savePreferences"],"sourceRoot":""}