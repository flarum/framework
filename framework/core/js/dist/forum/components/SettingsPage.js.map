{"version":3,"file":"forum/components/SettingsPage.js","mappings":"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","sources":["webpack://@flarum/core/./src/forum/components/NotificationGrid.js","webpack://@flarum/core/./src/forum/components/ChangePasswordModal.tsx","webpack://@flarum/core/./src/forum/components/ChangeEmailModal.tsx","webpack://@flarum/core/./src/forum/components/SettingsPage.tsx"],"sourcesContent":["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport ItemList from '../../common/utils/ItemList';\nimport Icon from '../../common/components/Icon';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Record<string, boolean>}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {({ name: string, icon: string, label: import('mithril').Children })[]}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n  view() {\n    const preferences = this.attrs.user.preferences();\n    return m(\"table\", {\n      className: \"NotificationGrid\"\n    }, m(\"thead\", null, m(\"tr\", null, m(\"td\", null), this.methods.map(method => m(\"th\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleMethod.bind(this, method.name)\n    }, m(Icon, {\n      name: method.icon\n    }), \" \", method.label)))), m(\"tbody\", null, this.types.map(type => m(\"tr\", null, m(\"td\", {\n      className: \"NotificationGrid-groupToggle\",\n      onclick: this.toggleType.bind(this, type.name)\n    }, m(Icon, {\n      name: type.icon\n    }), \" \", type.label), this.methods.map(method => {\n      const key = this.preferenceKey(type.name, method.name);\n      return m(\"td\", {\n        className: \"NotificationGrid-checkbox\"\n      }, m(Checkbox, {\n        state: !!preferences[key],\n        loading: this.loading[key],\n        disabled: !(key in preferences),\n        onchange: this.toggle.bind(this, [key])\n      }, m(\"span\", {\n        className: \"sr-only\"\n      }, app.translator.trans('core.forum.settings.notification_checkbox_a11y_label_template', {\n        description: type.label,\n        method: method.label\n      }))));\n    })))));\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this).parents('table').find('td:nth-child(' + i + ')').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this).parent().find('td').toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {string[]} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n    keys.forEach(key => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n    m.redraw();\n    user.save({\n      preferences\n    }).then(() => {\n      keys.forEach(key => this.loading[key] = false);\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {string} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map(type => this.preferenceKey(type.name, method)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {string} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map(method => this.preferenceKey(type, method.name)).filter(key => key in this.attrs.user.preferences());\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {string} type\n   * @param {string} method\n   * @return {string}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children }>}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading')\n    });\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading')\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList<{ name: string, icon: string, label: import('mithril').Children}>}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label')\n    });\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/NotificationGrid', NotificationGrid);","import app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangePasswordModal` component shows a modal dialog which allows the\n * user to send themself a password reset email.\n */\nexport default class ChangePasswordModal extends FormModal {\n  className() {\n    return 'ChangePasswordModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_password.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const fields = new ItemList();\n    fields.add('help', m(\"p\", {\n      className: \"helpText\"\n    }, app.translator.trans('core.forum.change_password.text')));\n    fields.add('submit', m(\"div\", {\n      className: \"Form-group Form-controls\"\n    }, m(Button, {\n      className: \"Button Button--primary Button--block\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.forum.change_password.send_button'))));\n    return fields;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    app.request({\n      method: 'POST',\n      url: app.forum.attribute('apiUrl') + '/forgot',\n      body: this.requestBody()\n    }).then(this.hide.bind(this), this.loaded.bind(this));\n  }\n  requestBody() {\n    return {\n      email: app.session.user.email()\n    };\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangePasswordModal', ChangePasswordModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from '../../common/components/Button';\nimport Stream from '../../common/utils/Stream';\nimport ItemList from '../../common/utils/ItemList';\nimport Form from '../../common/components/Form';\n\n/**\n * The `ChangeEmailModal` component shows a modal dialog which allows the user\n * to change their email address.\n */\nexport default class ChangeEmailModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    /**\n     * The value of the email input.\n     */\n    _defineProperty(this, \"email\", void 0);\n    /**\n     * The value of the password input.\n     */\n    _defineProperty(this, \"password\", void 0);\n    /**\n     * Whether or not the email has been changed successfully.\n     */\n    _defineProperty(this, \"success\", false);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.email = Stream(app.session.user.email() || '');\n    this.password = Stream('');\n  }\n  className() {\n    return 'ChangeEmailModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.forum.change_email.title');\n  }\n  content() {\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, this.fields().toArray()));\n  }\n  fields() {\n    const items = new ItemList();\n    if (this.success) {\n      items.add('help', m(\"p\", {\n        className: \"helpText\"\n      }, app.translator.trans('core.forum.change_email.confirmation_message', {\n        email: m(\"strong\", null, this.email())\n      })));\n      items.add('dismiss', m(\"div\", {\n        className: \"Form-group\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        onclick: this.hide.bind(this)\n      }, app.translator.trans('core.forum.change_email.dismiss_button'))));\n    } else {\n      items.add('email', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        className: \"FormControl\",\n        placeholder: app.session.user.email(),\n        bidi: this.email,\n        disabled: this.loading\n      })));\n      items.add('password', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        className: \"FormControl\",\n        autocomplete: \"current-password\",\n        placeholder: app.translator.trans('core.forum.change_email.confirm_password_placeholder'),\n        bidi: this.password,\n        disabled: this.loading\n      })));\n      items.add('submit', m(\"div\", {\n        className: \"Form-group Form-controls\"\n      }, m(Button, {\n        className: \"Button Button--primary Button--block\",\n        type: \"submit\",\n        loading: this.loading\n      }, app.translator.trans('core.forum.change_email.submit_button'))));\n    }\n    return items;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n\n    // If the user hasn't actually entered a different email address, we don't\n    // need to do anything. Woot!\n    if (this.email() === app.session.user.email()) {\n      this.hide();\n      return;\n    }\n    this.loading = true;\n    this.alertAttrs = null;\n    app.session.user.save(this.requestAttributes(), {\n      errorHandler: this.onerror.bind(this),\n      meta: {\n        password: this.password()\n      }\n    }).then(() => {\n      this.success = true;\n    }).catch(() => {}).then(this.loaded.bind(this));\n  }\n  requestAttributes() {\n    return {\n      email: this.email()\n    };\n  }\n  onerror(error) {\n    if (error.status === 401 && error.alert) {\n      error.alert.content = app.translator.trans('core.forum.change_email.incorrect_password_message');\n    }\n    super.onerror(error);\n  }\n}\nflarum.reg.add('core', 'forum/components/ChangeEmailModal', ChangeEmailModal);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../forum/app';\nimport UserPage from './UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\nimport extractText from '../../common/utils/extractText';\nimport classList from '../../common/utils/classList';\nimport ThemeMode from '../../common/components/ThemeMode';\nimport { camelCaseToSnakeCase } from '../../common/utils/string';\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage extends UserPage {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"discloseOnlineLoading\", void 0);\n    _defineProperty(this, \"colorSchemeLoading\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.show(app.session.user);\n    app.setTitle(extractText(app.translator.trans('core.forum.settings.title')));\n  }\n  content() {\n    return m(\"div\", {\n      className: \"SettingsPage\"\n    }, m(\"ul\", null, listItems(this.settingsItems().toArray())));\n  }\n  sectionProps() {\n    return {\n      account: {\n        className: 'FieldSet--col'\n      },\n      colorScheme: {\n        className: 'FieldSet--col',\n        visible: () => app.allowUserColorScheme\n      }\n    };\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   */\n  settingsItems() {\n    const items = new ItemList();\n    ['account', 'notifications', 'privacy', 'colorScheme'].forEach((section, index) => {\n      const sectionItems = `${section}Items`;\n      const {\n        className,\n        visible,\n        ...props\n      } = this.sectionProps()[section] || {};\n      if (visible && visible() === false) return;\n      items.add(section, m(FieldSet, Object.assign({\n        className: classList(`Settings-${section} FieldSet--min`, className || ''),\n        label: app.translator.trans(`core.forum.settings.${camelCaseToSnakeCase(section)}_heading`)\n      }, props), this[sectionItems]().toArray()), 100 - index * 10);\n    });\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   */\n  accountItems() {\n    const items = new ItemList();\n    items.add('changePassword', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangePasswordModal)\n    }, app.translator.trans('core.forum.settings.change_password_button')), 100);\n    items.add('changeEmail', m(Button, {\n      className: \"Button\",\n      onclick: () => app.modal.show(ChangeEmailModal)\n    }, app.translator.trans('core.forum.settings.change_email_button')), 90);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   */\n  notificationsItems() {\n    const items = new ItemList();\n    items.add('notificationGrid', m(NotificationGrid, {\n      user: this.user\n    }), 100);\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   */\n  privacyItems() {\n    const items = new ItemList();\n    items.add('discloseOnline', m(Switch, {\n      state: this.user.preferences()?.discloseOnline,\n      onchange: value => {\n        this.discloseOnlineLoading = true;\n        this.user.savePreferences({\n          discloseOnline: value\n        }).then(() => {\n          this.discloseOnlineLoading = false;\n          m.redraw();\n        });\n      },\n      loading: this.discloseOnlineLoading\n    }, app.translator.trans('core.forum.settings.privacy_disclose_online_label')), 100);\n    return items;\n  }\n\n  /**\n   * Color schemes.\n   */\n  colorSchemeItems() {\n    const items = new ItemList();\n    ThemeMode.colorSchemes.forEach(mode => {\n      items.add(mode.id, m(ThemeMode, {\n        mode: mode.id,\n        label: mode.label || app.translator.trans('core.forum.settings.color_schemes.' + mode.id.replace('-', '_') + '_mode_label'),\n        selected: this.user.preferences()?.colorScheme === mode.id,\n        loading: this.colorSchemeLoading,\n        onclick: () => {\n          this.colorSchemeLoading = true;\n          this.user.savePreferences({\n            colorScheme: mode.id\n          }).then(() => {\n            this.colorSchemeLoading = false;\n            app.setColorScheme(mode.id);\n            m.redraw();\n          });\n        }\n      }), 100);\n    });\n    return items;\n  }\n}\nflarum.reg.add('core', 'forum/components/SettingsPage', SettingsPage);"],"names":["NotificationGrid","Component","oninit","vnode","super","this","methods","notificationMethods","toArray","loading","types","notificationTypes","view","preferences","attrs","user","m","className","map","method","onclick","toggleMethod","bind","name","Icon","icon","label","type","toggleType","key","preferenceKey","Checkbox","state","disabled","onchange","toggle","app","translator","trans","description","oncreate","$","e","i","parseInt","index","parents","find","toggleClass","parent","keys","enabled","forEach","redraw","save","then","filter","items","ItemList","add","flarum","reg","ChangePasswordModal","FormModal","title","content","Form","fields","Button","onsubmit","preventDefault","request","url","forum","attribute","body","requestBody","hide","loaded","email","session","ChangeEmailModal","constructor","arguments","Stream","password","success","placeholder","bidi","autocomplete","alertAttrs","requestAttributes","errorHandler","onerror","meta","catch","error","status","alert","SettingsPage","UserPage","show","setTitle","extractText","listItems","settingsItems","sectionProps","account","colorScheme","visible","allowUserColorScheme","section","sectionItems","props","FieldSet","Object","assign","classList","accountItems","modal","notificationsItems","privacyItems","Switch","discloseOnline","value","discloseOnlineLoading","savePreferences","colorSchemeItems","ThemeMode","colorSchemes","mode","id","replace","selected","colorSchemeLoading","setColorScheme"],"sourceRoot":""}