{"version":3,"file":"forum/components/DiscussionComposer.js","mappings":"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","sources":["webpack://@flarum/core/./src/common/components/ConfirmDocumentUnload.js","webpack://@flarum/core/./src/forum/components/ComposerBody.js","webpack://@flarum/core/./src/forum/components/DiscussionComposer.js"],"sourcesContent":["import Component from '../Component';\n\n/**\n * The `ConfirmDocumentUnload` component can be used to register a global\n * event handler that prevents closing the browser window/tab based on the\n * return value of a given callback prop.\n *\n * ### Attrs\n *\n * - `when` - a callback returning true when the browser should prompt for\n *            confirmation before closing the window/tab\n */\nexport default class ConfirmDocumentUnload extends Component {\n  handler() {\n    return this.attrs.when() || undefined;\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.boundHandler = this.handler.bind(this);\n    $(window).on('beforeunload', this.boundHandler);\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    $(window).off('beforeunload', this.boundHandler);\n  }\n  view(vnode) {\n    return m('[', null, vnode.children);\n  }\n}\nflarum.reg.add('core', 'common/components/ConfirmDocumentUnload', ConfirmDocumentUnload);","import Component from '../../common/Component';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport ConfirmDocumentUnload from '../../common/components/ConfirmDocumentUnload';\nimport TextEditor from '../../common/components/TextEditor';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Avatar from '../../common/components/Avatar';\n\n/**\n * The `ComposerBody` component handles the body, or the content, of the\n * composer. Subclasses should implement the `onsubmit` method and override\n * `headerTimes`.\n *\n * ### Attrs\n *\n * - `composer`\n * - `originalContent`\n * - `submitLabel`\n * - `placeholder`\n * - `user`\n * - `confirmExit`\n * - `disabled`\n *\n * @abstract\n */\nexport default class ComposerBody extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer = this.attrs.composer;\n\n    /**\n     * Whether or not the component is loading.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    // Let the composer state know to ask for confirmation under certain\n    // circumstances, if the body supports / requires it and has a corresponding\n    // confirmation question to ask.\n    if (this.attrs.confirmExit) {\n      this.composer.preventClosingWhen(() => this.hasChanges(), this.attrs.confirmExit);\n    }\n    this.composer.fields.content(this.attrs.originalContent || '');\n  }\n  view() {\n    var _this$jumpToPreview;\n    return m(ConfirmDocumentUnload, {\n      when: this.hasChanges.bind(this)\n    }, m(\"div\", {\n      className: classList('ComposerBody', this.attrs.className)\n    }, m(Avatar, {\n      user: this.attrs.user,\n      className: \"ComposerBody-avatar\"\n    }), m(\"div\", {\n      className: \"ComposerBody-content\"\n    }, m(\"ul\", {\n      className: \"ComposerBody-header\"\n    }, listItems(this.headerItems().toArray())), m(\"div\", {\n      className: \"ComposerBody-editor\"\n    }, m(TextEditor, {\n      submitLabel: this.attrs.submitLabel,\n      placeholder: this.attrs.placeholder,\n      disabled: this.loading || this.attrs.disabled,\n      composer: this.composer,\n      preview: (_this$jumpToPreview = this.jumpToPreview) == null ? void 0 : _this$jumpToPreview.bind(this),\n      onchange: this.composer.fields.content,\n      onsubmit: this.onsubmit.bind(this),\n      value: this.composer.fields.content()\n    }))), m(LoadingIndicator, {\n      display: \"unset\",\n      containerClassName: classList('ComposerBody-loading', this.loading && 'active'),\n      size: \"large\"\n    })));\n  }\n\n  /**\n   * Check if there is any unsaved data.\n   *\n   * @return {boolean}\n   */\n  hasChanges() {\n    const content = this.composer.fields.content();\n    return content && content !== this.attrs.originalContent;\n  }\n\n  /**\n   * Build an item list for the composer's header.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  headerItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle the submit event of the text editor.\n   *\n   * @abstract\n   */\n  onsubmit() {}\n\n  /**\n   * Stop loading.\n   */\n  loaded() {\n    this.loading = false;\n    m.redraw();\n  }\n}\nflarum.reg.add('core', 'forum/components/ComposerBody', ComposerBody);","import app from '../../forum/app';\nimport ComposerBody from './ComposerBody';\nimport extractText from '../../common/utils/extractText';\nimport Stream from '../../common/utils/Stream';\n\n/**\n * The `DiscussionComposer` component displays the composer content for starting\n * a new discussion. It adds a text field as a header control so the user can\n * enter the title of their discussion. It also overrides the `submit` and\n * `willExit` actions to account for the title.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `titlePlaceholder`\n */\nexport default class DiscussionComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.placeholder = attrs.placeholder || extractText(app.translator.trans('core.forum.composer_discussion.body_placeholder'));\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_discussion.submit_button');\n    attrs.confirmExit = attrs.confirmExit || extractText(app.translator.trans('core.forum.composer_discussion.discard_confirmation'));\n    attrs.titlePlaceholder = attrs.titlePlaceholder || extractText(app.translator.trans('core.forum.composer_discussion.title_placeholder'));\n    attrs.className = 'ComposerBody--discussion';\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer.fields.title = this.composer.fields.title || Stream('');\n\n    /**\n     * The value of the title input.\n     *\n     * @type {Function}\n     */\n    this.title = this.composer.fields.title;\n  }\n  headerItems() {\n    const items = super.headerItems();\n    items.add('title', m(\"h3\", null, app.translator.trans('core.forum.composer_discussion.title')), 100);\n    items.add('discussionTitle', m(\"h3\", null, m(\"input\", {\n      className: \"FormControl\",\n      bidi: this.title,\n      placeholder: this.attrs.titlePlaceholder,\n      disabled: !!this.attrs.disabled,\n      onkeydown: this.onkeydown.bind(this)\n    })));\n    return items;\n  }\n\n  /**\n   * Handle the title input's keydown event. When the return key is pressed,\n   * move the focus to the start of the text editor.\n   *\n   * @param {KeyboardEvent} e\n   */\n  onkeydown(e) {\n    if (e.which === 13) {\n      // Return\n      e.preventDefault();\n      this.composer.editor.moveCursorTo(0);\n    }\n    e.redraw = false;\n  }\n  hasChanges() {\n    return this.title() || this.composer.fields.content();\n  }\n\n  /**\n   * Get the data to submit to the server when the discussion is saved.\n   *\n   * @return {Record<string, unknown>}\n   */\n  data() {\n    return {\n      title: this.title(),\n      content: this.composer.fields.content()\n    };\n  }\n  onsubmit() {\n    this.loading = true;\n    const data = this.data();\n    app.store.createRecord('discussions').save(data).then(discussion => {\n      this.composer.hide();\n      app.discussions.refresh();\n      m.route.set(app.route.discussion(discussion));\n    }, this.loaded.bind(this));\n  }\n}\nflarum.reg.add('core', 'forum/components/DiscussionComposer', DiscussionComposer);"],"names":["ConfirmDocumentUnload","Component","handler","this","attrs","when","undefined","oncreate","vnode","super","boundHandler","bind","$","window","on","onremove","off","view","m","children","flarum","reg","add","ComposerBody","oninit","composer","loading","confirmExit","preventClosingWhen","hasChanges","fields","content","originalContent","_this$jumpToPreview","className","classList","Avatar","user","listItems","headerItems","toArray","TextEditor","submitLabel","placeholder","disabled","preview","jumpToPreview","onchange","onsubmit","value","LoadingIndicator","display","containerClassName","size","ItemList","loaded","redraw","DiscussionComposer","static","initAttrs","titlePlaceholder","title","items","bidi","onkeydown","e","which","preventDefault","editor","moveCursorTo","data","save","then","discussion","hide","route","set"],"sourceRoot":""}