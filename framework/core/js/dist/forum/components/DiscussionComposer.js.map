{"version":3,"file":"forum/components/DiscussionComposer.js","mappings":"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","sources":["webpack://@flarum/core/./src/common/components/ConfirmDocumentUnload.js","webpack://@flarum/core/./src/forum/components/ComposerBody.tsx","webpack://@flarum/core/./src/forum/components/DiscussionComposer.js"],"sourcesContent":["import Component from '../Component';\n\n/**\n * The `ConfirmDocumentUnload` component can be used to register a global\n * event handler that prevents closing the browser window/tab based on the\n * return value of a given callback prop.\n *\n * ### Attrs\n *\n * - `when` - a callback returning true when the browser should prompt for\n *            confirmation before closing the window/tab\n */\nexport default class ConfirmDocumentUnload extends Component {\n  handler() {\n    return this.attrs.when() || undefined;\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.boundHandler = this.handler.bind(this);\n    $(window).on('beforeunload', this.boundHandler);\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    $(window).off('beforeunload', this.boundHandler);\n  }\n  view(vnode) {\n    return m('[', null, vnode.children);\n  }\n}\nflarum.reg.add('core', 'common/components/ConfirmDocumentUnload', ConfirmDocumentUnload);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Component from '../../common/Component';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport ConfirmDocumentUnload from '../../common/components/ConfirmDocumentUnload';\nimport TextEditor from '../../common/components/TextEditor';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Avatar from '../../common/components/Avatar';\n/**\n * The `ComposerBody` component handles the body, or the content, of the\n * composer. Subclasses should implement the `onsubmit` method and override\n * `headerTimes`.\n */\nexport default class ComposerBody extends Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"loading\", false);\n    _defineProperty(this, \"composer\", void 0);\n    _defineProperty(this, \"jumpToPreview\", void 0);\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer = this.attrs.composer;\n\n    // Let the composer state know to ask for confirmation under certain\n    // circumstances, if the body supports / requires it and has a corresponding\n    // confirmation question to ask.\n    if (this.attrs.confirmExit) {\n      this.composer.preventClosingWhen(() => this.hasChanges(), this.attrs.confirmExit);\n    }\n    this.composer.fields.content(this.attrs.originalContent || '');\n  }\n  view() {\n    return m(ConfirmDocumentUnload, {\n      when: this.hasChanges.bind(this)\n    }, m(\"div\", {\n      className: classList('ComposerBody', this.attrs.className)\n    }, m(Avatar, {\n      user: this.attrs.user,\n      className: \"ComposerBody-avatar\"\n    }), m(\"div\", {\n      className: \"ComposerBody-content\"\n    }, m(\"ul\", {\n      className: \"ComposerBody-header\"\n    }, listItems(this.headerItems().toArray())), m(\"div\", {\n      className: \"ComposerBody-editor\"\n    }, m(TextEditor, {\n      submitLabel: this.attrs.submitLabel,\n      placeholder: this.attrs.placeholder,\n      disabled: this.loading || this.attrs.disabled,\n      composer: this.composer,\n      preview: this.jumpToPreview?.bind(this),\n      onchange: this.composer.fields.content,\n      onsubmit: this.onsubmit.bind(this),\n      value: this.composer.fields.content()\n    }))), m(LoadingIndicator, {\n      display: \"unset\",\n      containerClassName: classList('ComposerBody-loading', this.loading && 'active'),\n      size: \"large\"\n    })));\n  }\n\n  /**\n   * Check if there is any unsaved data.\n   */\n  hasChanges() {\n    const content = this.composer.fields.content();\n    return Boolean(content) && content !== this.attrs.originalContent;\n  }\n\n  /**\n   * Build an item list for the composer's header.\n   */\n  headerItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle the submit event of the text editor.\n   */\n\n  /**\n   * Stop loading.\n   */\n  loaded() {\n    this.loading = false;\n    m.redraw();\n  }\n}\n_defineProperty(ComposerBody, \"focusOnSelector\", null);\nflarum.reg.add('core', 'forum/components/ComposerBody', ComposerBody);","import app from '../../forum/app';\nimport ComposerBody from './ComposerBody';\nimport extractText from '../../common/utils/extractText';\nimport Stream from '../../common/utils/Stream';\n\n/**\n * The `DiscussionComposer` component displays the composer content for starting\n * a new discussion. It adds a text field as a header control so the user can\n * enter the title of their discussion. It also overrides the `submit` and\n * `willExit` actions to account for the title.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `titlePlaceholder`\n */\nexport default class DiscussionComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.placeholder = attrs.placeholder || extractText(app.translator.trans('core.forum.composer_discussion.body_placeholder'));\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_discussion.submit_button');\n    attrs.confirmExit = attrs.confirmExit || extractText(app.translator.trans('core.forum.composer_discussion.discard_confirmation'));\n    attrs.titlePlaceholder = attrs.titlePlaceholder || extractText(app.translator.trans('core.forum.composer_discussion.title_placeholder'));\n    attrs.className = 'ComposerBody--discussion';\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer.fields.title = this.composer.fields.title || Stream('');\n\n    /**\n     * The value of the title input.\n     *\n     * @type {Function}\n     */\n    this.title = this.composer.fields.title;\n  }\n  headerItems() {\n    const items = super.headerItems();\n    items.add('title', m(\"h3\", null, app.translator.trans('core.forum.composer_discussion.title')), 100);\n    items.add('discussionTitle', m(\"h3\", null, m(\"input\", {\n      className: \"FormControl\",\n      bidi: this.title,\n      placeholder: this.attrs.titlePlaceholder,\n      disabled: !!this.attrs.disabled,\n      onkeydown: this.onkeydown.bind(this)\n    })));\n    return items;\n  }\n\n  /**\n   * Handle the title input's keydown event. When the return key is pressed,\n   * move the focus to the start of the text editor.\n   *\n   * @param {KeyboardEvent} e\n   */\n  onkeydown(e) {\n    if (e.which === 13) {\n      // Return\n      e.preventDefault();\n      this.composer.editor.moveCursorTo(0);\n    }\n    e.redraw = false;\n  }\n  hasChanges() {\n    return this.title() || this.composer.fields.content();\n  }\n\n  /**\n   * Get the data to submit to the server when the discussion is saved.\n   *\n   * @return {Record<string, unknown>}\n   */\n  data() {\n    return {\n      title: this.title(),\n      content: this.composer.fields.content()\n    };\n  }\n  onsubmit() {\n    this.loading = true;\n    const data = this.data();\n    app.store.createRecord('discussions').save(data).then(discussion => {\n      this.composer.hide();\n      app.discussions.refresh();\n      m.route.set(app.route.discussion(discussion));\n    }, this.loaded.bind(this));\n  }\n}\nflarum.reg.add('core', 'forum/components/DiscussionComposer', DiscussionComposer);"],"names":["ConfirmDocumentUnload","Component","handler","this","attrs","when","undefined","oncreate","vnode","super","boundHandler","bind","$","window","on","onremove","off","view","m","children","flarum","reg","add","ComposerBody","constructor","arguments","oninit","composer","confirmExit","preventClosingWhen","hasChanges","fields","content","originalContent","className","classList","Avatar","A","user","listItems","headerItems","toArray","TextEditor","submitLabel","placeholder","disabled","loading","preview","jumpToPreview","onchange","onsubmit","value","LoadingIndicator","display","containerClassName","size","Boolean","ItemList","loaded","redraw","DiscussionComposer","initAttrs","translator","trans","titlePlaceholder","title","items","bidi","onkeydown","e","which","preventDefault","editor","moveCursorTo","data","store","createRecord","save","then","discussion","hide","discussions","refresh","route","set"],"sourceRoot":""}