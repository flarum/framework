{"version":3,"file":"forum/components/DiscussionComposer.js","mappings":"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","sources":["webpack://@flarum/core/./src/common/components/ConfirmDocumentUnload.js","webpack://@flarum/core/./src/common/components/TextEditor.js","webpack://@flarum/core/./src/forum/components/ComposerBody.js","webpack://@flarum/core/./src/forum/components/DiscussionComposer.js"],"sourcesContent":["import Component from '../Component';\n\n/**\n * The `ConfirmDocumentUnload` component can be used to register a global\n * event handler that prevents closing the browser window/tab based on the\n * return value of a given callback prop.\n *\n * ### Attrs\n *\n * - `when` - a callback returning true when the browser should prompt for\n *            confirmation before closing the window/tab\n */\nexport default class ConfirmDocumentUnload extends Component {\n  handler() {\n    return this.attrs.when() || undefined;\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this.boundHandler = this.handler.bind(this);\n    $(window).on('beforeunload', this.boundHandler);\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    $(window).off('beforeunload', this.boundHandler);\n  }\n  view(vnode) {\n    return m('[', null, vnode.children);\n  }\n}\nflarum.reg.add('core', 'common/components/ConfirmDocumentUnload', ConfirmDocumentUnload);","import app from '../../common/app';\nimport Component from '../Component';\nimport ItemList from '../utils/ItemList';\nimport listItems from '../helpers/listItems';\nimport Button from './Button';\nimport BasicEditorDriver from '../utils/BasicEditorDriver';\nimport Tooltip from './Tooltip';\nimport LoadingIndicator from './LoadingIndicator';\n\n/**\n * The `TextEditor` component displays a textarea with controls, including a\n * submit button.\n *\n * ### Attrs\n *\n * - `composer`\n * - `submitLabel`\n * - `value`\n * - `placeholder`\n * - `disabled`\n * - `preview`\n */\nexport default class TextEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * The value of the editor.\n     *\n     * @type {String}\n     */\n    this.value = this.attrs.value || '';\n\n    /**\n     * Whether the editor is disabled.\n     */\n    this.disabled = !!this.attrs.disabled;\n\n    /**\n     * Whether the editor is loading.\n     */\n    this.loading = true;\n\n    /**\n     * Async operations to complete before the editor is ready.\n     */\n    this._loaders = [];\n  }\n  view() {\n    return m(\"div\", {\n      className: \"TextEditor\"\n    }, this.loading ? m(LoadingIndicator, null) : m('[', null, m(\"div\", {\n      className: \"TextEditor-editorContainer\"\n    }), m(\"ul\", {\n      className: \"TextEditor-controls Composer-footer\"\n    }, listItems(this.controlItems().toArray()), m(\"li\", {\n      className: \"TextEditor-toolbar\"\n    }, this.toolbarItems().toArray()))));\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n    this._load().then(() => {\n      setTimeout(this.onbuild.bind(this), 50);\n    });\n  }\n  onbuild() {\n    this.attrs.composer.editor = this.buildEditor(this.$('.TextEditor-editorContainer')[0]);\n  }\n  onupdate(vnode) {\n    super.onupdate(vnode);\n    const newDisabled = !!this.attrs.disabled;\n    if (this.disabled !== newDisabled) {\n      this.disabled = newDisabled;\n      this.attrs.composer.editor.disabled(newDisabled);\n    }\n  }\n  _load() {\n    return Promise.all(this._loaders.map(loader => loader())).then(() => {\n      this.loading = false;\n      m.redraw();\n    });\n  }\n  buildEditorParams() {\n    return {\n      classNames: ['FormControl', 'Composer-flexible', 'TextEditor-editor'],\n      disabled: this.disabled,\n      placeholder: this.attrs.placeholder || '',\n      value: this.value,\n      oninput: this.oninput.bind(this),\n      inputListeners: [],\n      onsubmit: () => {\n        this.onsubmit();\n        m.redraw();\n      }\n    };\n  }\n  buildEditor(dom) {\n    return new BasicEditorDriver(dom, this.buildEditorParams());\n  }\n\n  /**\n   * Build an item list for the text editor controls.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  controlItems() {\n    const items = new ItemList();\n    items.add('submit', m(Button, {\n      icon: \"fas fa-paper-plane\",\n      className: \"Button Button--primary\",\n      itemClassName: \"App-primaryControl\",\n      onclick: this.onsubmit.bind(this)\n    }, this.attrs.submitLabel));\n    if (this.attrs.preview) {\n      items.add('preview', m(Tooltip, {\n        text: app.translator.trans('core.forum.composer.preview_tooltip')\n      }, m(Button, {\n        icon: \"far fa-eye\",\n        className: \"Button Button--icon\",\n        onclick: this.attrs.preview\n      })));\n    }\n    return items;\n  }\n\n  /**\n   * Build an item list for the toolbar controls.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  toolbarItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle input into the textarea.\n   *\n   * @param {string} value\n   */\n  oninput(value) {\n    this.value = value;\n    this.attrs.onchange(this.value);\n  }\n\n  /**\n   * Handle the submit button being clicked.\n   */\n  onsubmit() {\n    this.attrs.onsubmit(this.value);\n  }\n}\nflarum.reg.add('core', 'common/components/TextEditor', TextEditor);","import Component from '../../common/Component';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport ConfirmDocumentUnload from '../../common/components/ConfirmDocumentUnload';\nimport TextEditor from '../../common/components/TextEditor';\nimport avatar from '../../common/helpers/avatar';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\n\n/**\n * The `ComposerBody` component handles the body, or the content, of the\n * composer. Subclasses should implement the `onsubmit` method and override\n * `headerTimes`.\n *\n * ### Attrs\n *\n * - `composer`\n * - `originalContent`\n * - `submitLabel`\n * - `placeholder`\n * - `user`\n * - `confirmExit`\n * - `disabled`\n *\n * @abstract\n */\nexport default class ComposerBody extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer = this.attrs.composer;\n\n    /**\n     * Whether or not the component is loading.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    // Let the composer state know to ask for confirmation under certain\n    // circumstances, if the body supports / requires it and has a corresponding\n    // confirmation question to ask.\n    if (this.attrs.confirmExit) {\n      this.composer.preventClosingWhen(() => this.hasChanges(), this.attrs.confirmExit);\n    }\n    this.composer.fields.content(this.attrs.originalContent || '');\n  }\n  view() {\n    var _this$jumpToPreview;\n    return m(ConfirmDocumentUnload, {\n      when: this.hasChanges.bind(this)\n    }, m(\"div\", {\n      className: classList('ComposerBody', this.attrs.className)\n    }, avatar(this.attrs.user, {\n      className: 'ComposerBody-avatar'\n    }), m(\"div\", {\n      className: \"ComposerBody-content\"\n    }, m(\"ul\", {\n      className: \"ComposerBody-header\"\n    }, listItems(this.headerItems().toArray())), m(\"div\", {\n      className: \"ComposerBody-editor\"\n    }, m(TextEditor, {\n      submitLabel: this.attrs.submitLabel,\n      placeholder: this.attrs.placeholder,\n      disabled: this.loading || this.attrs.disabled,\n      composer: this.composer,\n      preview: (_this$jumpToPreview = this.jumpToPreview) == null ? void 0 : _this$jumpToPreview.bind(this),\n      onchange: this.composer.fields.content,\n      onsubmit: this.onsubmit.bind(this),\n      value: this.composer.fields.content()\n    }))), m(LoadingIndicator, {\n      display: \"unset\",\n      containerClassName: classList('ComposerBody-loading', this.loading && 'active'),\n      size: \"large\"\n    })));\n  }\n\n  /**\n   * Check if there is any unsaved data.\n   *\n   * @return {boolean}\n   */\n  hasChanges() {\n    const content = this.composer.fields.content();\n    return content && content !== this.attrs.originalContent;\n  }\n\n  /**\n   * Build an item list for the composer's header.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  headerItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle the submit event of the text editor.\n   *\n   * @abstract\n   */\n  onsubmit() {}\n\n  /**\n   * Stop loading.\n   */\n  loaded() {\n    this.loading = false;\n    m.redraw();\n  }\n}\nflarum.reg.add('core', 'forum/components/ComposerBody', ComposerBody);","import app from '../../forum/app';\nimport ComposerBody from './ComposerBody';\nimport extractText from '../../common/utils/extractText';\nimport Stream from '../../common/utils/Stream';\n\n/**\n * The `DiscussionComposer` component displays the composer content for starting\n * a new discussion. It adds a text field as a header control so the user can\n * enter the title of their discussion. It also overrides the `submit` and\n * `willExit` actions to account for the title.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `titlePlaceholder`\n */\nexport default class DiscussionComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.placeholder = attrs.placeholder || extractText(app.translator.trans('core.forum.composer_discussion.body_placeholder'));\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_discussion.submit_button');\n    attrs.confirmExit = attrs.confirmExit || extractText(app.translator.trans('core.forum.composer_discussion.discard_confirmation'));\n    attrs.titlePlaceholder = attrs.titlePlaceholder || extractText(app.translator.trans('core.forum.composer_discussion.title_placeholder'));\n    attrs.className = 'ComposerBody--discussion';\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.composer.fields.title = this.composer.fields.title || Stream('');\n\n    /**\n     * The value of the title input.\n     *\n     * @type {Function}\n     */\n    this.title = this.composer.fields.title;\n  }\n  headerItems() {\n    const items = super.headerItems();\n    items.add('title', m(\"h3\", null, app.translator.trans('core.forum.composer_discussion.title')), 100);\n    items.add('discussionTitle', m(\"h3\", null, m(\"input\", {\n      className: \"FormControl\",\n      bidi: this.title,\n      placeholder: this.attrs.titlePlaceholder,\n      disabled: !!this.attrs.disabled,\n      onkeydown: this.onkeydown.bind(this)\n    })));\n    return items;\n  }\n\n  /**\n   * Handle the title input's keydown event. When the return key is pressed,\n   * move the focus to the start of the text editor.\n   *\n   * @param {KeyboardEvent} e\n   */\n  onkeydown(e) {\n    if (e.which === 13) {\n      // Return\n      e.preventDefault();\n      this.composer.editor.moveCursorTo(0);\n    }\n    e.redraw = false;\n  }\n  hasChanges() {\n    return this.title() || this.composer.fields.content();\n  }\n\n  /**\n   * Get the data to submit to the server when the discussion is saved.\n   *\n   * @return {Record<string, unknown>}\n   */\n  data() {\n    return {\n      title: this.title(),\n      content: this.composer.fields.content()\n    };\n  }\n  onsubmit() {\n    this.loading = true;\n    const data = this.data();\n    app.store.createRecord('discussions').save(data).then(discussion => {\n      this.composer.hide();\n      app.discussions.refresh();\n      m.route.set(app.route.discussion(discussion));\n    }, this.loaded.bind(this));\n  }\n}\nflarum.reg.add('core', 'forum/components/DiscussionComposer', DiscussionComposer);"],"names":["ConfirmDocumentUnload","Component","handler","this","attrs","when","undefined","oncreate","vnode","super","boundHandler","bind","$","window","on","onremove","off","view","m","children","flarum","reg","add","TextEditor","oninit","value","disabled","loading","_loaders","className","LoadingIndicator","listItems","controlItems","toArray","toolbarItems","_load","then","setTimeout","onbuild","composer","editor","buildEditor","onupdate","newDisabled","Promise","all","map","loader","redraw","buildEditorParams","classNames","placeholder","oninput","inputListeners","onsubmit","dom","BasicEditorDriver","items","ItemList","Button","icon","itemClassName","onclick","submitLabel","preview","Tooltip","text","app","onchange","ComposerBody","confirmExit","preventClosingWhen","hasChanges","fields","content","originalContent","_this$jumpToPreview","classList","avatar","user","headerItems","jumpToPreview","display","containerClassName","size","loaded","DiscussionComposer","static","initAttrs","titlePlaceholder","title","bidi","onkeydown","e","which","preventDefault","moveCursorTo","data","save","discussion","hide","route","set"],"sourceRoot":""}