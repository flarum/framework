{"version":3,"file":"forum/components/PostStreamScrubber.js","mappings":"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","sources":["webpack://@flarum/core/./src/forum/components/PostStreamScrubber.js"],"sourcesContent":["import app from '../../forum/app';\nimport Component from '../../common/Component';\nimport formatNumber from '../../common/utils/formatNumber';\nimport ScrollListener from '../../common/utils/ScrollListener';\nimport Icon from '../../common/components/Icon';\n\n/**\n * The `PostStreamScrubber` component displays a scrubber which can be used to\n * navigate/scrub through a post stream.\n *\n * ### Attrs\n *\n * - `stream`\n * - `className`\n */\nexport default class PostStreamScrubber extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.stream = this.attrs.stream;\n    this.handlers = {};\n    this.scrollListener = new ScrollListener(this.updateScrubberValues.bind(this, {\n      fromScroll: true,\n      forceHeightChange: true\n    }));\n  }\n  view() {\n    const count = this.stream.count();\n\n    // Index is left blank for performance reasons, it is filled in in updateScubberValues\n    const viewing = app.translator.trans('core.forum.post_scrubber.viewing_text', {\n      count,\n      index: m(\"span\", {\n        className: \"Scrubber-index\"\n      }),\n      formattedCount: m(\"span\", {\n        className: \"Scrubber-count\"\n      }, formatNumber(count))\n    });\n    const unreadCount = this.stream.discussion.unreadCount();\n    const unreadPercent = count ? Math.min(count - this.stream.index, unreadCount) / count : 0;\n    function styleUnread(vnode) {\n      const $element = $(vnode.dom);\n      const newStyle = {\n        top: 100 - unreadPercent * 100 + '%',\n        height: unreadPercent * 100 + '%',\n        opacity: unreadPercent ? 1 : 0\n      };\n      if (vnode.state.oldStyle) {\n        $element.stop(true).css(vnode.state.oldStyle).animate(newStyle);\n      } else {\n        $element.css(newStyle);\n      }\n      vnode.state.oldStyle = newStyle;\n    }\n    const classNames = ['PostStreamScrubber', 'Dropdown'];\n    if (this.attrs.className) classNames.push(this.attrs.className);\n    return m(\"div\", {\n      className: classNames.join(' ')\n    }, m(\"button\", {\n      className: \"Button Dropdown-toggle\",\n      \"data-toggle\": \"dropdown\"\n    }, viewing, \" \", m(Icon, {\n      name: 'fas fa-sort'\n    })), m(\"div\", {\n      className: \"Dropdown-menu dropdown-menu\"\n    }, m(\"div\", {\n      className: \"Scrubber\"\n    }, m(\"a\", {\n      className: \"Scrubber-first\",\n      onclick: this.goToFirst.bind(this)\n    }, m(Icon, {\n      name: 'fas fa-angle-double-up'\n    }), \" \", app.translator.trans('core.forum.post_scrubber.original_post_link')), m(\"div\", {\n      className: \"Scrubber-scrollbar\"\n    }, m(\"div\", {\n      className: \"Scrubber-before\"\n    }), m(\"div\", {\n      className: \"Scrubber-handle\"\n    }, m(\"div\", {\n      className: \"Scrubber-bar\"\n    }), m(\"div\", {\n      className: \"Scrubber-info\"\n    }, m(\"strong\", null, viewing), m(\"span\", {\n      className: \"Scrubber-description\"\n    }))), m(\"div\", {\n      className: \"Scrubber-after\"\n    }), m(\"div\", {\n      className: \"Scrubber-unread\",\n      oncreate: styleUnread,\n      onupdate: styleUnread\n    }, app.translator.trans('core.forum.post_scrubber.unread_text', {\n      count: unreadCount\n    }))), m(\"a\", {\n      className: \"Scrubber-last\",\n      onclick: this.goToLast.bind(this)\n    }, m(Icon, {\n      name: 'fas fa-angle-double-down'\n    }), \" \", app.translator.trans('core.forum.post_scrubber.now_link')))));\n  }\n  onupdate(vnode) {\n    super.onupdate(vnode);\n    if (this.stream.forceUpdateScrubber) {\n      this.stream.forceUpdateScrubber = false;\n      this.stream.loadPromise.then(() => this.updateScrubberValues({\n        animate: true,\n        forceHeightChange: true\n      }));\n    }\n  }\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // Whenever the window is resized, adjust the height of the scrollbar\n    // so that it fills the height of the sidebar.\n    $(window).on('resize', this.handlers.onresize = this.onresize.bind(this)).resize();\n\n    // When any part of the whole scrollbar is clicked, we want to jump to\n    // that position.\n    this.$('.Scrubber-scrollbar').bind('click', this.onclick.bind(this))\n\n    // Now we want to make the scrollbar handle draggable. Let's start by\n    // preventing default browser events from messing things up.\n    .bind('dragstart mousedown touchstart', e => e.preventDefault());\n\n    // When the mouse is pressed on the scrollbar handle, we capture some\n    // information about its current position. We will store this\n    // information in an object and pass it on to the document's\n    // mousemove/mouseup events later.\n    this.dragging = false;\n    this.mouseStart = 0;\n    this.indexStart = 0;\n    this.$('.Scrubber-handle').bind('mousedown touchstart', this.onmousedown.bind(this))\n\n    // Exempt the scrollbar handle from the 'jump to' click event.\n    .click(e => e.stopPropagation());\n\n    // When the mouse moves and when it is released, we pass the\n    // information that we captured when the mouse was first pressed onto\n    // some event handlers. These handlers will move the scrollbar/stream-\n    // content as appropriate.\n    $(document).on('mousemove touchmove', this.handlers.onmousemove = this.onmousemove.bind(this)).on('mouseup touchend', this.handlers.onmouseup = this.onmouseup.bind(this));\n    setTimeout(() => this.scrollListener.start());\n    this.stream.loadPromise.then(() => this.updateScrubberValues({\n      animate: false,\n      forceHeightChange: true\n    }));\n  }\n  onremove(vnode) {\n    super.onremove(vnode);\n    this.scrollListener.stop();\n    $(window).off('resize', this.handlers.onresize);\n    $(document).off('mousemove touchmove', this.handlers.onmousemove).off('mouseup touchend', this.handlers.onmouseup);\n  }\n\n  /**\n   * Update the scrollbar's position to reflect the current values of the\n   * index/visible properties.\n   *\n   * @param {Partial<{fromScroll: boolean, forceHeightChange: boolean, animate: boolean}>} options\n   */\n  updateScrubberValues(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const index = this.stream.index;\n    const count = this.stream.count();\n    const visible = this.stream.visible || 1;\n    const percentPerPost = this.percentPerPost();\n    const $scrubber = this.$();\n    $scrubber.find('.Scrubber-index').text(formatNumber(this.stream.sanitizeIndex(Math.max(1, index))));\n    $scrubber.find('.Scrubber-description').text(this.stream.description);\n    $scrubber.toggleClass('disabled', this.stream.disabled());\n    const heights = {};\n    heights.before = Math.max(0, percentPerPost.index * Math.min(index - 1, count - visible));\n    heights.handle = Math.min(100 - heights.before, percentPerPost.visible * visible);\n    heights.after = 100 - heights.before - heights.handle;\n\n    // If the stream is paused, don't change height on scroll, as the viewport is being scrolled by the JS\n    // If a height change animation is already in progress, don't adjust height unless overriden\n    if (options.fromScroll && this.stream.paused || this.adjustingHeight && !options.forceHeightChange) return;\n    const func = options.animate ? 'animate' : 'css';\n    this.adjustingHeight = true;\n    const animationPromises = [];\n    for (const part in heights) {\n      const $part = $scrubber.find(\".Scrubber-\".concat(part));\n      animationPromises.push($part.stop(true, true)[func]({\n        height: heights[part] + '%'\n      }, 'fast').promise());\n\n      // jQuery likes to put overflow:hidden, but because the scrollbar handle\n      // has a negative margin-left, we need to override.\n      if (func === 'animate') $part.css('overflow', 'visible');\n    }\n    Promise.all(animationPromises).then(() => this.adjustingHeight = false);\n  }\n\n  /**\n   * Go to the first post in the discussion.\n   */\n  goToFirst() {\n    this.stream.goToFirst();\n    this.updateScrubberValues({\n      animate: true,\n      forceHeightChange: true\n    });\n  }\n\n  /**\n   * Go to the last post in the discussion.\n   */\n  goToLast() {\n    this.stream.goToLast();\n    this.updateScrubberValues({\n      animate: true,\n      forceHeightChange: true\n    });\n  }\n  onresize() {\n    // Adjust the height of the scrollbar so that it fills the height of\n    // the sidebar and doesn't overlap the footer.\n    const scrubber = this.$();\n    const scrollbar = this.$('.Scrubber-scrollbar');\n    scrollbar.css('max-height', $(window).height() - scrubber.offset().top + $(window).scrollTop() - parseInt($('#app').css('padding-bottom'), 10) - (scrubber.outerHeight() - scrollbar.outerHeight()));\n  }\n  onmousedown(e) {\n    e.redraw = false;\n    this.mouseStart = e.clientY || e.originalEvent.touches[0].clientY;\n    this.indexStart = this.stream.index;\n    this.dragging = true;\n    $('body').css('cursor', 'move');\n    this.$().toggleClass('dragging', this.dragging);\n  }\n  onmousemove(e) {\n    if (!this.dragging) return;\n\n    // Work out how much the mouse has moved by - first in pixels, then\n    // convert it to a percentage of the scrollbar's height, and then\n    // finally convert it into an index. Add this delta index onto\n    // the index at which the drag was started, and then scroll there.\n    const deltaPixels = (e.clientY || e.originalEvent.touches[0].clientY) - this.mouseStart;\n    const deltaPercent = deltaPixels / this.$('.Scrubber-scrollbar').outerHeight() * 100;\n    const deltaIndex = deltaPercent / this.percentPerPost().index || 0;\n    const newIndex = Math.min(this.indexStart + deltaIndex, this.stream.count() - 1);\n    this.stream.index = Math.max(0, newIndex);\n    this.updateScrubberValues();\n  }\n  onmouseup() {\n    this.$().toggleClass('dragging', this.dragging);\n    if (!this.dragging) return;\n    this.mouseStart = 0;\n    this.indexStart = 0;\n    this.dragging = false;\n    $('body').css('cursor', '');\n    this.$().removeClass('open');\n\n    // If the index we've landed on is in a gap, then tell the stream-\n    // content that we want to load those posts.\n    const intIndex = Math.floor(this.stream.index);\n    this.stream.goToIndex(intIndex);\n  }\n  onclick(e) {\n    // Calculate the index which we want to jump to based on the click position.\n\n    // 1. Get the offset of the click from the top of the scrollbar, as a\n    //    percentage of the scrollbar's height.\n    const $scrollbar = this.$('.Scrubber-scrollbar');\n    const offsetPixels = (e.pageY || e.originalEvent.touches[0].pageY) - $scrollbar.offset().top + $('body').scrollTop();\n    let offsetPercent = offsetPixels / $scrollbar.outerHeight() * 100;\n\n    // 2. We want the handle of the scrollbar to end up centered on the click\n    //    position. Thus, we calculate the height of the handle in percent and\n    //    use that to find a new offset percentage.\n    offsetPercent = offsetPercent - parseFloat($scrollbar.find('.Scrubber-handle')[0].style.height) / 2;\n\n    // 3. Now we can convert the percentage into an index, and tell the stream-\n    //    content component to jump to that index.\n    let offsetIndex = offsetPercent / this.percentPerPost().index;\n    offsetIndex = Math.max(0, Math.min(this.stream.count() - 1, offsetIndex));\n    this.stream.goToIndex(Math.floor(offsetIndex));\n    this.updateScrubberValues({\n      animate: true,\n      forceHeightChange: true\n    });\n    this.$().removeClass('open');\n  }\n\n  /**\n   * Get the percentage of the height of the scrubber that should be allocated\n   * to each post.\n   *\n   * @return {{ index: number, visible: number }}\n   * @property {Number} index The percent per post for posts on either side of\n   *     the visible part of the scrubber.\n   * @property {Number} visible The percent per post for the visible part of the\n   *     scrubber.\n   */\n  percentPerPost() {\n    const count = this.stream.count() || 1;\n    const visible = this.stream.visible || 1;\n\n    // To stop the handle of the scrollbar from getting too small when there\n    // are many posts, we define a minimum percentage height for the handle\n    // calculated from a 50 pixel limit. From this, we can calculate the\n    // minimum percentage per visible post. If this is greater than the actual\n    // percentage per post, then we need to adjust the 'before' percentage to\n    // account for it.\n    const minPercentVisible = 50 / this.$('.Scrubber-scrollbar').outerHeight() * 100;\n    const percentPerVisiblePost = Math.max(100 / count, minPercentVisible / visible);\n    const percentPerPost = count === visible ? 0 : (100 - percentPerVisiblePost * visible) / (count - visible);\n    return {\n      index: percentPerPost,\n      visible: percentPerVisiblePost\n    };\n  }\n}\nflarum.reg.add('core', 'forum/components/PostStreamScrubber', PostStreamScrubber);"],"names":["PostStreamScrubber","oninit","vnode","super","this","stream","attrs","handlers","scrollListener","updateScrubberValues","bind","fromScroll","forceHeightChange","view","count","viewing","index","m","className","formattedCount","unreadCount","discussion","unreadPercent","Math","min","styleUnread","$element","$","dom","newStyle","top","height","opacity","state","oldStyle","stop","css","animate","classNames","push","join","name","onclick","goToFirst","oncreate","onupdate","goToLast","forceUpdateScrubber","loadPromise","then","window","on","onresize","resize","e","preventDefault","dragging","mouseStart","indexStart","onmousedown","click","stopPropagation","document","onmousemove","onmouseup","setTimeout","start","onremove","off","options","visible","percentPerPost","$scrubber","find","text","sanitizeIndex","max","description","toggleClass","disabled","heights","before","handle","after","paused","adjustingHeight","func","animationPromises","part","$part","concat","promise","Promise","all","scrubber","scrollbar","offset","scrollTop","parseInt","outerHeight","redraw","clientY","originalEvent","touches","deltaIndex","newIndex","removeClass","intIndex","floor","goToIndex","$scrollbar","offsetPercent","pageY","parseFloat","style","offsetIndex","minPercentVisible","percentPerVisiblePost","flarum","reg","add"],"sourceRoot":""}