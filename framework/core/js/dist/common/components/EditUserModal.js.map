{"version":3,"file":"common/components/EditUserModal.js","mappings":"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","sources":["webpack://@flarum/core/./src/common/components/EditUserModal.tsx"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../common/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from './Button';\nimport GroupBadge from './GroupBadge';\nimport Group from '../models/Group';\nimport extractText from '../utils/extractText';\nimport ItemList from '../utils/ItemList';\nimport Stream from '../utils/Stream';\nimport Form from './Form';\nexport default class EditUserModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"username\", void 0);\n    _defineProperty(this, \"email\", void 0);\n    _defineProperty(this, \"isEmailConfirmed\", void 0);\n    _defineProperty(this, \"setPassword\", void 0);\n    _defineProperty(this, \"password\", void 0);\n    _defineProperty(this, \"groups\", {});\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    const user = this.attrs.user;\n    this.username = Stream(user.username() || '');\n    this.email = Stream(user.email() || '');\n    this.isEmailConfirmed = Stream(user.isEmailConfirmed() || false);\n    this.setPassword = Stream(false);\n    this.password = Stream(user.password() || '');\n    const userGroups = user.groups() || [];\n    app.store.all('groups').filter(group => ![Group.GUEST_ID, Group.MEMBER_ID].includes(group.id())).forEach(group => this.groups[group.id()] = Stream(userGroups.includes(group)));\n  }\n  className() {\n    return 'EditUserModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.lib.edit_user.title');\n  }\n  content() {\n    const fields = this.fields().toArray();\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, fields.length > 1 ? m(Form, null, this.fields().toArray()) : app.translator.trans('core.lib.edit_user.nothing_available'));\n  }\n  fields() {\n    const items = new ItemList();\n    if (this.attrs.user.canEditCredentials()) {\n      items.add('username', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"label\", null, app.translator.trans('core.lib.edit_user.username_heading')), m(\"input\", {\n        className: \"FormControl\",\n        placeholder: extractText(app.translator.trans('core.lib.edit_user.username_label')),\n        bidi: this.username,\n        disabled: this.nonAdminEditingAdmin()\n      })), 40);\n      if (app.session.user !== this.attrs.user) {\n        items.add('email', m(\"div\", {\n          className: \"Form-group\"\n        }, m(\"label\", null, app.translator.trans('core.lib.edit_user.email_heading')), m(\"input\", {\n          className: \"FormControl\",\n          placeholder: extractText(app.translator.trans('core.lib.edit_user.email_label')),\n          bidi: this.email,\n          disabled: this.nonAdminEditingAdmin()\n        }), !this.isEmailConfirmed() && this.userIsAdmin(app.session.user) && m(Button, {\n          className: \"Button Button--block\",\n          loading: this.loading,\n          onclick: this.activate.bind(this)\n        }, app.translator.trans('core.lib.edit_user.activate_button'))), 30);\n        items.add('password', m(\"div\", {\n          className: \"Form-group\"\n        }, m(\"label\", null, app.translator.trans('core.lib.edit_user.password_heading')), m(\"div\", null, m(\"label\", {\n          className: \"checkbox\"\n        }, m(\"input\", {\n          type: \"checkbox\",\n          onchange: e => {\n            const target = e.target;\n            this.setPassword(target.checked);\n            m.redraw.sync();\n            if (target.checked) this.$('[name=password]').select();\n            e.redraw = false;\n          },\n          disabled: this.nonAdminEditingAdmin()\n        }), app.translator.trans('core.lib.edit_user.set_password_label'))), this.setPassword() && m(\"input\", {\n          className: \"FormControl\",\n          type: \"password\",\n          name: \"password\",\n          placeholder: extractText(app.translator.trans('core.lib.edit_user.password_label')),\n          bidi: this.password,\n          disabled: this.nonAdminEditingAdmin()\n        })), 20);\n      }\n    }\n    if (this.attrs.user.canEditGroups()) {\n      items.add('groups', m(\"div\", {\n        className: \"Form-group EditUserModal-groups\"\n      }, m(\"label\", null, app.translator.trans('core.lib.edit_user.groups_heading')), m(\"div\", null, Object.keys(this.groups).map(id => app.store.getById('groups', id)).filter(Boolean).map(group =>\n      // Necessary because filter(Boolean) doesn't narrow out falsy values.\n      group && m(\"label\", {\n        className: \"checkbox\"\n      }, m(\"input\", {\n        type: \"checkbox\",\n        bidi: this.groups[group.id()],\n        disabled: group.id() === Group.ADMINISTRATOR_ID && (this.attrs.user === app.session.user || !this.userIsAdmin(app.session.user))\n      }), m(GroupBadge, {\n        group: group,\n        label: null\n      }), \" \", group.nameSingular())))), 10);\n    }\n    items.add('submit', m(\"div\", {\n      className: \"Form-group Form-controls\"\n    }, m(Button, {\n      className: \"Button Button--primary\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.lib.edit_user.submit_button'))), -10);\n    return items;\n  }\n  activate() {\n    this.loading = true;\n    const data = {\n      username: this.username(),\n      isEmailConfirmed: true\n    };\n    this.attrs.user.save(data, {\n      errorHandler: this.onerror.bind(this)\n    }).then(() => {\n      this.isEmailConfirmed(true);\n      this.loading = false;\n      m.redraw();\n    }).catch(() => {\n      this.loading = false;\n      m.redraw();\n    });\n  }\n  data() {\n    const data = {};\n    const relationships = {};\n    if (this.attrs.user.canEditCredentials() && !this.nonAdminEditingAdmin()) {\n      data.username = this.username();\n      if (app.session.user !== this.attrs.user) {\n        data.email = this.email();\n      }\n      if (this.setPassword()) {\n        data.password = this.password();\n      }\n    }\n    if (this.attrs.user.canEditGroups()) {\n      relationships.groups = Object.keys(this.groups).filter(id => this.groups[id]()).map(id => app.store.getById('groups', id)).filter(g => g instanceof Group);\n    }\n    data.relationships = relationships;\n    return data;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    this.attrs.user.save(this.data(), {\n      errorHandler: this.onerror.bind(this)\n    }).then(this.hide.bind(this)).catch(() => {\n      this.loading = false;\n      m.redraw();\n    });\n  }\n  nonAdminEditingAdmin() {\n    return this.userIsAdmin(this.attrs.user) && !this.userIsAdmin(app.session.user);\n  }\n\n  /**\n   * @internal\n   */\n  userIsAdmin(user) {\n    return !!((user == null ? void 0 : user.groups()) || []).some(g => (g == null ? void 0 : g.id()) === Group.ADMINISTRATOR_ID);\n  }\n}\nflarum.reg.add('core', 'common/components/EditUserModal', EditUserModal);"],"names":["EditUserModal","constructor","super","arguments","this","oninit","vnode","user","attrs","username","email","isEmailConfirmed","setPassword","password","userGroups","groups","filter","group","includes","id","forEach","className","title","content","fields","toArray","m","length","items","canEditCredentials","add","placeholder","bidi","disabled","nonAdminEditingAdmin","userIsAdmin","loading","onclick","activate","bind","type","onchange","e","target","checked","redraw","sync","$","select","name","canEditGroups","Object","keys","map","Boolean","label","nameSingular","data","save","errorHandler","onerror","then","catch","relationships","g","onsubmit","preventDefault","hide","some","flarum","reg"],"sourceRoot":""}