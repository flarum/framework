{"version":3,"file":"common/components/EditUserModal.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAwE;AACrC;AACuB;AAC5B;AACQ;AACF;AACW;AACN;AACJ;AACX;AACX,4BAA4B,oEAAS;AACpD;AACA;AACA,IAAI,qFAAe;AACnB,IAAI,qFAAe;AACnB,IAAI,qFAAe;AACnB,IAAI,qFAAe;AACnB,IAAI,qFAAe;AACnB,IAAI,qFAAe,mBAAmB;AACtC;AACA;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B,iBAAiB,yDAAM;AACvB,4BAA4B,yDAAM;AAClC,uBAAuB,yDAAM;AAC7B,oBAAoB,yDAAM;AAC1B;AACA,IAAI,6DAAa,6BAA6B,8DAAc,EAAE,+DAAe,mEAAmE,yDAAM;AACtJ;AACA;AACA;AACA;AACA;AACA,WAAW,oEAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK,wBAAwB,6CAAI,mCAAmC,oEAAoB;AACxF;AACA;AACA,sBAAsB,uDAAQ;AAC9B;AACA;AACA;AACA,OAAO,mBAAmB,oEAAoB;AAC9C;AACA,qBAAqB,8DAAW,CAAC,oEAAoB;AACrD;AACA;AACA,OAAO;AACP,UAAU,gEAAgB;AAC1B;AACA;AACA,SAAS,mBAAmB,oEAAoB;AAChD;AACA,uBAAuB,8DAAW,CAAC,oEAAoB;AACvD;AACA;AACA,SAAS,gDAAgD,gEAAgB,OAAO,+CAAM;AACtF;AACA;AACA;AACA,SAAS,EAAE,oEAAoB;AAC/B;AACA;AACA,SAAS,mBAAmB,oEAAoB;AAChD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS,GAAG,oEAAoB;AAChC;AACA;AACA;AACA,uBAAuB,8DAAW,CAAC,oEAAoB;AACvD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO,mBAAmB,oEAAoB,0FAA0F,iEAAiB;AACzJ;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,iCAAiC,sEAAsB,yBAAyB,gEAAgB,sBAAsB,gEAAgB;AACtI,OAAO,KAAK,mDAAU;AACtB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK,IAAI,+CAAM;AACf;AACA;AACA;AACA,KAAK,EAAE,oEAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,gEAAgB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,iEAAiB,yCAAyC,qDAAK;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,kEAAkE,gEAAgB;AAClF;;AAEA;AACA;AACA;AACA;AACA,yGAAyG,sEAAsB;AAC/H;AACA;AACA","sources":["webpack://@flarum/core/./src/common/components/EditUserModal.tsx"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from '../../common/app';\nimport FormModal from '../../common/components/FormModal';\nimport Button from './Button';\nimport GroupBadge from './GroupBadge';\nimport Group from '../models/Group';\nimport extractText from '../utils/extractText';\nimport ItemList from '../utils/ItemList';\nimport Stream from '../utils/Stream';\nimport Form from './Form';\nexport default class EditUserModal extends FormModal {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"username\", void 0);\n    _defineProperty(this, \"email\", void 0);\n    _defineProperty(this, \"isEmailConfirmed\", void 0);\n    _defineProperty(this, \"setPassword\", void 0);\n    _defineProperty(this, \"password\", void 0);\n    _defineProperty(this, \"groups\", {});\n  }\n  oninit(vnode) {\n    super.oninit(vnode);\n    const user = this.attrs.user;\n    this.username = Stream(user.username() || '');\n    this.email = Stream(user.email() || '');\n    this.isEmailConfirmed = Stream(user.isEmailConfirmed() || false);\n    this.setPassword = Stream(false);\n    this.password = Stream(user.password() || '');\n    const userGroups = user.groups() || [];\n    app.store.all('groups').filter(group => ![Group.GUEST_ID, Group.MEMBER_ID].includes(group.id())).forEach(group => this.groups[group.id()] = Stream(userGroups.includes(group)));\n  }\n  className() {\n    return 'EditUserModal Modal--small';\n  }\n  title() {\n    return app.translator.trans('core.lib.edit_user.title');\n  }\n  content() {\n    const fields = this.fields().toArray();\n    return m(\"div\", {\n      className: \"Modal-body\"\n    }, fields.length > 1 ? m(Form, null, this.fields().toArray()) : app.translator.trans('core.lib.edit_user.nothing_available'));\n  }\n  fields() {\n    const items = new ItemList();\n    if (this.attrs.user.canEditCredentials()) {\n      items.add('username', m(\"div\", {\n        className: \"Form-group\"\n      }, m(\"label\", null, app.translator.trans('core.lib.edit_user.username_heading')), m(\"input\", {\n        className: \"FormControl\",\n        placeholder: extractText(app.translator.trans('core.lib.edit_user.username_label')),\n        bidi: this.username,\n        disabled: this.nonAdminEditingAdmin()\n      })), 40);\n      if (app.session.user !== this.attrs.user) {\n        items.add('email', m(\"div\", {\n          className: \"Form-group\"\n        }, m(\"label\", null, app.translator.trans('core.lib.edit_user.email_heading')), m(\"input\", {\n          className: \"FormControl\",\n          placeholder: extractText(app.translator.trans('core.lib.edit_user.email_label')),\n          bidi: this.email,\n          disabled: this.nonAdminEditingAdmin()\n        }), !this.isEmailConfirmed() && this.userIsAdmin(app.session.user) && m(Button, {\n          className: \"Button Button--block\",\n          loading: this.loading,\n          onclick: this.activate.bind(this)\n        }, app.translator.trans('core.lib.edit_user.activate_button'))), 30);\n        items.add('password', m(\"div\", {\n          className: \"Form-group\"\n        }, m(\"label\", null, app.translator.trans('core.lib.edit_user.password_heading')), m(\"div\", null, m(\"label\", {\n          className: \"checkbox\"\n        }, m(\"input\", {\n          type: \"checkbox\",\n          onchange: e => {\n            const target = e.target;\n            this.setPassword(target.checked);\n            m.redraw.sync();\n            if (target.checked) this.$('[name=password]').select();\n            e.redraw = false;\n          },\n          disabled: this.nonAdminEditingAdmin()\n        }), app.translator.trans('core.lib.edit_user.set_password_label'))), this.setPassword() && m(\"input\", {\n          className: \"FormControl\",\n          type: \"password\",\n          name: \"password\",\n          placeholder: extractText(app.translator.trans('core.lib.edit_user.password_label')),\n          bidi: this.password,\n          disabled: this.nonAdminEditingAdmin()\n        })), 20);\n      }\n    }\n    if (this.attrs.user.canEditGroups()) {\n      items.add('groups', m(\"div\", {\n        className: \"Form-group EditUserModal-groups\"\n      }, m(\"label\", null, app.translator.trans('core.lib.edit_user.groups_heading')), m(\"div\", null, Object.keys(this.groups).map(id => app.store.getById('groups', id)).filter(Boolean).map(group =>\n      // Necessary because filter(Boolean) doesn't narrow out falsy values.\n      group && m(\"label\", {\n        className: \"checkbox\"\n      }, m(\"input\", {\n        type: \"checkbox\",\n        bidi: this.groups[group.id()],\n        disabled: group.id() === Group.ADMINISTRATOR_ID && (this.attrs.user === app.session.user || !this.userIsAdmin(app.session.user))\n      }), m(GroupBadge, {\n        group: group,\n        label: null\n      }), \" \", group.nameSingular())))), 10);\n    }\n    items.add('submit', m(\"div\", {\n      className: \"Form-group Form-controls\"\n    }, m(Button, {\n      className: \"Button Button--primary\",\n      type: \"submit\",\n      loading: this.loading\n    }, app.translator.trans('core.lib.edit_user.submit_button'))), -10);\n    return items;\n  }\n  activate() {\n    this.loading = true;\n    const data = {\n      username: this.username(),\n      isEmailConfirmed: true\n    };\n    this.attrs.user.save(data, {\n      errorHandler: this.onerror.bind(this)\n    }).then(() => {\n      this.isEmailConfirmed(true);\n      this.loading = false;\n      m.redraw();\n    }).catch(() => {\n      this.loading = false;\n      m.redraw();\n    });\n  }\n  data() {\n    const data = {};\n    const relationships = {};\n    if (this.attrs.user.canEditCredentials() && !this.nonAdminEditingAdmin()) {\n      data.username = this.username();\n      if (app.session.user !== this.attrs.user) {\n        data.email = this.email();\n      }\n      if (this.setPassword()) {\n        data.password = this.password();\n      }\n    }\n    if (this.attrs.user.canEditGroups()) {\n      relationships.groups = Object.keys(this.groups).filter(id => this.groups[id]()).map(id => app.store.getById('groups', id)).filter(g => g instanceof Group);\n    }\n    data.relationships = relationships;\n    return data;\n  }\n  onsubmit(e) {\n    e.preventDefault();\n    this.loading = true;\n    this.attrs.user.save(this.data(), {\n      errorHandler: this.onerror.bind(this)\n    }).then(this.hide.bind(this)).catch(() => {\n      this.loading = false;\n      m.redraw();\n    });\n  }\n  nonAdminEditingAdmin() {\n    return this.userIsAdmin(this.attrs.user) && !this.userIsAdmin(app.session.user);\n  }\n\n  /**\n   * @internal\n   */\n  userIsAdmin(user) {\n    return !!((user == null ? void 0 : user.groups()) || []).some(g => (g == null ? void 0 : g.id()) === Group.ADMINISTRATOR_ID);\n  }\n}\nflarum.reg.add('core', 'common/components/EditUserModal', EditUserModal);"],"names":[],"sourceRoot":""}