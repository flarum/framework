{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flarum/lock/webpack/bootstrap","webpack://@flarum/lock/webpack/runtime/compat get default export","webpack://@flarum/lock/webpack/runtime/define property getters","webpack://@flarum/lock/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/lock/webpack/runtime/make namespace object","webpack://@flarum/lock/external root \"flarum.core.compat['common/extend']\"","webpack://@flarum/lock/external root \"flarum.core.compat['forum/app']\"","webpack://@flarum/lock/external root \"flarum.core.compat['forum/components/NotificationGrid']\"","webpack://@flarum/lock/../../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@flarum/lock/../../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flarum/lock/external root \"flarum.core.compat['forum/components/Notification']\"","webpack://@flarum/lock/./src/forum/components/DiscussionLockedNotification.js","webpack://@flarum/lock/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@flarum/lock/external root \"flarum.core.compat['common/components/Badge']\"","webpack://@flarum/lock/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@flarum/lock/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@flarum/lock/external root \"flarum.core.compat['common/components/Button']\"","webpack://@flarum/lock/external root \"flarum.core.compat['common/extenders']\"","webpack://@flarum/lock/external root \"flarum.core.compat['forum/components/EventPost']\"","webpack://@flarum/lock/./src/forum/components/DiscussionLockedPost.js","webpack://@flarum/lock/./src/forum/extend.ts","webpack://@flarum/lock/./src/forum/index.js","webpack://@flarum/lock/./src/forum/addLockBadge.js","webpack://@flarum/lock/./src/forum/addLockControl.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/NotificationGrid'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Notification'];","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\n\nexport default class DiscussionLockedNotification extends Notification {\n  icon() {\n    return 'fas fa-lock';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n\n    return app.route.discussion(notification.subject(), notification.content().postNumber);\n  }\n\n  content() {\n    return app.translator.trans('flarum-lock.forum.notifications.discussion_locked_text', { user: this.attrs.notification.fromUser() });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Badge'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extenders'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/EventPost'];","import EventPost from 'flarum/forum/components/EventPost';\n\nexport default class DiscussionLockedPost extends EventPost {\n  icon() {\n    return this.attrs.post.content().locked ? 'fas fa-lock' : 'fas fa-unlock';\n  }\n\n  descriptionKey() {\n    return this.attrs.post.content().locked\n      ? 'flarum-lock.forum.post_stream.discussion_locked_text'\n      : 'flarum-lock.forum.post_stream.discussion_unlocked_text';\n  }\n}\n","import Extend from 'flarum/common/extenders';\nimport Discussion from 'flarum/common/models/Discussion';\nimport DiscussionLockedPost from './components/DiscussionLockedPost';\n\nexport default [\n  new Extend.PostTypes() //\n    .add('discussionLocked', DiscussionLockedPost),\n\n  new Extend.Model(Discussion) //\n    .attribute<boolean>('isLocked')\n    .attribute<boolean>('canLock'),\n];\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport NotificationGrid from 'flarum/forum/components/NotificationGrid';\n\nimport DiscussionLockedNotification from './components/DiscussionLockedNotification';\nimport addLockBadge from './addLockBadge';\nimport addLockControl from './addLockControl';\n\nexport { default as extend } from './extend';\n\napp.initializers.add('flarum-lock', () => {\n  app.notificationComponents.discussionLocked = DiscussionLockedNotification;\n\n  addLockBadge();\n  addLockControl();\n\n  extend(NotificationGrid.prototype, 'notificationTypes', function (items) {\n    items.add('discussionLocked', {\n      name: 'discussionLocked',\n      icon: 'fas fa-lock',\n      label: app.translator.trans('flarum-lock.forum.settings.notify_discussion_locked_label'),\n    });\n  });\n});\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Badge from 'flarum/common/components/Badge';\n\nexport default function addLockBadge() {\n  extend(Discussion.prototype, 'badges', function (badges) {\n    if (this.isLocked()) {\n      badges.add('locked', <Badge type=\"locked\" label={app.translator.trans('flarum-lock.forum.badge.locked_tooltip')} icon=\"fas fa-lock\" />);\n    }\n  });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function addLockControl() {\n  extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n    if (discussion.canLock()) {\n      items.add(\n        'lock',\n        <Button icon=\"fas fa-lock\" onclick={this.lockAction.bind(discussion)}>\n          {app.translator.trans(`flarum-lock.forum.discussion_controls.${discussion.isLocked() ? 'unlock' : 'lock'}_button`)}\n        </Button>\n      );\n    }\n  });\n\n  DiscussionControls.lockAction = function () {\n    this.save({ isLocked: !this.isLocked() }).then(() => {\n      if (app.current.matches(DiscussionPage)) {\n        app.current.get('stream').update();\n      }\n\n      m.redraw();\n    });\n  };\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","DiscussionLockedNotification","icon","href","notification","this","attrs","app","subject","content","postNumber","user","fromUser","Notification","DiscussionLockedPost","post","locked","descriptionKey","EventPost","Extend","add","Discussion","attribute","extend","badges","isLocked","type","label","DiscussionControls","items","discussion","canLock","onclick","lockAction","save","then","DiscussionPage","update","m","redraw","NotificationGrid","name"],"sourceRoot":""}