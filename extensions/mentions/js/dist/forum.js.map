{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@flarum/mentions/webpack/bootstrap","webpack://@flarum/mentions/webpack/runtime/compat get default export","webpack://@flarum/mentions/webpack/runtime/define property getters","webpack://@flarum/mentions/webpack/runtime/hasOwnProperty shorthand","webpack://@flarum/mentions/webpack/runtime/make namespace object","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/extend')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/app')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/utils/string')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/helpers/textContrastClass')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/components/Post')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/components/CommentPost')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/components/PostPreview')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/LoadingIndicator')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Link')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/helpers/punctuateSeries')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/helpers/username')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Icon')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Button')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Modal')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/states/PaginatedListState')\"","webpack://@flarum/mentions/./src/forum/state/MentionedByModalState.ts","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Form')\"","webpack://@flarum/mentions/./src/forum/components/MentionedByModal.tsx","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/utils/DiscussionControls')\"","webpack://@flarum/mentions/./src/forum/utils/reply.js","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/Fragment')\"","webpack://@flarum/mentions/./src/forum/fragments/PostQuoteButton.js","webpack://@flarum/mentions/./src/forum/utils/selectedText.js","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/TextEditorButton')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/utils/KeyboardNavigatable')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/utils/AutocompleteReader')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/utils/throttleDebounce')\"","webpack://@flarum/mentions/../../../js-packages/webpack-config/node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://@flarum/mentions/../../../js-packages/webpack-config/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@flarum/mentions/../../../js-packages/webpack-config/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://@flarum/mentions/../../../js-packages/webpack-config/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://@flarum/mentions/./src/forum/fragments/AutocompleteDropdown.js","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/Component')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/utils/classList')\"","webpack://@flarum/mentions/./src/forum/components/MentionsDropdownItem.tsx","webpack://@flarum/mentions/./src/forum/mentionables/MentionableModels.tsx","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/components/Notification')\"","webpack://@flarum/mentions/./src/forum/components/PostMentionedNotification.js","webpack://@flarum/mentions/./src/forum/components/UserMentionedNotification.js","webpack://@flarum/mentions/./src/forum/components/GroupMentionedNotification.js","webpack://@flarum/mentions/./src/forum/mentionables/formats/MentionFormat.ts","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Avatar')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/helpers/highlight')\"","webpack://@flarum/mentions/./src/forum/mentionables/MentionableModel.ts","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/utils/extractText')\"","webpack://@flarum/mentions/./src/forum/utils/getCleanDisplayName.js","webpack://@flarum/mentions/./src/forum/mentionables/UserMention.tsx","webpack://@flarum/mentions/./src/forum/mentionables/PostMention.tsx","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/models/Group')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/Badge')\"","webpack://@flarum/mentions/./src/forum/mentionables/GroupMention.tsx","webpack://@flarum/mentions/./src/forum/mentionables/formats/AtMentionFormat.ts","webpack://@flarum/mentions/./src/forum/mentionables/TagMention.tsx","webpack://@flarum/mentions/./src/forum/mentionables/formats/HashMentionFormat.ts","webpack://@flarum/mentions/./src/forum/mentionables/formats/MentionFormats.ts","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/components/UserPage')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/components/LinkButton')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/extenders')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/models/Post')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'common/models/User')\"","webpack://@flarum/mentions/external root \"flarum.reg.get('core', 'forum/components/PostsUserPage')\"","webpack://@flarum/mentions/./src/forum/components/MentionsUserPage.js","webpack://@flarum/mentions/./src/forum/extend.ts","webpack://@flarum/mentions/./src/forum/utils/textFormatter.js","webpack://@flarum/mentions/./src/forum/extenders/Mentionables.ts","webpack://@flarum/mentions/./src/forum/index.js","webpack://@flarum/mentions/./src/forum/addPostMentionPreviews.js","webpack://@flarum/mentions/./src/forum/addMentionedByList.js","webpack://@flarum/mentions/./src/forum/addPostReplyAction.js","webpack://@flarum/mentions/./src/forum/addPostQuoteButton.js","webpack://@flarum/mentions/./src/forum/addComposerAutocomplete.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/extend');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/app');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/utils/string');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/helpers/textContrastClass');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/Post');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/CommentPost');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/PostPreview');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/LoadingIndicator');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Link');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/helpers/punctuateSeries');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/helpers/username');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Icon');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Button');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Modal');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/states/PaginatedListState');","import PaginatedListState from 'flarum/common/states/PaginatedListState';\nexport default class MentionedByModalState extends PaginatedListState {\n  constructor(params, page) {\n    if (page === void 0) {\n      page = 1;\n    }\n    const limit = 10;\n    params.page = {\n      ...(params.page || {}),\n      limit\n    };\n    super(params, page, limit);\n  }\n  get type() {\n    return 'posts';\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/state/MentionedByModalState', MentionedByModalState);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Form');","import app from 'flarum/forum/app';\nimport PostPreview from 'flarum/forum/components/PostPreview';\nimport Modal from 'flarum/common/components/Modal';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nimport Button from 'flarum/common/components/Button';\nimport MentionedByModalState from '../state/MentionedByModalState';\nimport Form from 'flarum/common/components/Form';\nexport default class MentionedByModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.state = new MentionedByModalState({\n      filter: {\n        mentionedPost: this.attrs.post.id()\n      },\n      sort: 'number'\n    });\n    this.state.refresh();\n  }\n  className() {\n    return 'MentionedByModal';\n  }\n  title() {\n    return app.translator.trans('flarum-mentions.forum.mentioned_by.title');\n  }\n  content() {\n    return m('[', null, m(\"div\", {\n      className: \"Modal-body\"\n    }, this.state.isInitialLoading() ? m(LoadingIndicator, null) : m('[', null, m(\"ul\", {\n      className: \"MentionedByModal-list Dropdown-menu Dropdown-menu--inline Post-mentionedBy-preview\"\n    }, this.state.getPages().map(page => page.items.map(reply => m(\"li\", {\n      \"data-number\": reply.number()\n    }, m(PostPreview, {\n      post: reply,\n      onclick: () => app.modal.close()\n    }))))))), this.state.hasNext() && m(\"div\", {\n      className: \"Modal-footer\"\n    }, m(Form, {\n      className: \"Form--centered\"\n    }, m(\"div\", {\n      className: \"Form-group\"\n    }, m(Button, {\n      className: \"Button Button--block\",\n      onclick: () => this.state.loadNext(),\n      loading: this.state.isLoadingNext()\n    }, app.translator.trans('flarum-mentions.forum.mentioned_by.load_more_button'))))));\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/components/MentionedByModal', MentionedByModal);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/utils/DiscussionControls');","import app from 'flarum/forum/app';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nexport function insertMention(post, composer, quote) {\n  return new Promise(resolve => {\n    const mention = app.mentionFormats.mentionable('post').replacement(post) + ' ';\n\n    // If the composer is empty, then assume we're starting a new reply.\n    // In which case we don't want the user to have to confirm if they\n    // close the composer straight away.\n    if (!composer.fields.content()) {\n      composer.body.attrs.originalContent = mention;\n    }\n    const cursorPosition = composer.editor.getSelectionRange()[0];\n    const preceding = composer.fields.content().slice(0, cursorPosition);\n    const precedingNewlines = preceding.length == 0 ? 0 : 3 - preceding.match(/(\\n{0,2})$/)[0].length;\n    composer.editor.insertAtCursor(Array(precedingNewlines).join('\\n') + (\n    // Insert up to two newlines, depending on preceding whitespace\n    quote ? '> ' + mention + quote.trim().replace(/\\n/g, '\\n> ') + '\\n\\n' : mention), false);\n    return resolve(composer);\n  });\n}\nexport default function reply(post, quote) {\n  const EditPostComposer = flarum.reg.checkModule('core', 'forum/components/EditPostComposer');\n  if (EditPostComposer && app.composer.bodyMatches(EditPostComposer) && app.composer.body.attrs.post.discussion() === post.discussion()) {\n    // If we're already editing a post in the discussion of post we're quoting,\n    // insert the mention directly.\n    return insertMention(post, app.composer, quote);\n  } else {\n    // The default \"Reply\" action behavior will only open a new composer if\n    // necessary, but it will always be a ReplyComposer, hence the exceptional\n    // case above.\n    return DiscussionControls.replyAction.call(post.discussion()).then(composer => insertMention(post, composer, quote));\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/utils/reply', reply);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/Fragment');","import app from 'flarum/forum/app';\nimport Fragment from 'flarum/common/Fragment';\nimport Icon from 'flarum/common/components/Icon';\nimport reply from '../utils/reply';\nexport default class PostQuoteButton extends Fragment {\n  constructor(post) {\n    super();\n    this.post = post;\n  }\n  view() {\n    return m(\"button\", {\n      className: \"Button PostQuoteButton\",\n      onclick: () => {\n        reply(this.post, this.content);\n      }\n    }, m(Icon, {\n      name: \"fas fa-quote-left\",\n      className: \"Button-icon\"\n    }), app.translator.trans('flarum-mentions.forum.post.quote_button'));\n  }\n  show(left, top) {\n    const $this = this.$().show();\n    const parentOffset = $this.offsetParent().offset();\n    $this.css('left', left - parentOffset.left).css('top', top - parentOffset.top);\n    this.hideHandler = this.hide.bind(this);\n    $(document).on('mouseup', this.hideHandler);\n  }\n  showStart(left, top) {\n    const $this = this.$();\n    this.show(left, $(window).scrollTop() + top - $this.outerHeight() - 5);\n  }\n  showEnd(right, bottom) {\n    const $this = this.$();\n    this.show(right - $this.outerWidth(), $(window).scrollTop() + bottom + 5);\n  }\n  hide() {\n    this.$().hide();\n    $(document).off('mouseup', this.hideHandler);\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/fragments/PostQuoteButton', PostQuoteButton);","/**\n * Finds the selected text in the provided composer body.\n */\nexport default function selectedText(body) {\n  const selection = window.getSelection();\n  if (!selection.isCollapsed) {\n    const range = selection.getRangeAt(0);\n    const parent = range.commonAncestorContainer;\n    if (body[0] === parent || $.contains(body[0], parent)) {\n      const clone = $('<div>').append(range.cloneContents());\n\n      // Replace emoji images with their shortcode (found in alt attribute)\n      clone.find('img.emoji').replaceWith(function () {\n        return this.alt;\n      });\n\n      // Replace all other images with a Markdown image\n      clone.find('img').replaceWith(function () {\n        return \"![](\".concat(this.src, \")\");\n      });\n\n      // Replace all links with a Markdown link\n      clone.find('a').replaceWith(function () {\n        return \"[\".concat(this.innerText, \"](\").concat(this.href, \")\");\n      });\n      return clone.text();\n    }\n  }\n  return '';\n}\nflarum.reg.add('flarum-mentions', 'forum/utils/selectedText', selectedText);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/TextEditorButton');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/utils/KeyboardNavigatable');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/utils/AutocompleteReader');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/utils/throttleDebounce');","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Fragment from 'flarum/common/Fragment';\nexport default class AutocompleteDropdown extends Fragment {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"items\", []);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"index\", 0);\n    _defineProperty(this, \"keyWasJustPressed\", false);\n  }\n  view() {\n    return m(\"ul\", {\n      className: \"Dropdown-menu MentionsDropdown\"\n    }, this.items.map(item => m(\"li\", null, item)));\n  }\n  show(left, top) {\n    this.$().show().css({\n      left: left + 'px',\n      top: top + 'px'\n    });\n    this.active = true;\n  }\n  hide() {\n    this.$().hide();\n    this.active = false;\n  }\n  navigate(delta) {\n    this.keyWasJustPressed = true;\n    this.setIndex(this.index + delta, true);\n    clearTimeout(this.keyWasJustPressedTimeout);\n    this.keyWasJustPressedTimeout = setTimeout(() => this.keyWasJustPressed = false, 500);\n  }\n  complete() {\n    this.$('li').eq(this.index).find('button').click();\n  }\n  setIndex(index, scrollToItem) {\n    if (this.keyWasJustPressed && !scrollToItem) return;\n    const $dropdown = this.$();\n    const $items = $dropdown.find('li');\n    let rangedIndex = index;\n    if (rangedIndex < 0) {\n      rangedIndex = $items.length - 1;\n    } else if (rangedIndex >= $items.length) {\n      rangedIndex = 0;\n    }\n    this.index = rangedIndex;\n    const $item = $items.removeClass('active').eq(rangedIndex).addClass('active');\n    if (scrollToItem) {\n      const dropdownScroll = $dropdown.scrollTop();\n      const dropdownTop = $dropdown.offset().top;\n      const dropdownBottom = dropdownTop + $dropdown.outerHeight();\n      const itemTop = $item.offset().top;\n      const itemBottom = itemTop + $item.outerHeight();\n      let scrollTop;\n      if (itemTop < dropdownTop) {\n        scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n      } else if (itemBottom > dropdownBottom) {\n        scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n      }\n      if (typeof scrollTop !== 'undefined') {\n        $dropdown.stop(true).animate({\n          scrollTop\n        }, 100);\n      }\n    }\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/fragments/AutocompleteDropdown', AutocompleteDropdown);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/Component');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/utils/classList');","import Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\nexport default class MentionsDropdownItem extends Component {\n  view(vnode) {\n    const {\n      mentionable,\n      ...attrs\n    } = this.attrs;\n    const className = classList('MentionsDropdownItem', 'PostPreview', \"MentionsDropdown-\".concat(mentionable.type()));\n    return m(\"button\", Object.assign({\n      className: className\n    }, attrs), m(\"span\", {\n      className: \"PostPreview-content\"\n    }, vnode.children));\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/components/MentionsDropdownItem', MentionsDropdownItem);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport MentionsDropdownItem from '../components/MentionsDropdownItem';\nexport default class MentionableModels {\n  constructor(dropdownItemAttrs) {\n    _defineProperty(this, \"mentionables\", void 0);\n    /**\n     * We store models returned from an API here to preserve order in which they are returned\n     * This prevents the list jumping around while models are returned.\n     * We also use a hashmap for model IDs to provide O(1) lookup for the users already in the list.\n     */\n    _defineProperty(this, \"results\", {});\n    _defineProperty(this, \"typed\", null);\n    _defineProperty(this, \"searched\", []);\n    _defineProperty(this, \"dropdownItemAttrs\", {});\n    /**\n     * Don't send API calls searching for models until at least 2 characters have been typed.\n     * This focuses the mention results on models already loaded.\n     */\n    _defineProperty(this, \"search\", async () => {\n      if (!this.typed || this.typed.length <= 1) return;\n      const typedLower = this.typed.toLowerCase();\n      if (this.searched.includes(typedLower)) return;\n      for (const mentionable of this.mentionables) {\n        for (const model of await mentionable.search(typedLower)) {\n          if (!this.results[mentionable.type()].has(model.id())) {\n            this.results[mentionable.type()].set(model.id(), model);\n          }\n        }\n      }\n      this.searched.push(typedLower);\n      return Promise.resolve();\n    });\n    this.dropdownItemAttrs = dropdownItemAttrs;\n  }\n  init(mentionables) {\n    this.typed = null;\n    this.mentionables = mentionables;\n    for (const mentionable of this.mentionables) {\n      this.results[mentionable.type()] = new Map(mentionable.initialResults().map(result => [result.id(), result]));\n    }\n  }\n  matches(mentionable, model) {\n    var _this$typed;\n    return mentionable.matches(model, ((_this$typed = this.typed) == null ? void 0 : _this$typed.toLowerCase()) || '');\n  }\n  makeSuggestion(mentionable, model) {\n    const content = mentionable.suggestion(model, this.typed);\n    const replacement = mentionable.replacement(model);\n    const {\n      onclick,\n      ...attrs\n    } = this.dropdownItemAttrs;\n    return m(MentionsDropdownItem, Object.assign({\n      mentionable: mentionable,\n      onclick: () => onclick(replacement)\n    }, attrs), content);\n  }\n  buildSuggestions() {\n    const suggestions = [];\n    for (const mentionable of this.mentionables) {\n      if (!mentionable.enabled()) continue;\n      let matches = Array.from(this.results[mentionable.type()].values()).filter(model => this.matches(mentionable, model));\n      const max = mentionable.maxStoreMatchedResults();\n      if (max) matches = matches.splice(0, max);\n      for (const model of matches) {\n        const dropdownItem = this.makeSuggestion(mentionable, model);\n        suggestions.push(dropdownItem);\n      }\n    }\n    return suggestions;\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/MentionableModels', MentionableModels);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/Notification');","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\nimport { truncate } from 'flarum/common/utils/string';\nexport default class PostMentionedNotification extends Notification {\n  icon() {\n    return 'fas fa-reply';\n  }\n  href() {\n    const notification = this.attrs.notification;\n    const post = notification.subject();\n    const content = notification.content();\n    return app.route.discussion(post.discussion(), content && content.replyNumber);\n  }\n  content() {\n    const notification = this.attrs.notification;\n    const user = notification.fromUser();\n    return app.translator.trans('flarum-mentions.forum.notifications.post_mentioned_text', {\n      user,\n      count: 1\n    });\n  }\n  excerpt() {\n    return truncate(this.attrs.notification.subject().contentPlain() || '', 200);\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/components/PostMentionedNotification', PostMentionedNotification);","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\nimport { truncate } from 'flarum/common/utils/string';\nexport default class UserMentionedNotification extends Notification {\n  icon() {\n    return 'fas fa-at';\n  }\n  href() {\n    const post = this.attrs.notification.subject();\n    return app.route.discussion(post.discussion(), post.number());\n  }\n  content() {\n    const user = this.attrs.notification.fromUser();\n    return app.translator.trans('flarum-mentions.forum.notifications.user_mentioned_text', {\n      user\n    });\n  }\n  excerpt() {\n    return truncate(this.attrs.notification.subject().contentPlain(), 200);\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/components/UserMentionedNotification', UserMentionedNotification);","import app from 'flarum/forum/app';\nimport Notification from 'flarum/forum/components/Notification';\nimport { truncate } from 'flarum/common/utils/string';\nexport default class GroupMentionedNotification extends Notification {\n  icon() {\n    return 'fas fa-at';\n  }\n  href() {\n    const post = this.attrs.notification.subject();\n    return app.route.discussion(post.discussion(), post.number());\n  }\n  content() {\n    const user = this.attrs.notification.fromUser();\n    return app.translator.trans('flarum-mentions.forum.notifications.group_mentioned_text', {\n      user\n    });\n  }\n  excerpt() {\n    return truncate(this.attrs.notification.subject().contentPlain(), 200);\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/components/GroupMentionedNotification', GroupMentionedNotification);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport default class MentionFormat {\n  constructor() {\n    _defineProperty(this, \"instances\", void 0);\n    _defineProperty(this, \"mentionables\", void 0);\n    _defineProperty(this, \"extendable\", void 0);\n  }\n  makeMentionables() {\n    var _this$instances;\n    return (_this$instances = this.instances) != null ? _this$instances : this.instances = this.mentionables.map(Mentionable => new Mentionable(this));\n  }\n  getMentionable(type) {\n    var _this$makeMentionable;\n    return (_this$makeMentionable = this.makeMentionables().find(mentionable => mentionable.type() === type)) != null ? _this$makeMentionable : null;\n  }\n  extend(mentionable) {\n    if (!this.extendable) throw new Error('This mention format does not allow extending.');\n    this.mentionables.push(mentionable);\n  }\n\n  /**\n   * Picks the term to search in the API from the typed text.\n   * @example:\n   *  * Full text = `Hello @\"John D`\n   *  * Typed text = `\"John D`\n   *  * Query = `John D`\n   */\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/formats/MentionFormat', MentionFormat);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Avatar');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/helpers/highlight');","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport default class MentionableModel {\n  constructor(format) {\n    _defineProperty(this, \"format\", void 0);\n    this.format = format;\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/MentionableModel', MentionableModel);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/utils/extractText');","import app from 'flarum/forum/app';\nimport extractText from 'flarum/common/utils/extractText';\n\n/**\n * Whether to use the old mentions format.\n *\n * `'@username'` or `'@\"Display name\"'`\n */\nexport const shouldUseOldFormat = () => app.forum.attribute('allowUsernameMentionFormat') || false;\nconst getDeletedUserText = () => extractText(app.translator.trans('core.lib.username.deleted_text'));\n\n/**\n * Fetches a user's username or display name.\n *\n * Chooses based on the format option set in the admin settings page.\n *\n * @param user An instance of the User model to fetch the username for\n * @param useDisplayName If `true`, uses `user.displayName()`, otherwise, uses `user.username()`\n */\nexport default function getCleanDisplayName(user, useDisplayName) {\n  if (useDisplayName === void 0) {\n    useDisplayName = true;\n  }\n  if (!user) return getDeletedUserText().replace(/\"#[a-z]{0,3}[0-9]+/, '_');\n  const text = (useDisplayName ? user.displayName() : user.username()) || getDeletedUserText();\n  return text.replace(/\"#[a-z]{0,3}[0-9]+/, '_');\n}\nflarum.reg.add('flarum-mentions', 'forum/utils/getCleanDisplayName', getCleanDisplayName);","import app from 'flarum/forum/app';\nimport usernameHelper from 'flarum/common/helpers/username';\nimport Avatar from 'flarum/common/components/Avatar';\nimport highlight from 'flarum/common/helpers/highlight';\nimport MentionableModel from './MentionableModel';\nimport getCleanDisplayName, { shouldUseOldFormat } from '../utils/getCleanDisplayName';\nexport default class UserMention extends MentionableModel {\n  type() {\n    return 'user';\n  }\n  initialResults() {\n    return Array.from(app.store.all('users'));\n  }\n\n  /**\n   * Automatically determines which mention syntax to be used based on the option in the\n   * admin dashboard. Also performs display name clean-up automatically.\n   *\n   * @\"Display name\"#UserID or `@username`\n   *\n   * @example <caption>New display name syntax</caption>\n   * // '@\"user\"#1'\n   * forUser(User) // User is ID 1, display name is 'User'\n   *\n   * @example <caption>Using old syntax</caption>\n   * // '@username'\n   * forUser(user) // User's username is 'username'\n   */\n  replacement(user) {\n    if (shouldUseOldFormat()) {\n      const cleanText = getCleanDisplayName(user, false);\n      return this.format.format(cleanText);\n    }\n    const cleanText = getCleanDisplayName(user);\n    return this.format.format(cleanText, '', user.id());\n  }\n  suggestion(model, typed) {\n    const username = usernameHelper(model, name => highlight(name, typed));\n    return m('[', null, m(Avatar, {\n      user: model\n    }), username);\n  }\n  matches(model, typed) {\n    if (!typed) return false;\n    const names = [model.username(), model.displayName()];\n    return names.some(name => name.toLowerCase().substr(0, typed.length) === typed);\n  }\n  maxStoreMatchedResults() {\n    return null;\n  }\n  async search(typed) {\n    return await app.store.find('users', {\n      filter: {\n        q: typed\n      },\n      page: {\n        limit: 5\n      }\n    });\n  }\n  enabled() {\n    return true;\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/UserMention', UserMention);","import app from 'flarum/forum/app';\nimport MentionableModel from './MentionableModel';\nimport usernameHelper from 'flarum/common/helpers/username';\nimport Avatar from 'flarum/common/components/Avatar';\nimport highlight from 'flarum/common/helpers/highlight';\nimport { truncate } from 'flarum/common/utils/string';\nimport getCleanDisplayName from '../utils/getCleanDisplayName';\nexport default class PostMention extends MentionableModel {\n  type() {\n    return 'post';\n  }\n\n  /**\n   * If the user is replying to a discussion, or if they are editing a\n   * post, then we can suggest other posts in the discussion to mention.\n   * We will add the 5 most recent comments in the discussion which\n   * match any username characters that have been typed.\n   */\n  initialResults() {\n    const EditPostComposer = flarum.reg.checkModule('core', 'forum/components/EditPostComposer');\n    const ReplyComposer = flarum.reg.checkModule('core', 'forum/components/ReplyComposer');\n    if ((!ReplyComposer || !app.composer.bodyMatches(ReplyComposer)) && (!EditPostComposer || !app.composer.bodyMatches(EditPostComposer))) {\n      return [];\n    }\n\n    // @ts-ignore\n    const composerAttrs = app.composer.body.attrs;\n    const composerPost = composerAttrs.post;\n    const discussion = composerPost && composerPost.discussion() || composerAttrs.discussion;\n    return discussion.posts()\n    // Filter to only comment posts, and replies before this message\n    .filter(post => post && post.contentType() === 'comment' && (!composerPost || post.number() < composerPost.number()))\n    // Sort by new to old\n    .sort((a, b) => b.createdAt().getTime() - a.createdAt().getTime());\n  }\n\n  /**\n   * Generates the syntax for mentioning of a post. Also cleans up the display name.\n   *\n   * @example <caption>Post mention</caption>\n   * // '@\"User\"#p13'\n   * // @\"Display name\"#pPostID\n   * forPostMention(user, 13) // User display name is 'User', post ID is 13\n   */\n  replacement(post) {\n    const user = post.user();\n    const cleanText = getCleanDisplayName(user);\n    return this.format.format(cleanText, 'p', post.id());\n  }\n  suggestion(model, typed) {\n    var _model$contentPlain;\n    const user = model.user() || null;\n    const username = usernameHelper(user, name => highlight(name, typed));\n    return m('[', null, m(Avatar, {\n      user: user\n    }), username, [app.translator.trans('flarum-mentions.forum.composer.reply_to_post_text', {\n      number: model.number()\n    }), ' — ', truncate((_model$contentPlain = model.contentPlain()) != null ? _model$contentPlain : '', 200)]);\n  }\n  matches(model, typed) {\n    const user = model.user();\n    const userMentionable = app.mentionFormats.mentionable('user');\n    return !typed || user && userMentionable.matches(user, typed);\n  }\n  maxStoreMatchedResults() {\n    return 5;\n  }\n\n  /**\n   * Post mention suggestions are only offered from current discussion posts.\n   */\n  search(typed) {\n    return Promise.resolve([]);\n  }\n  enabled() {\n    return true;\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/PostMention', PostMention);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/models/Group');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/Badge');","import app from 'flarum/forum/app';\nimport Group from 'flarum/common/models/Group';\nimport MentionableModel from './MentionableModel';\nimport Badge from 'flarum/common/components/Badge';\nimport highlight from 'flarum/common/helpers/highlight';\nexport default class GroupMention extends MentionableModel {\n  type() {\n    return 'group';\n  }\n  initialResults() {\n    return Array.from(app.store.all('groups').filter(g => {\n      return g.id() !== Group.GUEST_ID && g.id() !== Group.MEMBER_ID;\n    }));\n  }\n\n  /**\n   * Generates the mention syntax for a group mention.\n   *\n   * @\"Name Plural\"#gGroupID\n   *\n   * @example <caption>Group mention</caption>\n   * // '@\"Mods\"#g4'\n   * forGroup(group) // Group display name is 'Mods', group ID is 4\n   */\n  replacement(group) {\n    return this.format.format(group.namePlural(), 'g', group.id());\n  }\n  suggestion(model, typed) {\n    let groupName = model.namePlural();\n    if (typed) {\n      groupName = highlight(groupName, typed);\n    }\n    return m('[', null, m(Badge, {\n      className: \"Avatar Badge Badge--group--\".concat(model.id(), \" Badge-icon\"),\n      color: model.color(),\n      type: \"group\",\n      icon: model.icon()\n    }), m(\"span\", {\n      className: \"username\"\n    }, groupName));\n  }\n  matches(model, typed) {\n    if (!typed) return false;\n    const names = [model.namePlural().toLowerCase(), model.nameSingular().toLowerCase()];\n    return names.some(name => name.toLowerCase().substr(0, typed.length) === typed);\n  }\n  maxStoreMatchedResults() {\n    return null;\n  }\n\n  /**\n   * All groups are already loaded, so we don't need to search for them.\n   */\n  search(typed) {\n    return Promise.resolve([]);\n  }\n  enabled() {\n    var _app$session$user$can, _app$session, _app$session$user;\n    return (_app$session$user$can = (_app$session = app.session) == null ? void 0 : (_app$session$user = _app$session.user) == null ? void 0 : _app$session$user.canMentionGroups()) != null ? _app$session$user$can : false;\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/GroupMention', GroupMention);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport MentionFormat from './MentionFormat';\nimport UserMention from '../UserMention';\nimport PostMention from '../PostMention';\nimport GroupMention from '../GroupMention';\nexport default class AtMentionFormat extends MentionFormat {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"mentionables\", [UserMention, PostMention, GroupMention]);\n    _defineProperty(this, \"extendable\", true);\n  }\n  trigger() {\n    return '@';\n  }\n  queryFromTyped(typed) {\n    const matchTyped = typed.match(/^[\"“]?((?:(?!\"#).)+)$/);\n    return matchTyped ? matchTyped[1] : null;\n  }\n  format(name, char, id) {\n    if (char === void 0) {\n      char = '';\n    }\n    if (id === void 0) {\n      id = null;\n    }\n    return {\n      simple: \"@\".concat(name),\n      safe: \"@\\\"\".concat(name, \"\\\"#\").concat(char).concat(id)\n    }[id ? 'safe' : 'simple'];\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/formats/AtMentionFormat', AtMentionFormat);","import app from 'flarum/forum/app';\nimport Badge from 'flarum/common/components/Badge';\nimport highlight from 'flarum/common/helpers/highlight';\nimport MentionableModel from './MentionableModel';\nexport default class TagMention extends MentionableModel {\n  type() {\n    return 'tag';\n  }\n  initialResults() {\n    return Array.from(app.store.all('tags'));\n  }\n\n  /**\n   * Generates the mention syntax for a tag mention.\n   *\n   * ~tagSlug\n   *\n   * @example <caption>Tag mention</caption>\n   * // ~general\n   * forTag(tag) // Tag display name is 'Tag', tag ID is 5\n   */\n  replacement(tag) {\n    return this.format.format(tag.slug());\n  }\n  matches(model, typed) {\n    if (!typed) return false;\n    const names = [model.name().toLowerCase()];\n    return names.some(name => name.toLowerCase().substr(0, typed.length) === typed);\n  }\n  maxStoreMatchedResults() {\n    return null;\n  }\n  async search(typed) {\n    return await app.store.find('tags', {\n      filter: {\n        q: typed\n      },\n      page: {\n        limit: 5\n      }\n    });\n  }\n  suggestion(model, typed) {\n    let tagName = model.name();\n    if (typed) {\n      tagName = highlight(tagName, typed);\n    }\n    return m('[', null, m(Badge, {\n      className: \"Avatar\",\n      icon: model.icon(),\n      color: model.color(),\n      type: \"tag\"\n    }), m(\"span\", {\n      className: \"username\"\n    }, tagName));\n  }\n  enabled() {\n    return 'flarum-tags' in flarum.extensions;\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/TagMention', TagMention);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport MentionFormat from './MentionFormat';\nimport TagMention from '../TagMention';\nexport default class HashMentionFormat extends MentionFormat {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"mentionables\", [TagMention]);\n    _defineProperty(this, \"extendable\", true);\n  }\n  trigger() {\n    return '#';\n  }\n  queryFromTyped(typed) {\n    const matchTyped = typed.match(/^[-_\\p{L}\\p{N}\\p{M}]+$/giu);\n    return matchTyped ? matchTyped[0] : null;\n  }\n  format(slug) {\n    return \"#\".concat(slug);\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/formats/HashMentionFormat', HashMentionFormat);","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport AtMentionFormat from './AtMentionFormat';\nimport HashMentionFormat from './HashMentionFormat';\nexport default class MentionFormats {\n  constructor() {\n    _defineProperty(this, \"formats\", [new AtMentionFormat(), new HashMentionFormat()]);\n  }\n  get(symbol) {\n    var _this$formats$find;\n    return (_this$formats$find = this.formats.find(f => f.trigger() === symbol)) != null ? _this$formats$find : null;\n  }\n  mentionable(type) {\n    for (const format of this.formats) {\n      const mentionable = format.getMentionable(type);\n      if (mentionable) return mentionable;\n    }\n    return null;\n  }\n  extend(format) {\n    this.formats.push(new format());\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/mentionables/formats/MentionFormats', MentionFormats);","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/UserPage');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/components/LinkButton');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/extenders');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/models/Post');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'common/models/User');","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.reg.get('core', 'forum/components/PostsUserPage');","import app from 'flarum/forum/app';\nimport PostsUserPage from 'flarum/forum/components/PostsUserPage';\n\n/**\n * The `MentionsUserPage` component shows post which user Mentioned at\n */\nexport default class MentionsUserPage extends PostsUserPage {\n  /**\n   * Load a new page of the user's activity feed.\n   *\n   * @param {Integer} [offset] The position to start getting results from.\n   * @return {Promise}\n   * @protected\n   */\n  loadResults(offset) {\n    return app.store.find('posts', {\n      filter: {\n        type: 'comment',\n        mentioned: this.user.id()\n      },\n      page: {\n        offset,\n        limit: this.loadLimit\n      },\n      sort: '-createdAt'\n    });\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/components/MentionsUserPage', MentionsUserPage);","import Extend from 'flarum/common/extenders';\nimport Post from 'flarum/common/models/Post';\nimport User from 'flarum/common/models/User';\nimport MentionsUserPage from './components/MentionsUserPage';\nexport default [new Extend.Routes() //\n.add('user.mentions', '/u/:username/mentions', MentionsUserPage), new Extend.Model(Post) //\n.hasMany('mentionedBy').attribute('mentionedByCount'), new Extend.Model(User) //\n.attribute('canMentionGroups')];","import app from 'flarum/forum/app';\nimport username from 'flarum/common/helpers/username';\nimport extractText from 'flarum/common/utils/extractText';\nexport function filterUserMentions(tag) {\n  let user;\n  if (app.forum.attribute('allowUsernameMentionFormat') && tag.hasAttribute('username')) user = app.store.getBy('users', 'username', tag.getAttribute('username'));else if (tag.hasAttribute('id')) user = app.store.getById('users', tag.getAttribute('id'));\n  if (user) {\n    tag.setAttribute('id', user.id());\n    tag.setAttribute('slug', user.slug());\n    tag.setAttribute('displayname', extractText(username(user)));\n    return true;\n  }\n  tag.invalidate();\n}\nexport function postFilterUserMentions(tag) {\n  tag.setAttribute('deleted', false);\n}\nexport function filterPostMentions(tag) {\n  const post = app.store.getById('posts', tag.getAttribute('id'));\n  if (post) {\n    tag.setAttribute('discussionid', post.discussion().id());\n    tag.setAttribute('number', post.number());\n    tag.setAttribute('displayname', extractText(username(post.user())));\n    return true;\n  }\n}\nexport function postFilterPostMentions(tag) {\n  tag.setAttribute('deleted', false);\n}\nexport function filterGroupMentions(tag) {\n  var _app$session, _app$session$user;\n  if ((_app$session = app.session) != null && (_app$session$user = _app$session.user) != null && _app$session$user.canMentionGroups()) {\n    const group = app.store.getById('groups', tag.getAttribute('id'));\n    if (group) {\n      tag.setAttribute('groupname', extractText(group.namePlural()));\n      return true;\n    }\n  }\n  tag.invalidate();\n}\nexport function postFilterGroupMentions(tag) {\n  var _app$session2, _app$session2$user;\n  if ((_app$session2 = app.session) != null && (_app$session2$user = _app$session2.user) != null && _app$session2$user.canMentionGroups()) {\n    const group = app.store.getById('groups', tag.getAttribute('id'));\n    tag.setAttribute('color', group.color());\n    tag.setAttribute('icon', group.icon());\n    tag.setAttribute('deleted', false);\n  }\n}\nexport function filterTagMentions(tag) {\n  if ('flarum-tags' in flarum.extensions) {\n    const model = app.store.getBy('tags', 'slug', tag.getAttribute('slug'));\n    if (model) {\n      tag.setAttribute('id', model.id());\n      tag.setAttribute('tagname', model.name());\n      return true;\n    }\n  }\n  tag.invalidate();\n}\nexport function postFilterTagMentions(tag) {\n  if ('flarum-tags' in flarum.extensions) {\n    const model = app.store.getBy('tags', 'slug', tag.getAttribute('slug'));\n    tag.setAttribute('icon', model.icon());\n    tag.setAttribute('color', model.color());\n    tag.setAttribute('deleted', false);\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/utils/textFormatter', { filterUserMentions: filterUserMentions,postFilterUserMentions: postFilterUserMentions,filterPostMentions: filterPostMentions,postFilterPostMentions: postFilterPostMentions,filterGroupMentions: filterGroupMentions,postFilterGroupMentions: postFilterGroupMentions,filterTagMentions: filterTagMentions,postFilterTagMentions: postFilterTagMentions, });","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport default class Mentionables {\n  constructor() {\n    _defineProperty(this, \"formats\", []);\n    _defineProperty(this, \"mentionables\", {});\n  }\n  /**\n   * Register a new mention format.\n   * Must extend MentionFormat and have a unique unused trigger symbol.\n   */\n  format(format) {\n    this.formats.push(format);\n    return this;\n  }\n\n  /**\n   * Register a new mentionable model to a mention format.\n   * Only works if the format has already been registered,\n   *  and the format allows using multiple mentionables.\n   *\n   * @param symbol The trigger symbol of the format to extend (ex: @).\n   * @param mentionable The mentionable instance to register.\n   *                    Must extend MentionableModel.\n   */\n  mentionable(symbol, mentionable) {\n    if (!this.mentionables[symbol]) {\n      this.mentionables[symbol] = [];\n    }\n    this.mentionables[symbol].push(mentionable);\n    return this;\n  }\n  extend(app) {\n    for (const format of this.formats) {\n      app.mentionFormats.extend(format);\n    }\n    for (const symbol in this.mentionables) {\n      const format = app.mentionFormats.get(symbol);\n      if (!format) continue;\n      for (const mentionable of this.mentionables[symbol]) {\n        format.extend(mentionable);\n      }\n    }\n  }\n}\nflarum.reg.add('flarum-mentions', 'forum/extenders/Mentionables', Mentionables);","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport { getPlainContent } from 'flarum/common/utils/string';\nimport textContrastClass from 'flarum/common/helpers/textContrastClass';\nimport Post from 'flarum/forum/components/Post';\nimport addPostMentionPreviews from './addPostMentionPreviews';\nimport addMentionedByList from './addMentionedByList';\nimport addPostReplyAction from './addPostReplyAction';\nimport addPostQuoteButton from './addPostQuoteButton';\nimport addComposerAutocomplete from './addComposerAutocomplete';\nimport PostMentionedNotification from './components/PostMentionedNotification';\nimport UserMentionedNotification from './components/UserMentionedNotification';\nimport GroupMentionedNotification from './components/GroupMentionedNotification';\nimport MentionFormats from './mentionables/formats/MentionFormats';\nimport UserPage from 'flarum/forum/components/UserPage';\nimport LinkButton from 'flarum/common/components/LinkButton';\napp.mentionFormats = new MentionFormats();\nexport { default as extend } from './extend';\napp.initializers.add('flarum-mentions', function () {\n  // For every mention of a post inside a post's content, set up a hover handler\n  // that shows a preview of the mentioned post.\n  addPostMentionPreviews();\n\n  // In the footer of each post, show information about who has replied (i.e.\n  // who the post has been mentioned by).\n  addMentionedByList();\n\n  // Add a 'reply' control to the footer of each post. When clicked, it will\n  // open up the composer and add a post mention to its contents.\n  addPostReplyAction();\n\n  // Show a Quote button when Post text is selected\n  addPostQuoteButton();\n\n  // After typing '@' in the composer, show a dropdown suggesting a bunch of\n  // posts or users that the user could mention.\n  addComposerAutocomplete();\n  app.notificationComponents.postMentioned = PostMentionedNotification;\n  app.notificationComponents.userMentioned = UserMentionedNotification;\n  app.notificationComponents.groupMentioned = GroupMentionedNotification;\n\n  // Add notification preferences.\n  extend('flarum/forum/components/NotificationGrid', 'notificationTypes', function (items) {\n    items.add('postMentioned', {\n      name: 'postMentioned',\n      icon: 'fas fa-reply',\n      label: app.translator.trans('flarum-mentions.forum.settings.notify_post_mentioned_label')\n    });\n    items.add('userMentioned', {\n      name: 'userMentioned',\n      icon: 'fas fa-at',\n      label: app.translator.trans('flarum-mentions.forum.settings.notify_user_mentioned_label')\n    });\n    items.add('groupMentioned', {\n      name: 'groupMentioned',\n      icon: 'fas fa-at',\n      label: app.translator.trans('flarum-mentions.forum.settings.notify_group_mentioned_label')\n    });\n  });\n\n  // Add mentions tab in user profile\n  extend(UserPage.prototype, 'navItems', function (items) {\n    const user = this.user;\n    items.add('mentions', m(LinkButton, {\n      href: app.route('user.mentions', {\n        username: user.slug()\n      }),\n      name: \"mentions\",\n      icon: \"fas fa-at\"\n    }, app.translator.trans('flarum-mentions.forum.user.mentions_link')), 80);\n  });\n\n  // Remove post mentions when rendering post previews.\n  getPlainContent.removeSelectors.push('a.PostMention');\n\n  // Apply color contrast fix on group mentions.\n  extend(Post.prototype, 'oncreate', function () {\n    this.$('.GroupMention--colored, .TagMention--colored').each(function () {\n      this.classList.add(textContrastClass(getComputedStyle(this).getPropertyValue('--color')));\n    });\n  });\n});\nexport * from './utils/textFormatter';\nimport './forum';","import { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport PostPreview from 'flarum/forum/components/PostPreview';\nimport LoadingIndicator from 'flarum/common/components/LoadingIndicator';\nexport default function addPostMentionPreviews() {\n  function addPreviews() {\n    const contentHtml = this.attrs.post.contentHtml();\n    if (contentHtml === this.oldPostContentHtml || this.isEditing()) return;\n    this.oldPostContentHtml = contentHtml;\n    const parentPost = this.attrs.post;\n    const $parentPost = this.$();\n    this.$().on('click', '.UserMention:not(.UserMention--deleted), .PostMention:not(.PostMention--deleted), .TagMention:not(.TagMention--deleted)', function (e) {\n      m.route.set(this.getAttribute('href'));\n      e.preventDefault();\n    });\n    this.$('.PostMention:not(.PostMention--deleted)').each(function () {\n      const $this = $(this);\n      const id = $this.data('id');\n      let timeout;\n\n      // Wrap the mention link in a wrapper element so that we can insert a\n      // preview popup as its sibling and relatively position it.\n      const $preview = $('<ul class=\"Dropdown-menu PostMention-preview fade\"/>');\n      $parentPost.append($preview);\n      const getPostElement = () => {\n        return $(\".PostStream-item[data-id=\\\"\".concat(id, \"\\\"]\"));\n      };\n      const showPreview = () => {\n        // When the user hovers their mouse over the mention, look for the\n        // post that it's referring to in the stream, and determine if it's\n        // in the viewport. If it is, we will \"pulsate\" it.\n        const $post = getPostElement();\n        let visible = false;\n        if ($post.length) {\n          const top = $post.offset().top;\n          const scrollTop = window.pageYOffset;\n          if (top > scrollTop && top + $post.height() < scrollTop + $(window).height()) {\n            $post.addClass('pulsate');\n            visible = true;\n          }\n        }\n\n        // Otherwise, we will show a popup preview of the post. If the post\n        // hasn't yet been loaded, we will need to do that.\n        if (!visible) {\n          // Position the preview so that it appears above the mention.\n          // (The offsetParent should be .Post-body.)\n          const positionPreview = () => {\n            const previewHeight = $preview.outerHeight(true);\n            let offset = 0;\n\n            // If the preview goes off the top of the viewport, reposition it to\n            // be below the mention.\n            if ($this.offset().top - previewHeight < $(window).scrollTop() + $('#header').outerHeight()) {\n              offset += $this.outerHeight(true);\n            } else {\n              offset -= previewHeight;\n            }\n            $preview.show().css('top', $this.offset().top - $parentPost.offset().top + offset).css('left', $this.offsetParent().offset().left - $parentPost.offset().left).css('max-width', $this.offsetParent().width());\n          };\n          const showPost = post => {\n            const discussion = post.discussion();\n            m.render($preview[0], [discussion !== parentPost.discussion() && m(\"li\", null, m(\"span\", {\n              className: \"PostMention-preview-discussion\"\n            }, discussion.title())), m(\"li\", null, m(PostPreview, {\n              post: post\n            }))]);\n            positionPreview();\n          };\n          const post = app.store.getById('posts', id);\n          if (post && post.discussion()) {\n            showPost(post);\n          } else {\n            m.render($preview[0], m(LoadingIndicator, null));\n            app.store.find('posts', id).then(showPost);\n            positionPreview();\n          }\n          setTimeout(() => $preview.off('transitionend').addClass('in'));\n        }\n      };\n      const hidePreview = () => {\n        getPostElement().removeClass('pulsate');\n        if ($preview.hasClass('in')) {\n          $preview.removeClass('in').one('transitionend', () => $preview.hide());\n        }\n      };\n\n      // On a touch (mobile) device we cannot hover the link to reveal the preview.\n      // Instead we cancel the navigation so that a click reveals the preview.\n      // Users can then click on the preview to go to the post if desired.\n      $this.on('touchend', e => {\n        if (e.cancelable) {\n          e.preventDefault();\n        }\n      });\n      $this.add($preview).hover(() => {\n        clearTimeout(timeout);\n        timeout = setTimeout(showPreview, 250);\n      }, () => {\n        clearTimeout(timeout);\n        getPostElement().removeClass('pulsate');\n        timeout = setTimeout(hidePreview, 250);\n      }).on('touchend', e => {\n        showPreview();\n        e.stopPropagation();\n      });\n      $(document).on('touchend', hidePreview);\n    });\n  }\n  extend(CommentPost.prototype, 'oncreate', addPreviews);\n  extend(CommentPost.prototype, 'onupdate', addPreviews);\n}","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport Link from 'flarum/common/components/Link';\nimport PostPreview from 'flarum/forum/components/PostPreview';\nimport punctuateSeries from 'flarum/common/helpers/punctuateSeries';\nimport username from 'flarum/common/helpers/username';\nimport Icon from 'flarum/common/components/Icon';\nimport Button from 'flarum/common/components/Button';\nimport MentionedByModal from './components/MentionedByModal';\nexport default function addMentionedByList() {\n  function hidePreview() {\n    this.$('.Post-mentionedBy-preview').removeClass('in').one('transitionend', function () {\n      $(this).hide();\n    });\n  }\n  extend(CommentPost.prototype, 'oncreate', function () {\n    let timeout;\n    const post = this.attrs.post;\n    const replies = post.mentionedBy();\n    if (replies && replies.length) {\n      const $preview = $('<ul class=\"Dropdown-menu Post-mentionedBy-preview fade\"/>');\n      this.$().append($preview);\n      const $parentPost = this.$();\n      const $this = this.$('.Post-mentionedBy');\n      const showPreview = () => {\n        if (!$preview.hasClass('in') && $preview.is(':visible')) return;\n\n        // When the user hovers their mouse over the list of people who have\n        // replied to the post, render a list of reply previews into a\n        // popup.\n        m.render($preview[0], m('[', null, replies.map(reply => m(\"li\", {\n          \"data-number\": reply.number()\n        }, m(PostPreview, {\n          post: reply,\n          onclick: hidePreview.bind(this)\n        }))), replies.length < post.mentionedByCount() && m(\"li\", {\n          className: \"Post-mentionedBy-preview-more\"\n        }, m(Button, {\n          className: \"PostPreview Button\",\n          onclick: () => {\n            hidePreview.call(this);\n            app.modal.show(MentionedByModal, {\n              post\n            });\n          }\n        }, m(\"span\", {\n          className: \"PostPreview-content\"\n        }, m(\"span\", {\n          className: \"PostPreview-badge Avatar\"\n        }, m(Icon, {\n          name: 'fas fa-reply-all'\n        })), m(\"span\", null, app.translator.trans('flarum-mentions.forum.post.mentioned_by_more_text', {\n          count: post.mentionedByCount() - replies.length\n        })))))));\n        $preview.show().css('top', $this.offset().top - $parentPost.offset().top + $this.outerHeight(true)).css('left', $this.offsetParent().offset().left - $parentPost.offset().left).css('max-width', $parentPost.width());\n        setTimeout(() => $preview.off('transitionend').addClass('in'));\n      };\n      $this.add($preview).hover(() => {\n        clearTimeout(timeout);\n        timeout = setTimeout(showPreview, 250);\n      }, () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(hidePreview, 250);\n      });\n\n      // Whenever the user hovers their mouse over a particular name in the\n      // list of repliers, highlight the corresponding post in the preview\n      // popup.\n      this.$().find('.Post-mentionedBy-summary a').hover(function () {\n        $preview.find('[data-number=\"' + $(this).data('number') + '\"]').addClass('active');\n      }, function () {\n        $preview.find('[data-number]').removeClass('active');\n      });\n    }\n  });\n  extend(CommentPost.prototype, 'footerItems', function (items) {\n    const post = this.attrs.post;\n    const replies = post.mentionedBy();\n    if (replies && replies.length) {\n      const users = [];\n      const repliers = replies.sort(reply => reply.user() === app.session.user ? -1 : 0).filter(reply => {\n        const user = reply.user();\n        if (users.indexOf(user) === -1) {\n          users.push(user);\n          return true;\n        }\n      });\n      const limit = 4;\n      const overLimit = post.mentionedByCount() > limit;\n\n      // Create a list of unique users who have replied. So even if a user has\n      // replied twice, they will only be in this array once.\n      const names = repliers.slice(0, overLimit ? limit - 1 : limit).map(reply => {\n        const user = reply.user();\n        return m(Link, {\n          href: app.route.post(reply),\n          onclick: hidePreview.bind(this),\n          \"data-number\": reply.number()\n        }, app.session.user === user ? app.translator.trans('flarum-mentions.forum.post.you_text') : username(user));\n      });\n\n      // If there are more users that we've run out of room to display, add a \"x\n      // others\" name to the end of the list. Clicking on it will display a modal\n      // with a full list of names.\n      if (overLimit) {\n        const count = post.mentionedByCount() - names.length;\n        names.push(app.translator.trans('flarum-mentions.forum.post.others_text', {\n          count\n        }));\n      }\n      items.add('replies', m(\"div\", {\n        className: \"Post-mentionedBy\"\n      }, m(\"span\", {\n        className: \"Post-mentionedBy-summary\"\n      }, m(Icon, {\n        name: 'fas fa-reply'\n      }), app.translator.trans(\"flarum-mentions.forum.post.mentioned_by\".concat(repliers[0].user() === app.session.user ? '_self' : '', \"_text\"), {\n        count: names.length,\n        users: punctuateSeries(names)\n      }))));\n    }\n  });\n}","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Button from 'flarum/common/components/Button';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport reply from './utils/reply';\nexport default function addPostReplyAction() {\n  extend(CommentPost.prototype, 'actionItems', function (items) {\n    const post = this.attrs.post;\n    if (post.isHidden() || app.session.user && !post.discussion().canReply()) return;\n    items.add('reply', m(Button, {\n      className: \"Button Button--link\",\n      onclick: () => reply(post)\n    }, app.translator.trans('flarum-mentions.forum.post.reply_link')));\n  });\n}","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport PostQuoteButton from './fragments/PostQuoteButton';\nimport selectedText from './utils/selectedText';\nexport default function addPostQuoteButton() {\n  extend(CommentPost.prototype, 'oncreate', function () {\n    const post = this.attrs.post;\n    if (post.isHidden() || app.session.user && !post.discussion().canReply()) return;\n    const $postBody = this.$('.Post-body');\n\n    // Wrap the quote button in a wrapper element so that we can render\n    // button into it.\n    const $container = $('<div class=\"Post-quoteButtonContainer\"></div>');\n    const button = new PostQuoteButton(post);\n    const handler = function (e) {\n      setTimeout(() => {\n        const content = selectedText($postBody);\n        if (content) {\n          button.content = content;\n          m.render($container[0], button.render());\n          const rects = window.getSelection().getRangeAt(0).getClientRects();\n          const firstRect = rects[0];\n          if (e.clientY < firstRect.bottom && e.clientX - firstRect.right < firstRect.left - e.clientX) {\n            button.showStart(firstRect.left, firstRect.top);\n          } else {\n            const lastRect = rects[rects.length - 1];\n            button.showEnd(lastRect.right, lastRect.bottom);\n          }\n        }\n      }, 1);\n    };\n    this.$().after($container).on('mouseup', handler);\n    if ('ontouchstart' in window) {\n      document.addEventListener('selectionchange', handler, false);\n    }\n  });\n}","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport TextEditorButton from 'flarum/common/components/TextEditorButton';\nimport KeyboardNavigatable from 'flarum/common/utils/KeyboardNavigatable';\nimport AutocompleteReader from 'flarum/common/utils/AutocompleteReader';\nimport { throttle } from 'flarum/common/utils/throttleDebounce';\nimport AutocompleteDropdown from './fragments/AutocompleteDropdown';\nimport MentionableModels from './mentionables/MentionableModels';\nexport default function addComposerAutocomplete() {\n  extend('flarum/common/components/TextEditor', 'onbuild', function () {\n    this.mentionsDropdown = new AutocompleteDropdown();\n    this.searchMentions = throttle(250, (mentionables, buildSuggestions) => mentionables.search().then(buildSuggestions));\n    const $editor = this.$('.TextEditor-editor').wrap('<div class=\"ComposerBody-mentionsWrapper\"></div>');\n    this.navigator = new KeyboardNavigatable();\n    this.navigator.when(() => this.mentionsDropdown.active).onUp(() => this.mentionsDropdown.navigate(-1)).onDown(() => this.mentionsDropdown.navigate(1)).onSelect(this.mentionsDropdown.complete.bind(this.mentionsDropdown)).onCancel(this.mentionsDropdown.hide.bind(this.mentionsDropdown)).bindTo($editor);\n    $editor.after($('<div class=\"ComposerBody-mentionsDropdownContainer\"></div>'));\n  });\n  extend('flarum/common/components/TextEditor', 'buildEditorParams', function (params) {\n    let matchTyped;\n    const suggestionsInputListener = () => {\n      const selection = this.attrs.composer.editor.getSelectionRange();\n      const cursor = selection[0];\n      if (selection[1] - cursor > 0) return;\n      let activeFormat = null;\n      const autocompleteReader = new AutocompleteReader(character => !!(activeFormat = app.mentionFormats.get(character)));\n      const autocompleting = autocompleteReader.check(this.attrs.composer.editor.getLastNChars(30), cursor, /\\S+/);\n      const mentionsDropdown = this.mentionsDropdown;\n      let mentionables = new MentionableModels({\n        onmouseenter: function () {\n          mentionsDropdown.setIndex($(this).parent().index());\n        },\n        onclick: replacement => {\n          this.attrs.composer.editor.replaceBeforeCursor(autocompleting.absoluteStart - 1, replacement + ' ');\n          this.mentionsDropdown.hide();\n        }\n      });\n      this.mentionsDropdown.hide();\n      this.mentionsDropdown.active = false;\n      if (autocompleting) {\n        mentionables.init(activeFormat.makeMentionables());\n        matchTyped = activeFormat.queryFromTyped(autocompleting.typed);\n        if (!matchTyped) return;\n        mentionables.typed = matchTyped;\n        const buildSuggestions = () => {\n          // If the user has started to type a mention,\n          // then suggest models matching.\n          const suggestions = mentionables.buildSuggestions();\n          if (suggestions.length) {\n            this.mentionsDropdown.items = suggestions;\n            m.render(this.$('.ComposerBody-mentionsDropdownContainer')[0], this.mentionsDropdown.render());\n            this.mentionsDropdown.show();\n            const coordinates = this.attrs.composer.editor.getCaretCoordinates(autocompleting.absoluteStart);\n            const width = this.mentionsDropdown.$().outerWidth();\n            const height = this.mentionsDropdown.$().outerHeight();\n            const parent = this.mentionsDropdown.$().offsetParent();\n            let left = coordinates.left;\n            let top = coordinates.top + 15;\n\n            // Keep the dropdown inside the editor.\n            if (top + height > parent.height()) {\n              top = coordinates.top - height - 15;\n            }\n            if (left + width > parent.width()) {\n              left = parent.width() - width;\n            }\n\n            // Prevent the dropdown from going off screen on mobile\n            top = Math.max(-(parent.offset().top - $(document).scrollTop()), top);\n            left = Math.max(-parent.offset().left, left);\n            this.mentionsDropdown.show(left, top);\n          } else {\n            this.mentionsDropdown.active = false;\n            this.mentionsDropdown.hide();\n          }\n        };\n        this.mentionsDropdown.active = true;\n        buildSuggestions();\n        this.mentionsDropdown.setIndex(0);\n        this.mentionsDropdown.$().scrollTop(0);\n        this.searchMentions(mentionables, buildSuggestions);\n      }\n    };\n    params.inputListeners.push(suggestionsInputListener);\n  });\n  extend('flarum/common/components/TextEditor', 'toolbarItems', function (items) {\n    items.add('mention', m(TextEditorButton, {\n      onclick: () => this.attrs.composer.editor.insertAtCursor(' @'),\n      icon: \"fas fa-at\"\n    }, app.translator.trans('flarum-mentions.forum.composer.mention_tooltip')));\n  });\n}"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","reg","MentionedByModalState","constructor","params","page","limit","super","type","add","MentionedByModal","oninit","vnode","this","state","filter","mentionedPost","attrs","post","id","sort","refresh","className","title","content","m","isInitialLoading","getPages","map","items","reply","number","onclick","hasNext","loadNext","loading","isLoadingNext","insertMention","composer","quote","Promise","resolve","mention","replacement","fields","body","originalContent","cursorPosition","editor","getSelectionRange","preceding","slice","precedingNewlines","length","match","insertAtCursor","Array","join","trim","replace","EditPostComposer","checkModule","discussion","then","PostQuoteButton","view","name","show","left","top","$this","$","parentOffset","offsetParent","offset","css","hideHandler","hide","bind","document","on","showStart","window","scrollTop","outerHeight","showEnd","right","bottom","outerWidth","off","selectedText","selection","getSelection","isCollapsed","range","getRangeAt","parent","commonAncestorContainer","contains","clone","append","cloneContents","find","replaceWith","alt","concat","src","innerText","href","text","_typeof","iterator","_defineProperty","arg","input","hint","prim","toPrimitive","undefined","res","TypeError","String","toPropertyKey","configurable","writable","AutocompleteDropdown","arguments","item","active","navigate","delta","keyWasJustPressed","setIndex","index","clearTimeout","keyWasJustPressedTimeout","setTimeout","complete","eq","click","scrollToItem","$dropdown","$items","rangedIndex","$item","removeClass","addClass","dropdownScroll","dropdownTop","dropdownBottom","itemTop","itemBottom","parseInt","stop","animate","MentionsDropdownItem","mentionable","assign","children","MentionableModels","dropdownItemAttrs","async","typed","typedLower","toLowerCase","searched","includes","mentionables","model","search","results","has","set","push","init","Map","initialResults","result","matches","_this$typed","makeSuggestion","suggestion","buildSuggestions","suggestions","enabled","from","values","max","maxStoreMatchedResults","splice","dropdownItem","PostMentionedNotification","icon","notification","subject","replyNumber","user","fromUser","count","excerpt","truncate","contentPlain","UserMentionedNotification","GroupMentionedNotification","MentionFormat","makeMentionables","_this$instances","instances","Mentionable","getMentionable","_this$makeMentionable","extend","extendable","Error","MentionableModel","format","getDeletedUserText","getCleanDisplayName","useDisplayName","displayName","username","UserMention","cleanText","some","substr","q","PostMention","ReplyComposer","composerAttrs","composerPost","posts","contentType","b","createdAt","getTime","_model$contentPlain","userMentionable","GroupMention","g","group","namePlural","groupName","color","nameSingular","_app$session$user$can","_app$session","_app$session$user","canMentionGroups","AtMentionFormat","trigger","queryFromTyped","matchTyped","char","simple","safe","TagMention","tag","slug","tagName","extensions","HashMentionFormat","MentionFormats","symbol","_this$formats$find","formats","f","MentionsUserPage","loadResults","mentioned","loadLimit","hasMany","attribute","filterUserMentions","hasAttribute","getAttribute","setAttribute","invalidate","postFilterUserMentions","filterPostMentions","postFilterPostMentions","filterGroupMentions","postFilterGroupMentions","_app$session2","_app$session2$user","filterTagMentions","postFilterTagMentions","app","mentionFormats","addPreviews","contentHtml","oldPostContentHtml","isEditing","parentPost","$parentPost","e","route","preventDefault","each","data","timeout","$preview","getPostElement","showPreview","$post","visible","pageYOffset","height","positionPreview","previewHeight","width","showPost","render","store","getById","hidePreview","hasClass","one","cancelable","hover","stopPropagation","addPostMentionPreviews","replies","mentionedBy","is","mentionedByCount","users","repliers","indexOf","overLimit","names","addMentionedByList","isHidden","canReply","$postBody","$container","button","handler","rects","getClientRects","firstRect","clientY","clientX","lastRect","after","addEventListener","mentionsDropdown","searchMentions","throttle","$editor","wrap","navigator","when","onUp","onDown","onSelect","onCancel","bindTo","inputListeners","cursor","activeFormat","autocompleting","character","check","getLastNChars","onmouseenter","replaceBeforeCursor","absoluteStart","coordinates","getCaretCoordinates","Math","label","getPlainContent","classList","getComputedStyle","getPropertyValue"],"sourceRoot":""}