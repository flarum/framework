{"version":3,"file":"forum/components/MessageComposer.js","mappings":"ySAce,MAAMA,UAAwB,KAC3CC,cACEC,SAASC,YACT,OAAgBC,KAAM,kBAAc,EACtC,CACAC,iBAAiBC,GACfJ,MAAMK,UAAUD,GAChBA,EAAME,YAAcF,EAAME,aAAe,IAAY,qBAAqB,6CAA8C,CAAC,GAAG,IAC5HF,EAAMG,YAAcH,EAAMG,aAAe,qBAAqB,+CAAgD,CAAC,GAAG,GAClHH,EAAMI,YAAcJ,EAAMI,aAAe,IAAY,qBAAqB,sDAAuD,CAAC,GAAG,IACrIJ,EAAMK,UAAY,uBACpB,CACAC,OAAOC,GACL,IAAIC,EACJZ,MAAMU,OAAOC,GACb,IAAIE,GAA4D,OAAlDD,EAAwBV,KAAKE,MAAMU,iBAAsB,EAASF,EAAsBC,UAAYX,KAAKE,MAAMW,YAAc,GACvIF,IACFA,EAAQA,EAAMG,QAAOC,GAAQA,GAAQA,EAAKC,OAAS,yBAErDhB,KAAKiB,SAASC,OAAOL,WAAab,KAAKiB,SAASC,OAAOL,YAAc,IAAOF,GAC5EX,KAAKa,WAAab,KAAKiB,SAASC,OAAOL,UACzC,CACAM,cACE,MAAMC,EAAQtB,MAAMqB,cAwBpB,OAvBAC,EAAMC,IAAI,aAAcC,EAAE,MAAO,CAC/Bf,UAAW,+BACTP,KAAKE,MAAMU,YAAcU,EAAE,IAAQ,CACrCC,KAAM,SACNhB,UAAW,yCACXiB,QAAS,IAAM,eAAe,IAAoB,CAChDC,MAAO,qBAAqB,wDAAyD,CAAC,GAAG,GACzFC,SAAU1B,KAAKa,aACfc,SAAU,EACVC,SAAU,CAAC,uBACXC,SAAUlB,IACRX,KAAKa,WAAWF,EAAM,KAGzB,qBAAqB,gDAAiDX,KAAKa,aAAaiB,QAAUR,EAAE,MAAO,CAC5Gf,UAAW,oCACV,qBAAqB,sCAAuCe,EAAE,KAAM,CACrEf,UAAW,mCACVP,KAAKa,aAAakB,KAAIhB,GAAQO,EAAE,KAAM,KAAMA,EAAE,IAAS,CACxDU,KAAMjB,EAAKkB,YACVX,EAAE,IAAQ,CACXP,KAAMA,UACC,KACFK,CACT,CAKAc,OACE,MAAMA,EAAO,CACXC,QAASnC,KAAKiB,SAASC,OAAOiB,WAgBhC,OAdInC,KAAKE,MAAMU,WACbsB,EAAKE,cAAgB,CACnBC,OAAQ,CACNH,KAAM,CACJlB,GAAIhB,KAAKE,MAAMU,WAAWI,KAC1BO,KAAM,aAKZW,EAAKvB,MAAQX,KAAKa,aAAakB,KAAIhB,IAAQ,CACzCC,GAAID,EAAKC,SAGNkB,CACT,CACAL,WACE7B,KAAKsC,SAAU,EACf,MAAMJ,EAAOlC,KAAKkC,OAClB,uBAAuB,mBAAmBK,KAAKL,EAAM,CACnDM,OAAQ,CACNC,QAAS,CAAC,aAEXC,MAAKC,IACN,IAAIC,EAAsBC,EAC1B7C,KAAKiB,SAAS6B,OAGdxB,EAAEyB,MAAMC,IAAI,UAAU,SAAU,CAC9BhC,GAAI2B,EAAQT,KAAKE,cAAcC,OAAOH,KAAKlB,MAEmB,OAA/D4B,GAAwBC,EAAc7C,KAAKE,OAAO2B,WAA6Be,EAAqBK,KAAKJ,EAAaF,EAAQ,GAC9H3C,KAAKkD,OAAOC,KAAKnD,MACtB,GAEF,OAAgBJ,EAAiB,mBAAmB,IAAM,uBAC1DwD,OAAOC,IAAIhC,IAAI,kBAAmB,mCAAoCzB,E","sources":["webpack://@flarum/messages/./src/forum/components/MessageComposer.tsx"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport app from 'flarum/forum/app';\nimport ComposerBody from 'flarum/forum/components/ComposerBody';\nimport extractText from 'flarum/common/utils/extractText';\nimport Stream from 'flarum/common/utils/Stream';\nimport Button from 'flarum/common/components/Button';\nimport UserSelectionModal from 'flarum/common/components/UserSelectionModal';\nimport Avatar from 'flarum/common/components/Avatar';\nimport Tooltip from 'flarum/common/components/Tooltip';\n/**\n * The `MessageComposer` component displays the composer content for sending\n * a new message. It adds a selection field as a header control so the user can\n * enter the recipient(s) of their message.\n */\nexport default class MessageComposer extends ComposerBody {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"recipients\", void 0);\n  }\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n    attrs.placeholder = attrs.placeholder || extractText(app.translator.trans('flarum-messages.forum.composer.placeholder', {}, true));\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('flarum-messages.forum.composer.submit_button', {}, true);\n    attrs.confirmExit = attrs.confirmExit || extractText(app.translator.trans('flarum-messages.forum.composer.discard_confirmation', {}, true));\n    attrs.className = 'ComposerBody--message';\n  }\n  oninit(vnode) {\n    var _this$attrs$replyingT;\n    super.oninit(vnode);\n    let users = ((_this$attrs$replyingT = this.attrs.replyingTo) == null ? void 0 : _this$attrs$replyingT.users()) || this.attrs.recipients || [];\n    if (users) {\n      users = users.filter(user => user && user.id() !== app.session.user.id());\n    }\n    this.composer.fields.recipients = this.composer.fields.recipients || Stream(users);\n    this.recipients = this.composer.fields.recipients;\n  }\n  headerItems() {\n    const items = super.headerItems();\n    items.add('recipients', m(\"div\", {\n      className: \"MessageComposer-recipients\"\n    }, !this.attrs.replyingTo && m(Button, {\n      type: \"button\",\n      className: \"Button Button--outline Button--compact\",\n      onclick: () => app.modal.show(UserSelectionModal, {\n        title: app.translator.trans('flarum-messages.forum.recipient_selection_modal.title', {}, true),\n        selected: this.recipients(),\n        maxItems: 1,\n        excluded: [app.session.user.id()],\n        onsubmit: users => {\n          this.recipients(users);\n        }\n      })\n    }, app.translator.trans('flarum-messages.forum.composer.recipients')), !!this.recipients().length && m(\"div\", {\n      className: \"MessageComposer-recipients-label\"\n    }, app.translator.trans('flarum-messages.forum.composer.to')), m(\"ul\", {\n      className: \"MessageComposer-recipients-list\"\n    }, this.recipients().map(user => m(\"li\", null, m(Tooltip, {\n      text: user.username()\n    }, m(Avatar, {\n      user: user\n    })))))), 100);\n    return items;\n  }\n\n  /**\n   * Get the data to submit to the server when the discussion is saved.\n   */\n  data() {\n    const data = {\n      content: this.composer.fields.content()\n    };\n    if (this.attrs.replyingTo) {\n      data.relationships = {\n        dialog: {\n          data: {\n            id: this.attrs.replyingTo.id(),\n            type: 'dialogs'\n          }\n        }\n      };\n    } else {\n      data.users = this.recipients().map(user => ({\n        id: user.id()\n      }));\n    }\n    return data;\n  }\n  onsubmit() {\n    this.loading = true;\n    const data = this.data();\n    app.store.createRecord('dialog-messages').save(data, {\n      params: {\n        include: ['dialog']\n      }\n    }).then(message => {\n      var _this$attrs$onsubmit, _this$attrs;\n      this.composer.hide();\n      // @todo: app.dialogs.refresh();\n      // @ts-ignore\n      m.route.set(app.route('dialog', {\n        id: message.data.relationships.dialog.data.id\n      }));\n      (_this$attrs$onsubmit = (_this$attrs = this.attrs).onsubmit) == null ? void 0 : _this$attrs$onsubmit.call(_this$attrs, message);\n    }, this.loaded.bind(this));\n  }\n}\n_defineProperty(MessageComposer, \"focusOnSelector\", () => '.TextEditor-editor');\nflarum.reg.add('flarum-messages', 'forum/components/MessageComposer', MessageComposer);"],"names":["MessageComposer","constructor","super","arguments","this","static","attrs","initAttrs","placeholder","submitLabel","confirmExit","className","oninit","vnode","_this$attrs$replyingT","users","replyingTo","recipients","filter","user","id","composer","fields","headerItems","items","add","m","type","onclick","title","selected","maxItems","excluded","onsubmit","length","map","text","username","data","content","relationships","dialog","loading","save","params","include","then","message","_this$attrs$onsubmit","_this$attrs","hide","route","set","call","loaded","bind","flarum","reg"],"sourceRoot":""}